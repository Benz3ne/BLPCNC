-- Inside Center Probe v4.0 - Library Enhanced Edition
-- Finds the center of a rectangular pocket using 2 or 4 probes
-- Uses ProbeLib v2.1 enhanced library functions
-- Maintains local control of dialog layout and business logic

-- Load libraries for utilities only
local ProbeLib = require("ProbeLib")
local SystemLib = require("SystemLib")
local UILib = require("UILib")

local inst = ProbeLib.Core.GetInstance()

-- ============================================
-- ROTATION CHECK
-- ============================================
if not ProbeLib.Safety.CheckRotation(inst, "warn") then
    return  -- User cancelled due to rotation
end

-- ============================================
-- TOOL CHECK
-- ============================================
if not ProbeLib.Core.ActivateProbeTool(inst) then
    return  -- User cancelled tool activation
end

-- ============================================
-- PROBE PRECHECK
-- ============================================
if not ProbeLib.Safety.EnsureProbeNotTripped(inst) then
    return  -- Probe is stuck triggered
end

-- ============================================
-- SETTINGS MANAGEMENT (using ProbeLib)
-- ============================================
local settings = SystemLib.Storage.CreateSettings(inst, "InsideCenter", {
    AxisMode = 3,    -- 1=X, 2=Y, 3=Both
    AxisOrder = 0,   -- 0=X first, 1=Y first
    ActionMode = 1   -- 1=Set Datum, 2=Print Coords
})

-- Load saved settings
local lastAxisMode = settings:getInt("AxisMode", 3)
local lastAxisOrder = settings:getInt("AxisOrder", 0)
local lastActionMode = settings:getInt("ActionMode", 1)

-- ============================================
-- CREATE DIALOG (using UILib resizable dialog)
-- ============================================
local parent = UILib.Msg.GetParent()

-- Create resizable dialog with saved geometry
local dlg, panel, mainSizer = UILib.ResizableDialog.CreateWithPanel(
    parent, "Inside Center Probe Setup", "InsideCenterProbe", 340, 320
)

-- Instructions
local instructText = wx.wxStaticText(panel, wx.wxID_ANY,
    "Position the probe inside the rectangular pocket:\n" ..
    "• Roughly centered in the pocket\n" ..
    "• At the desired probing depth\n" ..
    "• Probe will move outward to find walls")
instructText:SetFont(UILib.Styles.Fonts.Default)
mainSizer:Add(instructText, 0, wx.wxALL, 10)

-- Axis Selection
local axisBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "Axis Selection")

local axisChoices = {"X Axis Only", "Y Axis Only", "Both Axes"}
local axisRadio = UILib.Controls.CreateRadioBox(panel, "Probe Axes", axisChoices, lastAxisMode - 1, 3)
axisBox:Add(axisRadio, 0, wx.wxEXPAND + wx.wxALL, 5)

-- Axis order selection (only enabled when Both Axes selected)
local axisOrderChoices = {"X First, Then Y", "Y First, Then X"}
local axisOrderRadio = UILib.Controls.CreateRadioBox(panel, "Probe Order", axisOrderChoices, lastAxisOrder, 2)
axisOrderRadio:Enable(lastAxisMode == 3)
axisBox:Add(axisOrderRadio, 0, wx.wxEXPAND + wx.wxALL, 5)

mainSizer:Add(axisBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- Options
local optionsBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "Options")
local actionChoices = {"Set Datum", "Print Coords"}
local actionRadio = UILib.Controls.CreateRadioBox(panel, "Action", actionChoices, lastActionMode - 1, 2)
optionsBox:Add(actionRadio, 0, wx.wxEXPAND + wx.wxALL, 5)
mainSizer:Add(optionsBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- Datum description text
local datumText = wx.wxStaticText(panel, wx.wxID_ANY, "")
datumText:SetFont(wx.wxFont(9, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))

-- Function to update datum description
local function UpdateDatumDescription()
    local action = actionRadio:GetSelection() + 1
    local axisSel = axisRadio:GetSelection() + 1
    
    local axisStr = ""
    if axisSel == 1 then
        axisStr = "X"
    elseif axisSel == 2 then
        axisStr = "Y"
    else
        axisStr = "X Y"
    end
    
    -- Use library function for base formatting
    local axes = {}
    if axisSel == 1 then
        axes.x = true
    elseif axisSel == 2 then
        axes.y = true
    else
        axes.x = true
        axes.y = true
    end
    local baseDescription = ProbeLib.UI.DatumSummary(action, axes)
    
    -- Build detailed description
    local description = ""
    if action == 1 then  -- Set Datum
        description = "Datum will be set to:\n• " .. axisStr .. " at pocket center\n• Z unchanged"
    else  -- Print Coords
        description = "Will print work coordinates of:\n• Pocket center (" .. axisStr .. ")"
    end
    datumText:SetLabel(description)
    panel:Layout()
end

-- Update events
axisRadio:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_RADIOBOX_SELECTED, function(event)
    local axisSel = axisRadio:GetSelection() + 1
    axisOrderRadio:Enable(axisSel == 3)
    UpdateDatumDescription()
end)

actionRadio:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_RADIOBOX_SELECTED, function(event)
    UpdateDatumDescription()
end)

-- Initial update
UpdateDatumDescription()

-- Add datum text
mainSizer:Add(datumText, 0, wx.wxALL + wx.wxALIGN_CENTER, 10)

-- Spacer
mainSizer:AddStretchSpacer()

-- Buttons
local buttonSizer, okBtn, cancelBtn = UILib.Controls.CreateButtonSizer(panel, "OK", "Cancel")
mainSizer:Add(buttonSizer, 0, wx.wxALL + wx.wxALIGN_CENTER, 8)

-- Apply layout
panel:SetSizer(mainSizer)
dlg:Fit()

-- ============================================
-- SHOW DIALOG AND PROCESS
-- ============================================
if dlg:ShowModal() == wx.wxID_OK then
    -- Get values
    local axisSel = axisRadio:GetSelection() + 1
    local axisOrder = axisOrderRadio:GetSelection()
    local actionSel = actionRadio:GetSelection() + 1
    
    -- Save settings
    settings:setInt("AxisMode", axisSel)
    settings:setInt("AxisOrder", axisOrder)
    settings:setInt("ActionMode", actionSel)
    
    dlg:Destroy()
    
    -- ============================================
    -- EXECUTE PROBE SEQUENCE
    -- ============================================
    local function ExecuteInsideCenterProbe()
        -- Check if probe is already triggered
        if ProbeLib.Core.IsProbeTriggered(inst) then
            UILib.Msg.Error("Probe is already triggered!\n\nPlease clear the probe and try again.", "Probe Error")
            return false
        end
        
        -- Store starting position
        local startState = {
            machX = mc.mcAxisGetMachinePos(inst, 0),
            machY = mc.mcAxisGetMachinePos(inst, 1),
            machZ = mc.mcAxisGetMachinePos(inst, 2),
            workX = mc.mcAxisGetPos(inst, mc.X_AXIS),
            workY = mc.mcAxisGetPos(inst, mc.Y_AXIS),
            workZ = mc.mcAxisGetPos(inst, mc.Z_AXIS)
        }
        
        -- Get probe parameters
        local xProbeOffset = mc.mcCntlGetPoundVar(inst, 301) or 0
        local yProbeOffset = mc.mcCntlGetPoundVar(inst, 302) or 0
        local fastFeed = mc.mcCntlGetPoundVar(inst, 303) or 30
        local slowFeed = mc.mcCntlGetPoundVar(inst, 304) or 5
        local originalMaxTravel = mc.mcCntlGetPoundVar(inst, 305) or 1.0
        
        -- Save original max travel
        local savedMaxTravel = originalMaxTravel
        
        -- Set max travel to 10" for pocket probing
        mc.mcCntlSetPoundVar(inst, 305, 10.0)
        
        -- Define probe directions
        local probeSequence = {}
        
        if axisSel == 1 or axisSel == 3 then  -- X or Both
            table.insert(probeSequence, {direction = 1, name = "+X", axis = "X"})  -- S1 = +X
            table.insert(probeSequence, {direction = 2, name = "-X", axis = "X"})  -- S2 = -X
        end
        
        if axisSel == 2 or axisSel == 3 then  -- Y or Both
            table.insert(probeSequence, {direction = 3, name = "+Y", axis = "Y"})  -- S3 = +Y
            table.insert(probeSequence, {direction = 4, name = "-Y", axis = "Y"})  -- S4 = -Y
        end
        
        -- Apply axis order if Both Axes selected
        if axisSel == 3 and axisOrder == 1 then  -- Y first
            -- Swap X and Y pairs
            local temp = {probeSequence[1], probeSequence[2]}
            probeSequence[1] = probeSequence[3]
            probeSequence[2] = probeSequence[4]
            probeSequence[3] = temp[1]
            probeSequence[4] = temp[2]
        end
        
        -- Store probe results
        local probeResults = {
            xPlus = nil,
            xMinus = nil,
            yPlus = nil,
            yMinus = nil
        }
        
        -- Execute probe sequence
        local success = true
        local errorMsg = nil
        
        for i, probe in ipairs(probeSequence) do
            -- Return to start position before each probe
            if i > 1 then
                mc.mcCntlSetLastError(inst, "Returning to center...")
                local moveCmd = string.format("G53 G0 X%.4f Y%.4f", startState.machX, startState.machY)
                mc.mcCntlGcodeExecuteWait(inst, moveCmd)
            end
            
            -- Check probe state before probing
            if ProbeLib.Core.IsProbeTriggered(inst) then
                errorMsg = string.format("Probe stuck before %s probe", probe.name)
                success = false
                break
            end
            
            -- Execute probe using ProbeLib
            mc.mcCntlSetLastError(inst, string.format("Probing %s...", probe.name))
            local probeSuccess, edgeWork, edgeMachine = ProbeLib.Movement.ExecuteProbe(inst, probe.direction, probe.name)
            
            if not probeSuccess then
                errorMsg = string.format("%s probe failed - no contact", probe.name)
                success = false
                break
            end
            
            -- Store result based on direction
            if probe.name == "+X" then
                probeResults.xPlus = edgeWork
            elseif probe.name == "-X" then
                probeResults.xMinus = edgeWork
            elseif probe.name == "+Y" then
                probeResults.yPlus = edgeWork
            elseif probe.name == "-Y" then
                probeResults.yMinus = edgeWork
            end
            
            -- Retract from surface
            mc.mcCntlSetLastError(inst, string.format("Retracting from %s...", probe.name))
            local retractCmd = string.format("G91 G1 %s-0.05 F%.1f", probe.axis, fastFeed)
            mc.mcCntlGcodeExecuteWait(inst, retractCmd)
            mc.mcCntlGcodeExecuteWait(inst, "G90")  -- Back to absolute
        end
        
        -- Restore original max travel
        mc.mcCntlSetPoundVar(inst, 305, savedMaxTravel)
        
        -- Process results if successful
        if success then
            -- Calculate centers
            local centerX = nil
            local centerY = nil
            
            if probeResults.xPlus and probeResults.xMinus then
                centerX = ProbeLib.Calculations.GetCenter(probeResults.xPlus, probeResults.xMinus)
                local width = ProbeLib.Calculations.GetWidth(probeResults.xPlus, probeResults.xMinus)
                mc.mcCntlSetLastError(inst, string.format("X Width: %.4f\"", width))
            end
            
            if probeResults.yPlus and probeResults.yMinus then
                centerY = ProbeLib.Calculations.GetCenter(probeResults.yPlus, probeResults.yMinus)
                local width = ProbeLib.Calculations.GetWidth(probeResults.yPlus, probeResults.yMinus)
                mc.mcCntlSetLastError(inst, string.format("Y Width: %.4f\"", width))
            end
            
            -- Move to center
            mc.mcCntlSetLastError(inst, "Moving to pocket center...")
            local moveToCenter = "G0"
            if centerX then moveToCenter = moveToCenter .. string.format(" X%.4f", centerX) end
            if centerY then moveToCenter = moveToCenter .. string.format(" Y%.4f", centerY) end
            mc.mcCntlGcodeExecuteWait(inst, moveToCenter)
            
            -- Execute action using library function
            local coords = {}
            if centerX then coords.x = mc.mcAxisGetMachinePos(inst, 0) end
            if centerY then coords.y = mc.mcAxisGetMachinePos(inst, 1) end
            ProbeLib.Core.ApplyOrPrint(inst, actionSel, coords, 0)
            
            -- Show result dialog
            if actionSel == 1 then
                local axes = {x = centerX ~= nil, y = centerY ~= nil}
                local msg = ProbeLib.UI.DatumSummary(actionSel, axes)
                UILib.Msg.Info(msg, "Datum Set")
            else
                local msg = "Pocket Center Coordinates:\n"
                if centerX then msg = msg .. string.format("X: %.4f\n", centerX) end
                if centerY then msg = msg .. string.format("Y: %.4f\n", centerY) end
                UILib.Msg.Info(msg, "Center Position")
            end
            
            -- Log the probe event
            ProbeLib.Logging.LogEvent(inst, "InsideCenter", 
                centerX or startState.workX, 
                centerY or startState.workY, 
                startState.workZ, 
                string.format("Axis:%d Action:%d", axisSel, actionSel))
        end
        
        -- Cleanup
        ProbeLib.Cleanup.Standard(inst, success, errorMsg)
        
        return success
    end
    
    -- Execute with error handling
    local ok, err = pcall(ExecuteInsideCenterProbe)
    if not ok then
        UILib.Msg.Error("Inside center probe failed:\n" .. tostring(err), "Probe Error")
    end
else
    dlg:Destroy()
end