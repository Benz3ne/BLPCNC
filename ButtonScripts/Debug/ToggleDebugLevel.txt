-- ToggleDebugLevel.txt
-- Cycles through debug levels and reports the current selection.
-- Levels:
--   0: Off              (#4990=0, #4992=0, #4991=0)
--   1: Debug            (#4990=1, #4992=0, #4991=0)
--   2: Trace            (#4990=1, #4992=1, #4991=0)
--   3: Trace+Guard      (#4990=1, #4992=1, #4991=1)

local inst = mc.mcGetInstance()

local function pvGet(n)
  local ok, v = pcall(mc.mcCntlGetPoundVar, inst, n)
  return ok and (tonumber(v) or 0) or 0
end

local function pvSet(n, v)
  pcall(mc.mcCntlSetPoundVar, inst, n, tonumber(v) or 0)
end

local function setDebug(on)
  if SystemLib and SystemLib.SetDebugMode then
    pcall(SystemLib.SetDebugMode, inst, on and true or false)
  else
    pvSet(4990, on and 1 or 0)
  end
end

local d = pvGet(4990)
local t = pvGet(4992)
local g = pvGet(4991)

local function levelOf(d,t,g)
  if d==0 and t==0 and g==0 then return 0 end
  if d==1 and t==0 and g==0 then return 1 end
  if d==1 and t==1 and g==0 then return 2 end
  if d==1 and t==1 and g==1 then return 3 end
  return -1
end

local cur = levelOf(d,t,g)
local nextLevel = ((cur >= 0) and (cur + 1) or 1) % 4

local labels = {
  [0] = "Off",
  [1] = "Debug",
  [2] = "Trace",
  [3] = "Trace+Guard",
}

-- Apply next level
if nextLevel == 0 then
  setDebug(false); pvSet(4992, 0); pvSet(4991, 0)
elseif nextLevel == 1 then
  setDebug(true);  pvSet(4992, 0); pvSet(4991, 0)
elseif nextLevel == 2 then
  setDebug(true);  pvSet(4992, 1); pvSet(4991, 0)
elseif nextLevel == 3 then
  setDebug(true);  pvSet(4992, 1); pvSet(4991, 1)
end

-- Report
local msg = string.format("Debug level %d (%s): #4990=%d #4992=%d #4991=%d",
  nextLevel, labels[nextLevel] or "?", pvGet(4990), pvGet(4992), pvGet(4991))
pcall(mc.mcCntlSetLastError, inst, msg)

