-- DustLib.lua v2.0
-- Single owner of dust collection outputs (OUTPUT3/4/5/6)
-- Manages dust collector, dust boot, and vacuum pumps with automatic and manual control

local DustLib = {}

-- Pound variables
local PV = {
    DustAuto     = 400,   -- 1=auto, 0=manual
    DustTarget   = 404,   -- 0/1 target state for OUTPUT4
    BootAuto     = 402,   -- 1=auto, 0=manual
    BootTarget   = 403,   -- 0/1 target state for OUTPUT3
    DustOverride = 405,   -- 1=manual override active
    BootOverride = 410,   -- 1=manual override active
    VacAutoM30   = 401,   -- 1=turn vacs OFF at M30
    VirtTool     = 406,   -- >=90 = virtual tool active
    M6Flag       = 499,   -- 1 during tool change
}

-- Internal state
local state = {
    init = false,
    handles = {},
    lastSpindle = 0,
    latchedDustAuto = -999999,
}

--[[ DustLib.init
Initialize library and capture current hardware state
Params:
  inst: Mach4 instance
Returns:
  success: true if initialized
--]]
function DustLib.init(inst)
    if state.init then return true end
    
    -- Get signal handles
    state.handles = {
        spindleOn = mc.mcSignalGetHandle(inst, mc.OSIG_SPINDLEON),
        boot      = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT3),
        dust      = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT4),
        vacRear   = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT5),
        vacFront  = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT6),
        machineEn = mc.mcSignalGetHandle(inst, mc.OSIG_MACHINE_ENABLED),
    }
    
    -- Initialize pound vars from current outputs
    if state.handles.dust and state.handles.dust > 0 then
        local dustState = mc.mcSignalGetState(state.handles.dust)
        mc.mcCntlSetPoundVar(inst, PV.DustTarget, dustState)
    end
    
    if state.handles.boot and state.handles.boot > 0 then
        local bootState = mc.mcSignalGetState(state.handles.boot)
        mc.mcCntlSetPoundVar(inst, PV.BootTarget, bootState)
    end
    
    -- Get initial spindle state
    if state.handles.spindleOn and state.handles.spindleOn > 0 then
        state.lastSpindle = mc.mcSignalGetState(state.handles.spindleOn)
    end
    
    state.init = true
    mc.mcCntlSetLastError(inst, "DustLib initialized")
    return true
end

--[[ DustLib.update
Main update function - reads state and controls outputs
Called every PLC cycle (~10ms)
Params:
  inst: Mach4 instance
Returns:
  none
--]]
function DustLib.update(inst)
    if not state.init then DustLib.init(inst) end
    
    -- Read current state
    local spindle = state.handles.spindleOn and mc.mcSignalGetState(state.handles.spindleOn) or 0
    local m6 = mc.mcCntlGetPoundVar(inst, PV.M6Flag) == 1
    local virt = mc.mcCntlGetPoundVar(inst, PV.VirtTool)
    local tool = mc.mcToolGetCurrent(inst)
    local enabled = state.handles.machineEn and mc.mcSignalGetState(state.handles.machineEn) or 0
    local machState = mc.mcCntlGetState(inst)
    local inCycle = mc.mcCntlIsInCycle(inst)
    
    -- Gate automation when machine disabled (skip writes)
    if enabled == 0 then
        state.lastSpindle = spindle  -- keep edge tracker sane
        return
    end
    
    -- Clear overrides on spindle rising edge
    if spindle == 1 and state.lastSpindle == 0 then
        mc.mcCntlSetPoundVar(inst, PV.DustOverride, 0)
        mc.mcCntlSetPoundVar(inst, PV.BootOverride, 0)
        mc.mcCntlSetLastError(inst, "Dust overrides cleared - spindle ON")
    end
    state.lastSpindle = spindle
    
    -- Update dust collector
    updateDustCollector(inst, spindle, m6, tool, inCycle)
    
    -- Update dust boot
    updateDustBoot(inst, spindle, m6, virt, enabled, machState)
end

--[[ updateDustCollector
Control dust collector based on policy
Params:
  inst: Mach4 instance
  spindle: Spindle state (0/1)
  m6: Tool change active
  tool: Current tool number
  inCycle: Program running
Returns:
  none
--]]
function updateDustCollector(inst, spindle, m6, tool, inCycle)
    local dustAuto = mc.mcCntlGetPoundVar(inst, PV.DustAuto) == 1
    local dustOverride = mc.mcCntlGetPoundVar(inst, PV.DustOverride) == 1
    local laserActive = (tool == 91)
    local dustTarget = mc.mcCntlGetPoundVar(inst, PV.DustTarget)
    
    if dustAuto and not dustOverride and not laserActive then
        if inCycle == 1 then
            -- In program: follow spindle
            dustTarget = spindle
        elseif m6 then
            -- During M6: preserve pre-M6 state
            if state.latchedDustAuto == -999999 then
                state.latchedDustAuto = dustTarget
            end
            dustTarget = state.latchedDustAuto
        else
            -- Not in program: always OFF
            dustTarget = 0
            state.latchedDustAuto = -999999
        end
        mc.mcCntlSetPoundVar(inst, PV.DustTarget, dustTarget)
    end
    
    -- Write to output
    if state.handles.dust and state.handles.dust > 0 then
        mc.mcSignalSetState(state.handles.dust, dustTarget)
    end
end

--[[ updateDustBoot
Control dust boot based on policy
Params:
  inst: Mach4 instance
  spindle: Spindle state
  m6: Tool change active
  virt: Virtual tool number
  enabled: Machine enabled
  machState: Machine state code
Returns:
  none
--]]
function updateDustBoot(inst, spindle, m6, virt, enabled, machState)
    local bootAuto = mc.mcCntlGetPoundVar(inst, PV.BootAuto) == 1
    local bootOverride = mc.mcCntlGetPoundVar(inst, PV.BootOverride) == 1
    local bootTarget = mc.mcCntlGetPoundVar(inst, PV.BootTarget)
    local virtualActive = virt >= 90
    
    -- Safety overrides: M6 and virtual tools ALWAYS raise boot
    if m6 or virtualActive then
        bootTarget = 0  -- UP for safety
        mc.mcCntlSetPoundVar(inst, PV.BootTarget, bootTarget)
    elseif bootAuto and not bootOverride then
        -- Emergency states
        local isEmergency = (machState == 109 or machState == 103 or 
                             machState == 101 or machState == 102)
        
        if not enabled or isEmergency then
            bootTarget = 0  -- UP
        else
            bootTarget = spindle  -- Follow spindle
        end
        mc.mcCntlSetPoundVar(inst, PV.BootTarget, bootTarget)
    end
    
    -- Write to output
    if state.handles.boot and state.handles.boot > 0 then
        mc.mcSignalSetState(state.handles.boot, bootTarget)
    end
end

--[[ DustLib.toggleDustAuto
Toggle dust collector auto/manual mode
Params:
  inst: Mach4 instance
  on: true for auto, false for manual
Returns:
  none
--]]
function DustLib.toggleDustAuto(inst, on)
    mc.mcCntlSetPoundVar(inst, PV.DustAuto, on and 1 or 0)
    if on then 
        mc.mcCntlSetPoundVar(inst, PV.DustOverride, 0)
    end
    mc.mcCntlSetLastError(inst, "Dust collector: " .. (on and "AUTO" or "MANUAL"))
end

--[[ DustLib.toggleBootAuto
Toggle dust boot auto/manual mode
Params:
  inst: Mach4 instance
  on: true for auto, false for manual
Returns:
  none
--]]
function DustLib.toggleBootAuto(inst, on)
    mc.mcCntlSetPoundVar(inst, PV.BootAuto, on and 1 or 0)
    if on then 
        mc.mcCntlSetPoundVar(inst, PV.BootOverride, 0)
    end
    mc.mcCntlSetLastError(inst, "Dust boot: " .. (on and "AUTO" or "MANUAL"))
end

--[[ DustLib.manualToggleDust
Manually toggle dust collector with override
Params:
  inst: Mach4 instance
Returns:
  none
--]]
function DustLib.manualToggleDust(inst)
    local current = mc.mcCntlGetPoundVar(inst, PV.DustTarget)
    local newState = (current == 1) and 0 or 1
    
    mc.mcCntlSetPoundVar(inst, PV.DustOverride, 1)
    mc.mcCntlSetPoundVar(inst, PV.DustTarget, newState)
    
    mc.mcCntlSetLastError(inst, "Manual dust: " .. (newState == 1 and "ON" or "OFF"))
end

--[[ DustLib.manualToggleBoot
Manually toggle dust boot with safety checks
Params:
  inst: Mach4 instance
Returns:
  success: false if blocked by M6 or virtual tool
  error: Error message if blocked
--]]
function DustLib.manualToggleBoot(inst)
    -- Safety checks
    if mc.mcCntlGetPoundVar(inst, PV.M6Flag) == 1 then
        mc.mcCntlSetLastError(inst, "Cannot control boot during tool change")
        return false, "Tool change active"
    end
    
    if mc.mcCntlGetPoundVar(inst, PV.VirtTool) >= 90 then
        mc.mcCntlSetLastError(inst, "Cannot control boot with virtual tool")
        return false, "Virtual tool active"
    end
    
    local current = mc.mcCntlGetPoundVar(inst, PV.BootTarget)
    local newState = (current == 1) and 0 or 1
    
    mc.mcCntlSetPoundVar(inst, PV.BootOverride, 1)
    mc.mcCntlSetPoundVar(inst, PV.BootTarget, newState)
    
    mc.mcCntlSetLastError(inst, "Manual boot: " .. (newState == 1 and "DOWN" or "UP"))
    return true
end

--[[ DustLib.toggleVacuum
Toggle vacuum pump manually
Params:
  inst: Mach4 instance
  pump: "rear" or "front"
Returns:
  none
--]]
function DustLib.toggleVacuum(inst, pump)
    local handle
    if pump == "rear" then
        handle = state.handles.vacRear
    elseif pump == "front" then
        handle = state.handles.vacFront
    else
        mc.mcCntlSetLastError(inst, "Invalid vacuum pump: " .. tostring(pump))
        return
    end
    
    if handle and handle > 0 then
        local current = mc.mcSignalGetState(handle)
        local newState = (current == 1) and 0 or 1
        mc.mcSignalSetState(handle, newState)
        
        mc.mcCntlSetLastError(inst, pump:upper() .. " vacuum: " .. (newState == 1 and "ON" or "OFF"))
        return true
    end
    return false
end

--[[ DustLib.endOfProgram
M30 handler - turn off dust/boot/vacs based on settings
Params:
  inst: Mach4 instance
Returns:
  none
--]]
function DustLib.endOfProgram(inst)
    -- Turn off dust if in auto
    if mc.mcCntlGetPoundVar(inst, PV.DustAuto) == 1 then
        mc.mcCntlSetPoundVar(inst, PV.DustTarget, 0)
    end
    
    -- Raise boot if in auto
    if mc.mcCntlGetPoundVar(inst, PV.BootAuto) == 1 then
        mc.mcCntlSetPoundVar(inst, PV.BootTarget, 0)
    end
    
    -- Turn off vacuums if configured
    if mc.mcCntlGetPoundVar(inst, PV.VacAutoM30) == 1 then
        if state.handles.vacRear and state.handles.vacRear > 0 then
            mc.mcSignalSetState(state.handles.vacRear, 0)
        end
        if state.handles.vacFront and state.handles.vacFront > 0 then
            mc.mcSignalSetState(state.handles.vacFront, 0)
        end
    end
    
    mc.mcCntlSetLastError(inst, "M30: Dust system reset")
end

--[[ DustLib.getState
Get current dust system state for UI/diagnostics
Params:
  inst: Mach4 instance
Returns:
  table: State information
--]]
function DustLib.getState(inst)
    return {
        dustAuto = mc.mcCntlGetPoundVar(inst, PV.DustAuto) == 1,
        dustTarget = mc.mcCntlGetPoundVar(inst, PV.DustTarget) == 1,
        dustOverride = mc.mcCntlGetPoundVar(inst, PV.DustOverride) == 1,
        bootAuto = mc.mcCntlGetPoundVar(inst, PV.BootAuto) == 1,
        bootTarget = mc.mcCntlGetPoundVar(inst, PV.BootTarget) == 1,
        bootOverride = mc.mcCntlGetPoundVar(inst, PV.BootOverride) == 1,
        m6Running = mc.mcCntlGetPoundVar(inst, PV.M6Flag) == 1,
        virtualTool = mc.mcCntlGetPoundVar(inst, PV.VirtTool),
    }
end

return DustLib