Mach4 Core API — Consolidated Help (from HTB)

(Converted from Mach4CoreAPI.htb; 904 HTML files merged)

================================================================================


================================================================================
[1/904] Contents
Source: Contents.htm
================================================================================

Contents
Mach4 Core API
Build 3797
Authors: Brian Barker, Steve Murphree
©Copyright: Newfangled Solutions™ 2013-2018
Rev:2.01
2018-05-14
Contents
Getting Started
API Error Return Codes
API Reference by Category
Alphabetical API Refernce
Plugin Development



================================================================================
[2/904] Alphabetical API Refernce
Source: AlphabeticalApiRefernce.htm
================================================================================

Alphabetical API Refernce
Alphabetical API Refernce
mcAxisDeref
mcAxisDerefAll
mcAxisE2nable
mcAxisGetHomeDir
mcAxisGetHomeInPlace
mcAxisGetHomeOffset
mcAxisGetHomeOrder
mcAxisGetHomeSpeed
mcAxisGetInfoStruct
mcAxisGetMachinePos
mcAxisGetMotorId
mcAxisGetOverrideAxis
mcAxisGetPos
mcAxisGetProbePos
mcAxisGetProbePosAll
mcAxisGetScale
mcAxisGetSoftlimitEnable
mcAxisGetSoftlimitMax
mcAxisGetSoftlimitMin
mcAxisGetSpindle
mcAxisGetVel
mcAxisHome
mcAxisHomeAll
mcAxisHomeComplete
mcAxisHomeCompleteWithStatus
mcAxisIsEnabled
mcAxisIsHomed
mcAxisIsHoming
mcAxisIsStill
mcAxisMapMotor
mcAxisRegister
mcAxisRemoveOverrideAxis
mcAxisRemoveOverrideAxisSync
mcAxisSetHomeDir
mcAxisSetHomeInPlace
mcAxisSetHomeOffset
mcAxisSetHomeOrder
mcAxisSetHomeSpeed
mcAxisSetInfoStruct
mcAxisSetMachinePos
mcAxisSetOverrideAxis
mcAxisSetPos
mcAxisSetSoftlimitEnable
mcAxisSetSoftlimitMax
mcAxisSetSoftlimitMin
mcAxisSetSpindle
mcAxisSetVel
mcAxisUnmapMotor
mcAxisUnmapMotors
mcAxisUnregister
mcCntlCheckLicenseFeature
mcCntlCleanup
mcCntlCloseGCodeFile
mcCntlCompileScripts
mcCntlConfigStart
mcCntlConfigStop
mcCntlCreateLocalVars
mcCntlCycleStart
mcCntlCycleStop
mcCntlDryRunToLine
mcCntlEStop
mcCntlEnable
mcCntlFeedHold
mcCntlFeedHoldState
mcCntlGcodeExecute
mcCntlGcodeExecuteWait
mcCntlGcodeInterpGetData
mcCntlGcodeInterpGetPos
mcCntlGetBlockDelete
mcCntlGetBuild
mcCntlGetComputerID
mcCntlGetCoolantDelay
mcCntlGetCwd
mcCntlGetDiaMode
mcCntlGetDistToGo
mcCntlGetEnableFRO
mcCntlGetFRO
mcCntlGetGcodeFileName
mcCntlGetGcodeLine
mcCntlGetGcodeLineCount
mcCntlGetGcodeLineNbr
mcCntlGetInstanceHandle
mcCntlGetLastError
mcCntlGetLastLogMsg
mcCntlGetLicenseData
mcCntlGetLicenseDataLen
mcCntlGetLicenseModules
mcCntlGetLocalComment
mcCntlGetLocalVar
mcCntlGetLogging
mcCntlGetMachDir
mcCntlGetMistDelay
mcCntlGetModalGroup
mcCntlGetMode
mcCntlGetOffset
mcCntlGetOptionalStop
mcCntlGetPoundVar
mcCntlGetRRO
mcCntlGetRunTime
mcCntlGetSingleBlock
mcCntlGetState
mcCntlGetStateName
mcCntlGetStats
mcCntlGetToolOffset
mcCntlGetUnitsCurrent
mcCntlGetUnitsDefault
mcCntlGetValue
mcCntlGetVersion
mcCntlGotoZero
mcCntlInit
mcCntlIsInCycle
mcCntlIsStill
mcCntlLoadGcodeFile
mcCntlLoadGcodeString
mcCntlLog
mcCntlMachineStateClear
mcCntlMachineStatePop
mcCntlMachineStatePush
mcCntlMacroAlarm
mcCntlMacroStop
mcCntlMdiExecute
mcCntlProbeFileClose
mcCntlProbeFileOpen
mcCntlProbeGetStrikeStatus
mcCntlReset
mcCntlRewindFile
mcCntlSetBlockDelete
mcCntlSetCoolantDelay
mcCntlSetDiaMode
mcCntlSetEnableFRO
mcCntlSetFRO
mcCntlSetGcodeLineNbr
mcCntlSetLastError
mcCntlSetLogging
mcCntlSetMistDelay
mcCntlSetMode
mcCntlSetOptionalStop
mcCntlSetPoundVar
mcCntlSetRRO
mcCntlSetResetCodes
mcCntlSetSingleBlock
mcCntlSetStats
mcCntlSetValue
mcCntlStartMotionDev
mcCntlStopMotionDev
mcCntlToolChangeManual
mcCntlWaitOnCycleStart
mcDeviceGetHandle
mcDeviceGetInfo
mcDeviceGetInfoStruct
mcDeviceGetNextHandle
mcDeviceRegister
mcFileHoldAquire
mcFileHoldReason
mcFileHoldRelease
mcFixtureLoadFile
mcFixtureSaveFile
mcGuiGetWindowHandle
mcGuiSetCallback
mcGuiSetFocus
mcGuiSetWindowHandle
mcIoGetHandle
mcIoGetInfoStruct
mcIoGetNextHandle
mcIoGetState
mcIoGetType
mcIoGetUserData
mcIoIsEnabled
mcIoRegister
mcIoSetDesc
mcIoSetName
mcIoSetState
mcIoSetType
mcIoSetUserData
mcIoSyncSignal
mcIoUnregister
mcJogAbsStart
mcJogAbsStop
mcJogGetAccel
mcJogGetFeedRate
mcJogGetFollowMode
mcJogGetInc
mcJogGetRate
mcJogGetTraceEnable
mcJogGetType
mcJoggetUnitsMode
mcJogGetVelocity
mcJogIncStart
mcJogIncStop
mcJogIsJogging
mcJogIsStopping
mcJogSetAccel
mcJogSetFeedRate
mcJogSetFollowMode
mcJogSetInc
mcJogSetRate
mcJogSetTraceEnable
mcJogSetType
mcJogSetUnitsMode
mcJogVelocityStart
mcJogVelocityStop
mcMotionClearPlanner
mcMotionCyclePlanner
mcMotionCyclePlannerEx
mcMotionGetAbsPos
mcMotionGetAbsPosFract
mcMotionGetBacklashAbs
mcMotionGetBacklashInc
mcMotionGetIncPos
mcMotionGetMoveID
mcMotionGetPos
mcMotionGetProbeParams
mcMotionGetRigidTapParams
mcMotionGetSyncOutput
mcMotionGetThreadParams
mcMotionGetThreadingRate
mcMotionGetVel
mcMotionSetCycleTime
mcMotionSetMoveID
mcMotionSetPos
mcMotionSetProbeComplete
mcMotionSetProbePos
mcMotionSetStill
mcMotionSetThreadingRate
mcMotionSetVel
mcMotionSync
mcMotionThreadComplete
mcMotorGetAxis
mcMotorGetCountsPerUnit
mcMotorGetInfoStruct
mcMotorGetPos
mcMotorGetVel
mcMotorIsHomed
mcMotorIsStill
mcMotorMapGetDefinition
mcMotorMapGetLength
mcMotorMapGetNPoints
mcMotorMapGetPoint
mcMotorMapGetPointCount
mcMotorMapGetStart
mcMotorMapSetDefinition
mcMotorMapSetLength
mcMotorMapSetNPoints
mcMotorMapSetPoint
mcMotorMapSetPointCount
mcMotorMapSetStart
mcMotorRegister
mcMotorSetCountsPerUnit
mcMotorSetHomePos
mcMotorSetInfoStruct
mcMotorUnregister
mcMpgGetAccel
mcMpgGetAxis
mcMpgGetCountsPerDetent
mcMpgGetEnable
mcMpgGetEncoderReg
mcMpgGetInc
mcMpgGetReversed
mcMpgGetRate
mcMpgGetShuttleMode
mcMpgGetShuttlePercent
mcMpgMoveCounts
mcMpgSetAccel
mcMpgSetAxis
mcMpgSetCountsPerDetent
mcMpgSetEnable
mcMpgSetEncoderReg
mcMpgSetInc
mcMpgSetReversed
mcMpgSetRate
mcMpgSetShuttleMode
mcMpgSetShuttlePercent
mcPluginConfigure
mcPluginCoreLoad
mcPluginCoreUnload
mcPluginDiagnostic
mcPluginEnable
mcPluginGetEnabled
mcPluginGetInfoStruct
mcPluginGetLicenseFeature
mcPluginGetNextHandle
mcPluginGetValid
mcPluginInstall
mcPluginRegister
mcPluginRemove
mcProfileDeleteKey
mcProfileDeleteSection
mcProfileExists
mcProfileFlush
mcProfileGetDouble
mcProfileGetInt
mcProfileGetName
mcProfileGetString
mcProfileReload
mcProfileSave
mcProfileWriteDouble
mcProfileWriteInt
mcProfileWriteString
mcRegGetCommand
mcRegGetHandle
mcRegGetInfo
mcRegGetInfoStruct
mcRegGetNextHandle
mcRegGetUserData
mcRegGetValue
mcRegGetValueLong
mcRegGetValueString
mcRegGetValueStringClear
mcRegRegister
mcRegSendCommand
mcRegSetDesc
mcRegSetName
mcRegSetResponse
mcRegSetType
mcRegSetUserData
mcRegSetValue
mcRegSetValueLong
mcRegSetValueString
mcRegUnregister
mcScriptDebug
mcScriptEngineRegister
mcScriptExecute
mcScriptExecuteIfExists
mcScriptExecutePrivate
mcScriptGetExtensions
mcSignalEnable
mcSignalGetHandle
mcSignalGetInfo
mcSignalGetInfoStruct
mcSignalGetNextHandle
mcSignalGetState
mcSignalHandleWait
mcSignalMap
mcSignalSetActiveLow
mcSignalSetState
mcSignalUnmap
mcSignalWait
mcSoftLimitGetState
mcSoftLimitMaxMinsClear
mcSoftLimitSetState
mcSpindleCalcCSSToRPM
mcSpindleGetAccelTime
mcSpindleGetCommandRPM
mcSpindleGetCurrentRange
mcSpindleGetDecelTime
mcSpindleGetDirection
mcSpindleGetFeedbackRatio
mcSpindleGetMaxRPM
mcSpindleGetMinRPM
mcSpindleGetMotorAccel
mcSpindleGetMotorMaxRPM
mcSpindleGetMotorRPM
mcSpindleGetOverride
mcSpindleGetOverrideEnable
mcSpindleGetReverse
mcSpindleGetSensorRPM
mcSpindleGetSpeedCheckEnable
mcSpindleGetSpeedCheckPercent
mcSpindleGetTrueRPM
mcSpindleSetAccelTime
mcSpindleSetCommandRPM
mcSpindleSetDecelTime
mcSpindleSetDirection
mcSpindleSetDirectionWait
mcSpindleSetFeedbackRatio
mcSpindleSetMaxRPM
mcSpindleSetMinRPM
mcSpindleSetMotorAccel
mcSpindleSetMotorMaxRPM
mcSpindleSetOverride
mcSpindleSetOverrideEnable
mcSpindleSetRange
mcSpindleSetReverse
mcSpindleSetSensorRPM
mcSpindleSetSpeedCheckEnable
mcSpindleSetSpeedCheckPercent
mcSpindleSpeedCheck
mcToolGetCurrent
mcToolGetData
mcToolGetDataExDbl
mcToolGetDataExInt
mcToolGetDataExStr
mcToolGetDesc
mcToolGetSelected
mcToolLoadFile
mcToolPathCreate
mcToolPathDelete
mcToolPathGenerate
mcToolPathGenerateAbort
mcToolPathGeneratedPercent
mcToolPathGetAAxisPosition
mcToolPathGetARotationAxis
mcToolPathGetAxisColor
mcToolPathGetBackColor
mcToolPathGetDrawLimits
mcToolPathGetExecution
mcToolPathGetFollowMode
mcToolPathGetGenerating
mcToolPathGetLeftMouseDn
mcToolPathGetLeftMouseUp
mcToolPathGetPathColor
mcToolPathIsSignalMouseClicks
mcToolPathSetAAxisPosition
mcToolPathSetARotationAxis
mcToolPathSetAxisColor
mcToolPathSetBackColor
mcToolPathSetDrawLimits
mcToolPathSetFollowMode
mcToolPathSetPathColor
mcToolPathSetSignalMouseClicks
mcToolPathSetView
mcToolPathSetZoom
mcToolPathUpdate
mcToolSaveFile
mcToolSetCurrent
mcToolSetData
mcToolSetDataExDbl
mcToolSetDataExInt
mcToolSetDataExStr
mcToolSetDesc



================================================================================
[3/904] Mach Analog Objects
Source: AnalogObjects.htm
================================================================================

Mach Analog Objects
Mach Analog Objects
Mach analog objects form a layer that is superimposed over mapped registers.  It is desinged to allow for defining the register in terms of voltages instead of a raw numeric value
mcAnalogInputGetInfoStruct
mcAnalogInputRead
mcAnalogMap
mcAnalogOutputGetInfoStruct
mcAnalogOutputRead
mcAnalogOutputWrite
mcAnalogUnMap



================================================================================
[4/904] API Reference by Category
Source: ApiReferencebyCategory.htm
================================================================================

API Reference by Category
API Reference by Category
The API documentation has been devided up into categories to help quickly locate API information for a given programming task.
Plugins and Devices
: API functions that are primarily used to create plugins with devices.
Mach I/O
: API functions that are primarily used to interface with I/O and to create I/O plugins.
Mach Signals
: API functions that work with Mach Signals.
Mach Registers
: API functions that work with Mach Registers.
Motors
: API functions that work with Motors.
Screw Mapping
: API functions that work with Motor screw maps.
Axes
: API functions that work with Axes.
Motion
: API functions that are primarily used to create motion plugins.
Operation
: API functions that are used to operate the machine (Cycle start, Feed Hold, etc...).
GUI
: API functions that are specific to GUI programming.
Profile (INI) Settings
: API functions for profile INI manipulation.
General
: General API functions.
Gcode File
: API functions to manipulate Gcode files.
Tool Offsets
: API functions dealing with tool offsets and tool selection.
Jogging
: Jogging API functions.
MPGs
: API functions for working with MPGs.
Soft Limits
: API functions for working with Soft Limits.
Spindle
: Spindle API functions.
Scripting
: API functions used for manipulating scripts.
Status Messages
: API functions for reporting error and status messages.
License
: API functions for working with license files.



================================================================================
[5/904] Axes
Source: Axes.htm
================================================================================

Axes
Axes
mcAxisDeref
mcAxisDerefAll
mcAxisEnable
mcAxisGetHomeDir
mcAxisGetHomeInPlace
mcAxisGetHomeOffset
mcAxisGetHomeOrder
mcAxisGetHomeSpeed
mcAxisGetInfoStruct
mcAxisGetMachinePos
mcAxisGetMotorId
mcAxisGetOverrideAxis
mcAxisGetPos
mcAxisGetProbePos
mcAxisGetProbePosAll
mcAxisGetScale
mcAxisGetSoftlimitEnable
mcAxisGetSoftlimitMax
mcAxisGetSoftlimitMin
mcAxisGetSpindle
mcAxisGetVel
mcAxisHome
mcAxisHomeAll
mcAxisHomeComplete
mcAxisHomeCompleteWithStatus
mcAxisIsEnabled
mcAxisIsHomed
mcAxisIsStill
mcAxisMapMotor
mcAxisRegister
mcAxisRemoveOverrideAxis
mcAxisRemoveOverrideAxisSync
mcAxisSetHomeDir
mcAxisSetHomeInPlace
mcAxisSetHomeOffset
mcAxisSetHomeOrder
mcAxisSetHomeSpeed
mcAxisSetInfoStruct
mcAxisSetMachinePos
mcAxisSetOverrideAxis
mcAxisSetPos
mcAxisSetSoftlimitEnable
mcAxisSetSoftlimitMax
mcAxisSetSoftlimitMin
mcAxisSetSpindle
mcAxisSetVel
mcAxisUnmapMotor
mcAxisUnmapMotors
mcAxisUnregister



================================================================================
[6/904] mcSoftLimitMaxMinsClear
Source: CATSmcSoftLimitMaxMinsClear.htm
================================================================================

mcSoftLimitMaxMinsClear
mcSoftLimitMaxMinsClear
C/C++ Syntax:
int mcSoftLimitSetState(
		MINSTANCE mInst, 
		int axis, 
		int on);
LUA Syntax:
rc = mc.mcSoftLimitSetState(
		number mInst, 
		number axis, 
		number on)
Description:
Set softlimits to be on or off for an axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis to set the softlimit to be on or off.
on
Set the softlimit to be on or off ( MC_ON, MC_OFF ).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Can be used at any time. If you enable the softlimits when  you are out of bounds any jog will move it back to the softlimit.
Usage:
int mInst=0;
int axis = Z_AXIS;
int TurnOn = MC_ON;
// MC_OFF to turn off.
mcSoftLimitSetState(mInst, axis, TurnOn);
// Set the softlimit forthe Z axis to be ON.



================================================================================
[7/904] mcAnalogInputGetInfoStruct
Source: CATmcAnalogInputGetInfoStruct.htm
================================================================================

mcAnalogInputGetInfoStruct
mcAnalogInputGetInfoStruct
C/C++ Syntax:
int mcAnalogInputGetInfoStruct(
                MINSTANCE mInst, 
                int analogInputNum, 
                analoginfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAnalogInputGetInfoStruct(
                    number mInst, 
                    number analogInputNum)
Description:
Get the analog information for the specified analog input number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogInputNum
The analog input number.
ainf
A pointer to an analoginfo_t structure for which to receive the analog input information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
ainf
parameter cannot be NULL.
MERROR_REG_NOT_FOUND
There is no analog input configuration for the specified input number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog input information for analog input #1.
analoginfo_t ainf;
int rc = mcAxisDeref(mInst, 1, &ainf);



================================================================================
[8/904] mcAnalogInputRead
Source: CATmcAnalogInputRead.htm
================================================================================

mcAnalogInputRead
mcAnalogInputRead
C/C++ Syntax:
int mcAnalogInputRead(
                MINSTANCE mInst, 
                int analogInputNum, 
                double *value);
LUA Syntax:
value, rc = mc.mcAnalogInputRead(
                    number mInst, 
                    number analogInputNum)
Description:
Get the analog value for the specified analog input number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogInputNum
The analog input number.
value
A pointer to a double for which to receive the analog input value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL.
MERROR_REG_NOT_FOUND
There is no analog input configuration for the specified input number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog input value for analog input #1.
double value = 0;
int rc = mcAnalogInputRead(mInst, 1, &value);



================================================================================
[9/904] mcAnalogMap
Source: CATmcAnalogMap.htm
================================================================================

mcAnalogMap
mcAnalogMap
C/C++ Syntax:
int mcAnalogMap(
                MINSTANCE mInst, 
                int type, 
                int analogNum,
		const char *regPath,
		double numerator, 
		double denominator, 
		double offset);
LUA Syntax:
value, rc = mc.mcAnalogMap(
                        number mInst,
                        number type, 
                        number analogNum,
                        string regPath,
                        number numerator,
                        number denominator,
                        number offset)
Description:
Create a mapping relationship between a plugin provided ADC or DAC register and an analog object.
Parameters:
Parameter
Description
mInst
The controller instance.
type
The analog type. (MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT)
analogNum
The analog number.
regPath
The ADC or DAC register path.
numerator
The total voltage swing.  e.g. 0v to 10v is 10
denominator
Usually the max value of the register.  e.g. 1024 for a 10 bit DAC/ADC
offset
Used for bidirectional DAC/ADC devices
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
type
parameter isn't MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT, or the
analogNum
analog object number is out of range.
MERROR_REG_NOT_FOUND
The specified register path is invalid.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Map an analog object to a plugin provided ADC/DAC register.
double value = 0;
int rc =
MERROR_NOERROR
No Error.
;
// -10 to +10 14 bit ADC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_INPUT, 1, "MyDevADC1", 20, 16384, 8192);
// 0 to +10 12 bit ADC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_INPUT, 2, "MyDevADC2", 10, 4096, 0);
// -10 to +10 16 bit DAC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_OUTPUT, 1, "MyDevDAC1", 20, 16384, 8192);



================================================================================
[10/904] mcAnalogOutputGetInfoStruct
Source: CATmcAnalogOutputGetInfoStruct.htm
================================================================================

mcAnalogOutputGetInfoStruct
mcAnalogOutputGetInfoStruct
C/C++ Syntax:
int mcAnalogOutputGetInfoStruct(
                MINSTANCE mInst, 
                int analogOutputNum, 
                analoginfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAnalogOutputGetInfoStruct(
                    number mInst, 
                    number analogOutputNum)
Description:
Get the analog information for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogOutputNum
The analog output number.
ainf
A pointer to an analoginfo_t structure for which to receive the analog output information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
ainf
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog output information for analog output #1.
analoginfo_t ainf;
int rc = mcAnalogOutputGetInfoStruct(mInst, 1, &ainf);



================================================================================
[11/904] mcAnalogOutputRead
Source: CATmcAnalogOutputRead.htm
================================================================================

mcAnalogOutputRead
mcAnalogOutputRead
C/C++ Syntax:
int mcAnalogOutputRead(
                MINSTANCE mInst, 
                int analogInputNum, 
                double *value);
LUA Syntax:
value, rc = mc.mcAnalogOutputRead(
                    number mInst, 
                    number analogInputNum)
Description:
Get the analog value for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogInputNum
The analog output number.
value
A pointer to a double for which to receive the analog output value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog output value for analog output #1.
double value = 0;
int rc = mcAnalogOutputRead(mInst, 1, &value);



================================================================================
[12/904] mcAnalogOutputWrite
Source: CATmcAnalogOutputWrite.htm
================================================================================

mcAnalogOutputWrite
mcAnalogOutputWrite
C/C++ Syntax:
int mcAnalogOutputWrite(
                MINSTANCE mInst, 
                int analogOutputNum, 
                double value);
LUA Syntax:
rc = mc.mcAnalogOutputWrite(
                    number mInst, 
                    number analogOutputNum,
                    number value)
Description:
Write the analog value for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogOutputNum
The analog output number.
value
The value to be writen to the analog output.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Write the analog output value for analog output #1.
int rc = mcAnalogOutputWrite(mInst, 1, 9.5);



================================================================================
[13/904] mcAnalogUnMap
Source: CATmcAnalogUnMap.htm
================================================================================

mcAnalogUnMap
mcAnalogUnMap
C/C++ Syntax:
int mcAnalogUnMap(
                MINSTANCE mInst, 
                int type, 
                int analogNum);
LUA Syntax:
rc = mc.mcAnalogMap(
                    number mInst,
                    number type, 
                    number analogNum)
Description:
Destroy the mapping relationship between a plugin provided ADC or DAC register and an analog object.
Parameters:
Parameter
Description
mInst
The controller instance.
type
The analog type. (MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT)
analogNum
The analog number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
type
parameter isn't MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT, or the
analogNum
analog object number is out of range.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Unmap analog object 1 from the plugin provided ADC/DAC register.
double value = 0;
int rc =
MERROR_NOERROR
No Error.
;
rc = mcAnalogUnMap(mInst, MC_ANALOG_TYPE_INPUT, 1);



================================================================================
[14/904] mcAxisDeref
Source: CATmcAxisDeref.htm
================================================================================

mcAxisDeref
mcAxisDeref
C/C++ Syntax:
int mcAxisDeref(
                MINSTANCE mInst, 
                int axisId);
LUA Syntax:
rc = mc.mcAxisDeref(
                    number mInst, 
                    number axisId)
Description:
Dereference the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID to be dereferenced.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_AXIS_NOT_ENABLED
The axis specified by
axis
is not enabled.
Notes:
The axis will be dereferenced allong with all child motors.
Usage:
int mInst = 0;
// Set AXIS0 to deref (could have used X_AXIS).
mcAxisDeref(mInst, AXIS0);



================================================================================
[15/904] mcAxisDerefAll
Source: CATmcAxisDerefAll.htm
================================================================================

mcAxisDerefAll
mcAxisDerefAll
C/C++ Syntax:
int mcAxisDerefAll(
                   MINSTANCE mInst);
LUA Syntax:
rc = mc.mcAxisDerefAll(
                       number mInst)
Description:
Dereference all axes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
All
ENABLED
axes will be dereferenced.
Usage:
int mInst = 0;
// Set all axis to deref.
mcAxisDerefAll(mInst);



================================================================================
[16/904] mcAxisEnable
Source: CATmcAxisEnable.htm
================================================================================

mcAxisEnable
mcAxisEnable
C/C++ Syntax:
int mcAxisEnable(
                 MINSTANCE mInst, 
                 int axisId, 
                 BOOL enabled);
LUA Syntax:
rc = mc.mcAxisEnable(
                     number mInst, 
                     number axisId, 
                     number enabled);
Description:
Enable or disable the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enabled
Send true to enable or false to disable axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Used to enable or disable axis. Disabling an axis will make motion for the axis impossible.
Usage:
int mInst = 0;
// Set Y_AXIS to be disabled.
mcAxisEnable(mInst, Y_AXIS, false);



================================================================================
[17/904] mcAxisGetHomeDir
Source: CATmcAxisGetHomeDir.htm
================================================================================

mcAxisGetHomeDir
mcAxisGetHomeDir
C/C++ Syntax:
int mcAxisGetHomeDir(
                     MINSTANCE mInst, 
                     int axisId, 
                     int *dir);
LUA Syntax:
dir, rc = mc.mcAxisGetHomeDir(
                              number mInst, 
                              number axisId)
Description:
Get the hominig direction for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
dir
Receives the homing direction.  A positive value is home POS.  A negative value is home NEG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home direction only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored direction information and use it.
Usage:
int mInst=0;
int dir = 0;
// Get Home offset of the X axis.
mcAxisGetHomeDir(mInst, X_AXIS, &dir);



================================================================================
[18/904] mcAxisGetHomeInPlace
Source: CATmcAxisGetHomeInPlace.htm
================================================================================

mcAxisGetHomeInPlace
mcAxisGetHomeInPlace
C/C++ Syntax:
int mcAxisGetHomeInPlace(
                         MINSTANCE mInst, 
                         int axisId,
                         BOOL *homeInPlace);
LUA Syntax:
homeInPlace, rc = mc.mcAxisGetHomeInPlace(
                                          number mInst,
                                          number axisId)
Description:
Determine if the Home In Place flage is set.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
homeInPlace
Receives the home in place flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home in place flag only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored flag and implement a means to home the axis and set machine coordinate 0 at its current location.
Usage:
// Get the Home In Place flag for the X axis.
MINSTANCE mInst = 0;
BOOL hip = FALSE;
mcAxisGetHomeInPlace(mInst, X_AXIS, &hip);



================================================================================
[19/904] mcAxisGetHomeOffset
Source: CATmcAxisGetHomeOffset.htm
================================================================================

mcAxisGetHomeOffset
mcAxisGetHomeOffset
C/C++ Syntax:
int mcAxisGetHomeOffset(
                        MINSTANCE mInst, 
                        int axisId, 
                        double *offset);
LUA Syntax:
offset, rc = mc.mcAxisGetHomeOffset(
                                    number mInst, 
                                    number axisId)
Description:
Get the home offset for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
offset
Receives the home offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home offset only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored offset and use it.
Usage:
int mInst=0;
int offset = 0;
// Get Home offset of the X axis.
mcAxisGetHomeOrder(mInst, X_AXIS, &offset);



================================================================================
[20/904] mcAxisGetHomeOrder
Source: CATmcAxisGetHomeOrder.htm
================================================================================

mcAxisGetHomeOrder
mcAxisGetHomeOrder
C/C++ Syntax:
int mcAxisGetHomeOrder(
                       MINSTANCE mInst, 
                       int axisId, 
                       int *order);
LUA Syntax:
order, rc = mc.mcAxisGetHomeOrder(
                                  number mInst, 
                                  number axisId)
Description:
Get the home order for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
order
Receives the axis home order number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the home order of the axis so all axis can be homed in the order the user would like.
All axes should be read and then homed in the order requested.
Usage:
int mInst=0;
double XAxisPos = 0;
int order = 0;
// Get Home order of the X axis.
mcAxisGetHomeOrder(mInst, X_AXIS, ℴ);



================================================================================
[21/904] mcAxisGetHomeSpeed
Source: CATmcAxisGetHomeSpeed.htm
================================================================================

mcAxisGetHomeSpeed
mcAxisGetHomeSpeed
C/C++ Syntax:
int mcAxisGetHomeSpeed(
                       MINSTANCE mInst,
                       int axisId,
                       double *percent);
LUA Syntax:
percent, rc = mc.mcAxisGetHomeSpeed(
                                    number mInst,
                                    number axisId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
percent
Receives the percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home speed percentage only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored speed percentage and use it.
Usage:
int mInst=0;
int rc = 0;
double XAxisPos = 0;
double percent = 0;
double maxVel = 0
double homeVel = 0;
// Get home speed percentage of the X axis.
mcAxisGetHomeSpeed(mInst, X_AXIS, &percent);
mcAxisGetVel(mInst, X_AXIS, &maxVel);
homeVel = maxVel * percent;



================================================================================
[22/904] mcAxisGetInfoStruct
Source: CATmcAxisGetInfoStruct.htm
================================================================================

mcAxisGetInfoStruct
mcAxisGetInfoStruct
C/C++ Syntax:
int mcAxisGetInfoStruct(
		MINSTANCE mInst, 
		int axisId, 
		axisinfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAxisGetInfoStruct(number mInst, 
		number axisId)
Description:
Retrieve axis parameters in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis number to be dereffed.
ainf
The address of a axisinfo struct that receives the info for the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
mcAxisGetInfoStruct() is used for quickly retrieving all of the axis parameters.  The information is placed in the axisinfo structure.  This information can then be modified to update the axis parameters with mcAxisSetInfoStruct().  In LUA, this function returns a table with the axis information.
struct axisinfo {
	BOOL OutOfBandAxis;     // Is this an out of band axis?
	BOOL IsStill;           // Set high when the axis is not moving
	BOOL  Jogging;          // Used to tell to jog...
	BOOL  Homing;           // Used to tell the state of the home operation.
	int  Id;                // Axis Id
	BOOL IsSpindle;         // Does this axis control a spindle?
	BOOL Enabled;           // Is axis enabled?
	BOOL SoftlimitEnabled;  // Softlimits enabled?
	double SoftMaxLimit;    // Count for the max travel.
	double SoftMinLimit;    // Count for the m.
	BOOL VelocityMode;      // Used to make the axis move at a fixed speed
	BOOL BufferJog;         // Buffer all jogs?
	double Pos;             // Position in user units.
	double Mpos;            // Machine position in user units.
	int HomeOrder;          // The order in which to home the axis.
	int HomeDir;            // The direction the axis homes.
	double HomeOffset;      // The offset from the the limits switch.
	double HomeSpeedPercent;// The percentage of the max velocity at which to home.
	BOOL SoftlimitUsed;     // Use Softlimits?
	BOOL HomeInPlace;       // Zero the axis in place when Refed?
	int MotorId[MC_MAX_AXIS_MOTORS]; //child motor ID array.
};
typedef struct axisinfo axisinfo_t;
Usage:
int mInst = 0;
axisinfo_t ainf;
// Get Y_AXIS info structure.
mcAxisGetInfoStruct(mInst, Y_AXIS, &ainf);



================================================================================
[23/904] mcAxisGetMachinePos
Source: CATmcAxisGetMachinePos.htm
================================================================================

mcAxisGetMachinePos
mcAxisGetMachinePos
C/C++ Syntax:
int mcAxisGetMachinePos(
	MINSTANCE mInst, 
	int axisId, 
	double *val);
LUA Syntax:
val, rc = mc.mcAxisGetMachinePos(
	number mInst, 
	number axisId)
Description:
Get the machine positon of an axis in User units.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
val
Receives the axis machine position in User units.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the position of the axis in User units relitive to the home position.
Usage:
int mInst=0;
double XAxisMachinePos = 0;
int AxisNumber = X_AXIS;
mcAxisGetMachinePos(mInst, AxisNumber, &XAxisMachinePos);
// Get the position of the X axis in Machine Pos.



================================================================================
[24/904] mcAxisGetMotorId
Source: CATmcAxisGetMotorId.htm
================================================================================

mcAxisGetMotorId
mcAxisGetMotorId
C/C++ Syntax:
int mcAxisGetMotorId(
		MINSTANCE mInst, 
		int axis, 
		int childId, 
		int *motorId);
LUA Syntax:
motorId, rc = mc.mcAxisGetMotorId(
		number mInst, 
		number axis, 
		number childId)
Description:
Get the motor IDs of the motors used on the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID from which to get the position.
childId
The axis ID from which to get the position.
motorId
Receives the motor id of the child motor.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
The motor specified in
child_id
was not found.
Notes:
Get the motor ID of the child motor. The axis can have many child motors so to get all motors search until
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
or return is no longer
MERROR_NOERROR
No Error.
Usage:
int mInst=0;
int motorIds[]={-1,-1,-1,-1,-1}
int id;
// Get all the motor ID's for the X axis up to 5 motors.
for(int i = 0; i < 5; i++){
	if (mcAxisGetMotorId(mInst, X_AXIS, i, &id) ==
MERROR_NOERROR
No Error.
) {
		motorIds[i] = id;
	}
}



================================================================================
[25/904] mcAxisGetOverrideAxis
Source: CATmcAxisGetOverrideAxis.htm
================================================================================

mcAxisGetOverrideAxis
mcAxisGetOverrideAxis
C/C++ Syntax:
int mcAxisGetOverrideAxis(
		MINSTANCE mInst, 
		int axis, 
		int *axis1, 
		int *axis2, 
		int *axis3, 
		int *axis4);
LUA Syntax:
axis1, axis2, axis3, axis4, rc = mc.mcAxisGetOverrideAxis(
		number mInst, 
		number axis)
Description:
Get axis override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis id to apply override axis too.
axis1
Receives the override axis1 ID.
axis2
Receives the override axis2 ID.
axis3
Receives the override axis3 ID.
axis4
Receives the override axis4 ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the override axis ID for each override axis on the main axis. override_axis_id will return 0 if unused.
Usage:
int mInst = 0;
int ora[4];
// Get the override axis for the Z axis.
mcAxisGetOverrideAxis(mInst, ZAXIS, &ora[0], &ora[1], &ora[2], &ora[3]);



================================================================================
[26/904] mcAxisGetPos
Source: CATmcAxisGetPos.htm
================================================================================

mcAxisGetPos
mcAxisGetPos
C/C++ Syntax:
int mcAxisGetPos(
	MINSTANCE mInst, 
	int axisId, 
	double *val);
LUA Syntax:
val, rc = mc.mcAxisGetPos(
	number mInst, 
	number axisId)
Description:
Get the positon of an axis in user units.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID from which to get the position.
val
Receives the axis position in User units.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The axis position reported is in user units relative to the fixture and tool offsets that are active. This would be the typical value that the user would see in an axis DRO on the GUI of the controller.
Usage:
int mInst=0;
double XAxisPos = 0;
int AxisNumber = X_AXIS;
// Get the position of the X axis.
mcAxisGetPos(mInst, AxisNumber, &XAxisPos);



================================================================================
[27/904] mcAxisGetProbePos
Source: CATmcAxisGetProbePos.htm
================================================================================

mcAxisGetProbePos
mcAxisGetProbePos
C/C++ Syntax:
int mcAxisGetProbePos(
		MINSTANCE mInst, 
		int axisId, 
		BOOL machinePos, 
		double *val);
LUA Syntax:
val, rc = mc.mcAxisGetProbePos(
		number mInst, 
		number axisId,
		number machinePos)
Description:
Retrieves the position of the last probe strike for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
machinePos
TRUE for machine coordinates
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
The
val
pointer cannot be NULL.
Notes:
Usage:
// Get the last probe strike position for the X axis
MINSTANCE mInst = 0;
double xProbePos = 0;
mcAxisGetProbePos(mInst, X_AXIS, FALSE, &xProbPos);



================================================================================
[28/904] mcAxisGetProbePosAll
Source: CATmcAxisGetProbePosAll.htm
================================================================================

mcAxisGetProbePosAll
mcAxisGetProbePosAll
C/C++ Syntax:
int mcAxisGetProbePosAll(
		MINSTANCE mInst, 
		BOOL machinePos, 
		double *x, 
		double *y, 
		double *z, 
		double *a, 
		double *b, 
		double *c);
LUA Syntax:
x, y, z, a, b, c, rc = mc.mcAxisGetProbePosAll(
		number mInst, 
		number machinePos)
Description:
Retrieves the position of the last probe strike for all coordinated axes.
Parameters:
Parameter
Description
mInst
The controller instance.
machinePos
TRUE for machine coordinates
x
The X position.
y
The Y position.
z
The Z position.
a
The A position.
b
The B position.
c
The C position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
NULL can be specified for any of the parameters x, y, z, a, b, or c.
Usage:
// Get the last probe strike position for the X, Y, and Z axes.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcAxisGetProbePosAll(mInst, FALSE, &x, &y, &z, NULL, NULL, NULL);
if (rc == MERROR_NOERROR) {
	// Process probe positions...
}



================================================================================
[29/904] mcAxisGetScale
Source: CATmcAxisGetScale.htm
================================================================================

mcAxisGetScale
mcAxisGetScale
C/C++ Syntax:
int mcAxisGetScale(
		MINSTANCE mInst, 
		int axisId, 
		double *scaleVal);
LUA Syntax:
scaleVal, rc = mc.mcAxisGetProbePos(
		number mInst, 
		number axisId)
Description:
Retrieves the current scaling value for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
scaleVal
Receives the scale value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
The
scaleVal
pointer cannot be NULL
Notes:
Scale values that are negative produce mirror images.
Usage:
// Get the scale value for the X axis
MINSTANCE mInst = 0;
double scale = 0;
mcAxisGetScale(mInst, X_AXIS, &scale);



================================================================================
[30/904] mcAxisGetSoftlimitEnable
Source: CATmcAxisGetSoftlimitEnable.htm
================================================================================

mcAxisGetSoftlimitEnable
mcAxisGetSoftlimitEnable
C/C++ Syntax:
int mcAxisGetSoftlimitEnable(
		MINSTANCE mInst, 
		int axisId, 
		int *enable);
LUA Syntax:
enable, rc = mc.mcAxisGetSoftlimitEnable(
		number mInst, 
		number axisId)
Description:
Get the soft limit enable status.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enable
Receives the softlimit enable status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Soft limits can be enabled on a per axis basis.  This is the master soft limit enable for the axis.  It overrides the soft limit enable set by mcSoftLimitSetState().
Usage:
// Get master soft limit enable state for axis 0.
int mInst = 0;
int enable = 0;
mcAxisGetSoftlimitEnable(mInst, 0, &enable);



================================================================================
[31/904] mcAxisGetSoftlimitMax
Source: CATmcAxisGetSoftlimitMax.htm
================================================================================

mcAxisGetSoftlimitMax
mcAxisGetSoftlimitMax
C/C++ Syntax:
int mcAxisSetSoftlimitMax(
		MINSTANCE mInst, 
		int axisId, 
		double max);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMax(
		number mInst, 
		number axisId, 
		number max);
Description:
Set the softlimit maximum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
max
The maximum poisition of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit maximum for the axis by drilling down to each motor and setting it max softlimit based on the counts per unit and max sent (max * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double max = 20;
mcAxisGetSoftlimitMax( mInst, axis, max);
// Set the max distance of the softlimit for the Y axis to 20 units.



================================================================================
[32/904] mcAxisGetSoftlimitMin
Source: CATmcAxisGetSoftlimitMin.htm
================================================================================

mcAxisGetSoftlimitMin
mcAxisGetSoftlimitMin
C/C++ Syntax:
int mcAxisSetSoftlimitMin(
		MINSTANCE mInst, 
		int axisId, 
		double min);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMin(
		number mInst, 
		number axisId, 
		number min);
Description:
Set the softlimit minimum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
min
The minimum position of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit minimum for the axis by drilling down to each motor and setting it main softlimit based on the counts per unit and min sent (min * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double min = 20;
mcAxisGetSoftlimitMin( mInst, axis, min);
// Set the min distance of the softlimit for the Y axis to 20 units.



================================================================================
[33/904] mcAxisGetSpindle
Source: CATmcAxisGetSpindle.htm
================================================================================

mcAxisGetSpindle
mcAxisGetSpindle
C/C++ Syntax:
int mcAxisGetSpindle(
		MINSTANCE mInst,
		int axisId, 
		bool *spindle);
LUA Syntax:
spindle, rc = mcAxisGetSpindle(
		number mInst,
		number axisId)
Description:
Determine if the specified axis is an axis that controls a spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
spindle
Receives the spindle flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Only an out of band axis can control a spindle.
Usage:
// Find the spindle axis
int mInst = 0;
int axisId;
bool isSpindle = false;
for (axisId = MC_MAX_COORD_AXES; axisId < MC_MAX_AXES; axisId++) {
    mcAxisGetSpindle(mInst, axisId, &isSpindle);
    if (isSpindle) {
// Spindle found!
break;
    }
}



================================================================================
[34/904] mcAxisGetVel
Source: CATmcAxisGetVel.htm
================================================================================

mcAxisGetVel
mcAxisGetVel
C/C++ Syntax:
int mcAxisGetVel(
	MINSTANCE mInst, 
	int axisId, 
	double *velocity);
LUA Syntax:
velocity, rc = mc.mcAxisGetVel(
	number mInst, 
	number axisId)
Description:
Get the velocity of an axis in user units per min.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
velocity
Receives the velocity of the axis in user units per min.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
To get the blended velocity sum the velocity vectors:
blendVel = sqrt(vX*vX + vY*vY + vZ*vZ)
Usage:
int mInst=0;
int axis = Y_AXIS;
double CurrentVel = 0;
mcAxisGetVel(mInst, axis, &CurrentVel);
// Get the current speed of the Y axis.



================================================================================
[35/904] mcAxisHome
Source: CATmcAxisHome.htm
================================================================================

mcAxisHome
mcAxisHome
C/C++ Syntax:
int mcAxisHome(
	MINSTANCE mInst, 
	int axisId);
LUA Syntax:
rc = mc.mcAxisHome(
	number mInst, 
	number axisId)
Description:
Used to start an axis homing.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of which to set the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Home the axis, all motors will be homed that are child of the axis.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Set the X axis to home.
mcAxisSetPos(mInst, AxisNumber);



================================================================================
[36/904] mcAxisHomeAll
Source: CATmcAxisHomeAll.htm
================================================================================

mcAxisHomeAll
mcAxisHomeAll
C/C++ Syntax:
int mcAxisHomeAll(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcAxisHomeAll(
	number mInst)
Description:
Used to start an axis homing.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Home the all the axes.  Only the coordinated axes will be homed.
Usage:
int mInst=0;
// Home all coordinated axes.
mcAxisHomeAll(mInst);



================================================================================
[37/904] mcAxisHomeComplete
Source: CATmcAxisHomeComplete.htm
================================================================================

mcAxisHomeComplete
mcAxisHomeComplete
C/C++ Syntax:
int mcAxisHomeComplete(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisHomeComplete(
		number mInst, 
		number axisId);
Description:
Report that the axis is finished homing.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID which is finished homing.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports that the axis is finished homming. This is done by the motion plugin to report when it is finished the homing operation. The motors should be at their home positions and marked as still before this call is made.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Mark the X axis home operation as complete.
mcAxisHomeComplete(mInst, AxisNumber);



================================================================================
[38/904] mcAxisHomeCompleteWithStatus
Source: CATmcAxisHomeCompleteWithStatus.htm
================================================================================

mcAxisHomeCompleteWithStatus
mcAxisHomeCompleteWithStatus
C/C++ Syntax:
int mcAxisHomeCompleteWithStatus(
		MINSTANCE mInst, 
		int axisId
		BOOL success);
LUA Syntax:
rc = mc.mcAxisHomeCompleteWithStatus(
		number mInst, 
		number axisId
		number success);
Description:
Report that the axis is finished homing and provide the status of the home operation.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID which is finished homing.
success
The status of the home operation.  TRUE or FALSE
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports that the axis is finished homming. This is done by the motion plugin to report when it is finished. The motors should be at their home positions and marked as still before this call is made.
If the success is set to FALSE, the axis is dereferenced (not homed).
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Mark the X axis homing operation as finished and that it completed with success.
mcAxisHomeCompleteWithStatus(mInst, AxisNumber, TRUE);



================================================================================
[39/904] mcAxisIsEnabled
Source: CATmcAxisIsEnabled.htm
================================================================================

mcAxisIsEnabled
mcAxisIsEnabled
C/C++ Syntax:
int mcAxisIsEnabled(
		MINSTANCE mInst,
		int axisId,
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcAxisIsEnabled(
		number mInst,
		number axisId)
Description:
Determines if the specified axis is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enabled
Receives the axis enable flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function is primarily used to determine if the user has enabled the axis in the control configuration.  It is
NOT
the state of the motor enable signal (OSIG_ENABLEx).
Usage:
// Find all enabled axes.
int mInst = 0;
int axisId;
BOOL enabled = FALSE;
for (axisId = 0; axisId < MC_MAX_AXES; axisId++) {
    enabled = false;
    mcAxisIsEnabled(mInst, axisId, &enabled);
    if (enabled == TRUE) {
// Axis is enabled!
}
}



================================================================================
[40/904] mcAxisIsHomed
Source: CATmcAxisIsHomed.htm
================================================================================

mcAxisIsHomed
mcAxisIsHomed
C/C++ Syntax:
int mcAxisIsHomed(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *homed);
LUA Syntax:
homed, rc= mc.mcAxisIsHomed(
		number mInst, 
		number axisId)
Description:
Check to see if axis has been homed.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
homed
Receives the axis homed state (TRUE homed, FALSE not homed).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the homed state of the axis. Axis will only report back as homed if all child motors have been homed.
Usage:
int mInst = 0;
BOOL homed = FALSE;
// Get the homed state of Z axis.
mcAxisIsHomed(mInst, Z_AXIS, &homed);
if (rc == MERROR_NOERROR && homed == TRUE) {
// Z is homed.
}



================================================================================
[41/904] mcAxisIsHoming
Source: CATmcAxisIsHoming.htm
================================================================================

mcAxisIsHoming
mcAxisIsHoming
C/C++ Syntax:
int mcAxisIsHomin(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *homing);
LUA Syntax:
homing, rc= mc.mcAxisIsHomed(
		number mInst, 
		number axisId)
Description:
Check to see if an axis is in a home operation.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
homing
Receives the axis himing state (TRUE homing, FALSE not homing).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
int mInst = 0;
BOOL homing = FALSE;
// Get the homing state of Z axis.
mcAxisIsHoming(mInst, Z_AXIS, &homing);
if (rc == MERROR_NOERROR && homing == TRUE) {
// Z is in a home operation.
}



================================================================================
[42/904] mcAxisIsStill
Source: CATmcAxisIsStill.htm
================================================================================

mcAxisIsStill
mcAxisIsStill
C/C++ Syntax:
int mcAxisIsStill(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *still);
LUA Syntax:
still, rc = mc.mcAxisIsStill(
		number mInst, 
		number axisId)
Description:
Report if the axis is still.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
still
Receives a BOOL reflecting the still state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports back TRUE if the motor is still and FALSE if it is moving. The data is pulled from the axis' child motors.  All of the motors that are mapped to the axis must be still in order for the axis to be marked as still.
Note that an axis can be marked as still even when G code is still processing.  A report that the axis is still simply means that the axis is not moving at the point in time the function is called.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
int still = 0;
// Get the is moving state of the axis vlue of 1 is stopped.
mcAxisIsStill(mInst, AxisNumber, &still);



================================================================================
[43/904] mcAxisMapMotor
Source: CATmcAxisMapMotor.htm
================================================================================

mcAxisMapMotor
mcAxisMapMotor
C/C++ Syntax:
int mcAxisMapMotor(
		MINSTANCE mInst, 
		int axisId, 
		int motorId);
LUA Syntax:
rc = mc.mcAxisMapMotor(
		number mInst, 
		number axisId, 
		number motorId)
Description:
Map a motor to an axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The ID of the axis to which to map the motor.
motorId
The ID of the motor to map to the specified axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Set the motor to be a child of the axis. Up to six motors can be mapped to an axis.  The fist mapped motor is the master motor.  Any additional mapped motors are slave motors.  Softlimits will be the least common denominator for all the mapped motors.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
int MotorNumber = MOTOR5
// Map motor5 to the X axis.
mcAxisMapMotor(mInst, AxisNumber, MotorNumber);



================================================================================
[44/904] mcAxisRegister
Source: CATmcAxisRegister.htm
================================================================================

mcAxisRegister
mcAxisRegister
C/C++ Syntax:
int mcAxisRegister(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisRegister(
		number mInst, 
		number axisId);
Description:
Register an axis to the system.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_CREATED
The axis was not created.
Notes:
Register an axis to the system so motors can then be mapped to it. This could be a coordinated axis or an out of band axis.
This function is not used as the core registers axes based on capabilities set by the runtime license.
Usage:
int mInst=0;
for (int a = AXIS0; < AXIS4; a++) {
// Register axis0 - axis2 to the core.
if( mcAxisRegister(mInst, a) !=
MERROR_NOERROR
No Error.
){
         return(false);
    }
}



================================================================================
[45/904] mcAxisRemoveOverrideAxis
Source: CATmcAxisRemoveOverrideAxis.htm
================================================================================

mcAxisRemoveOverrideAxis
mcAxisRemoveOverrideAxis
C/C++ Syntax:
int mcAxisRemoveOverrideAxis(
		MINSTANCE mInst, 
		int axisId, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisRemoveOverrideAxis(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Removes an override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Remove override axis from the main axis.
Usage:
int mInst = 0;
int homed = 0;
// Remove axis 8 from the Z axis.
mcAxisRemoveOverrideAxis( mInst, AXIS_8, ZAXIS );



================================================================================
[46/904] mcAxisRemoveOverrideAxisSync
Source: CATmcAxisRemoveOverrideAxisSync.htm
================================================================================

mcAxisRemoveOverrideAxisSync
mcAxisRemoveOverrideAxisSync
C/C++ Syntax:
int mcAxisRemoveOverrideAxisSync(
		MINSTANCE mInst, 
		int axisId, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisRemoveOverrideAxisSync(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Removes an override axis, then sync the planner.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Remove override axis from the main axis.
Usage:
int mInst = 0;
int homed = 0;
// Remove axis 8 from the Z axis.
mcAxisRemoveOverrideAxisSync( mInst, AXIS_8, ZAXIS );



================================================================================
[47/904] mcAxisSetHomeDir
Source: CATmcAxisSetHomeDir.htm
================================================================================

mcAxisSetHomeDir
mcAxisSetHomeDir
C/C++ Syntax:
int mcAxisSetHomeDir(
		MINSTANCE mInst, 
		int axisId, 
		int dir);
LUA Syntax:
rc = mc.mcAxisSetHomeDir(
		number mInst, 
		number axisId, 
		number dir)
Description:
Set the specified axis' homing direction.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
dir
The homing direction.  -1 (NEG) or 1 (POS)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home direction only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored direction information and use it.
Usage:
// Set axis 0 homing directio to POS.
int mInst = 0;
mcAxisSetHomeDir(mInst, 0, 1);



================================================================================
[48/904] mcAxisSetHomeInPlace
Source: CATmcAxisSetHomeInPlace.htm
================================================================================

mcAxisSetHomeInPlace
mcAxisSetHomeInPlace
C/C++ Syntax:
int mcAxisSetHomeInPlace(
		MINSTANCE mInst, 
		int axisId, 
		BOOL homeInPlace);
LUA Syntax:
rc = mc.mcAxisGetHomeInPlace(
		number mInst,
		number axisId,
		number homeInPlace)
Description:
Set the axis' Home In Place flag.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
homeInPlace
TRUE or FALSE
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home in place flag only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored flag and implement a means to home the axis and set machine coordinate 0 at its current location.
Usage:
// Set the Home In Place flag for the X axis.
MINSTANCE mInst = 0;
BOOL hip = FALSE;
mcAxisGetHomeInPlace(mInst, X_AXIS, hip);



================================================================================
[49/904] mcAxisSetHomeOffset
Source: CATmcAxisSetHomeOffset.htm
================================================================================

mcAxisSetHomeOffset
mcAxisSetHomeOffset
C/C++ Syntax:
int mcAxisSetHomeOffset(
		MINSTANCE mInst, 
		int axisId, 
		double offset);
LUA Syntax:
rc = mcAxisSetHomeOffset(
		number mInst, 
		number axisId, 
		number offset);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
offset
Receives the axis home offset..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home offset only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored offset and use it.
Usage:
// Set the home offset for axis 0.
int mInst = 0;
mcAxisSetHomeOffset(mInst, 0, 1.5
/* inches */
);



================================================================================
[50/904] mcAxisSetHomeOrder
Source: CATmcAxisSetHomeOrder.htm
================================================================================

mcAxisSetHomeOrder
mcAxisSetHomeOrder
C/C++ Syntax:
int mcAxisSetHomeOrder(
		MINSTANCE mInst, 
		int axisId, 
		int order);
LUA Syntax:
rc = mc.mcAxisSetHomeOrder(
		number mInst, 
		number axisId, 
		number order)
Description:
Set the axis home order.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
order
The order in which the axis will be homed (0 is first).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the order the axis is homed in. 0 is the first axis to get homed and more then one axis could have the same home order number.
Usage:
int mInst=0;
// Set the order of homming so the Z axis will home first then the X and Y.
mcAxisSetHomeOrder(mInst, Z_AXIS , 0);
mcAxisSetHomeOrder(mInst, X_AXIS , 1);
mcAxisSetHomeOrder(mInst, Y_AXIS , 1);



================================================================================
[51/904] mcAxisSetHomeSpeed
Source: CATmcAxisSetHomeSpeed.htm
================================================================================

mcAxisSetHomeSpeed
mcAxisSetHomeSpeed
C/C++ Syntax:
int mcAxisSetHomeSpeed(
		MINSTANCE mInst,
		int axis, 
		double percent);
LUA Syntax:
rc = mc.mcAxisSetHomeSpeed(
		number mInst,
		number axis, 
		number percent);
Description:
Set the axis homing velocity as a percentage of the axis maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
percent
The percentage of the axis maximum velocity expressed in decimal. e.g. 20.5 for 20.5%
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home speed percentage only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored speed percentage and use it.
Usage:
// Set the homing speed for axis 0 as a percentage of the max velocity.
int mInst = 0;
mcAxisSetHomeSpeed(mInst, 0, 20.5
/* percent */
);



================================================================================
[52/904] mcAxisSetInfoStruct
Source: CATmcAxisSetInfoStruct.htm
================================================================================

mcAxisSetInfoStruct
mcAxisSetInfoStruct
C/C++ Syntax:
int mcAxisSetInfoStruct(
		MINSTANCE mInst, 
		int axisID, 
		axisinfo_t *ainf);
LUA Syntax:
N/A
Description:
Get axis info struct to get all axis settings in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
axisID
The axis ID.
ainf
The address of a axisinfo_t sruct that receives the info for the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set all the Axis information in the axis information structure in one call. This is used when all the data needs to be set. Call is best used when paired with mcAxisGetInfoStruct().
struct axisinfo {
	bool OutOfBandAxis;
	bool IsStill;           // Set high when the axis is not moving
	int  Jogging;           // Used to tell to jog...
	int  Homing;            // Used to tell the state of the home operation.
	int  Id;                // Axis Id
	bool IsSpindle;			// Does this axis control a spindle?
	bool Enabled;           // Is axis enabled?
	bool SoftlimitEnabled;  // Softlimits enabled?
	double SoftMaxLimit;    // Count for the max travel.
	double SoftMinLimit;    // Count for the min travel.
	bool VelocityMode;      // Used to make the axis move at a fixed speed
	bool BufferJog;
	double Pos;             // Position in user units.
	double Mpos;            // Machine position in user units.
	int HomeOrder;          // The order in which to home the axis.
};
Usage:
int mInst = 0;
axisinfo_t ainf;

mcAxisGetInfoStruct(mInst, Y_AXIS, &ainf);
// Get Y_AXIS info structure.
ainf.HomeOrder = 1;
// Set Y_AXIS home order to 1.
mcAxisSetInfoStruct(mInst, Y_AXIS, &ainf);
// Set Y_AXIS info structure.



================================================================================
[53/904] mcAxisSetMachinePos
Source: CATmcAxisSetMachinePos.htm
================================================================================

mcAxisSetMachinePos
mcAxisSetMachinePos
C/C++ Syntax:
int mcAxisSetMachinePos(
		MINSTANCE mInst, 
		int axis,
		double val);
LUA Syntax:
rc = mc.mcAxisSetMachinePos(
		number mInst, 
		number axis,
		number val)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
val
The desired axis position to apply a fixture offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
// Set axis 0 fisxture offset.
int mInst = 0;
mcAxisSetMachinePos(mInst, 0, 0.0
/* set part zero */
);



================================================================================
[54/904] mcAxisSetOverrideAxis
Source: CATmcAxisSetOverrideAxis.htm
================================================================================

mcAxisSetOverrideAxis
mcAxisSetOverrideAxis
C/C++ Syntax:
int mcAxisSetOverrideAxis(
		MINSTANCE mInst, 
		int axisTd, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisSetOverrideAxis(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Set axis as an override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Setting an override axis allows an axis to be superimposed on top of the main axis. This can be used as an axis to adjust the main axis on the fly (like Torch Height Control). Up to 4 override axes can be used at the same time.
Usage:
int mInst = 0;
int homed = 0;
// Set the axis 8 to be the override axis for the Z axis.
mcAxisSetOverrideAxis(mInst, AXIS_8, ZAXIS);



================================================================================
[55/904] mcAxisSetPos
Source: CATmcAxisSetPos.htm
================================================================================

mcAxisSetPos
mcAxisSetPos
C/C++ Syntax:
int mcAxisSetPos(
	MINSTANCE mInst, 
	int axisId, 
	double val);
LUA Syntax:
rc = mc.mcAxisSetPos(
	number mInst, 
	number axisId, 
	number val);
Description:
Set the Position of an axis by changing the fixture offset.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID for which to set the position.
val
The axis position (in user units).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the position of the axis by changing the current Fixture offset. This is not valid for out of band axes.
Usage:
int mInst=0;
double XAxisPos = .5;
int AxisNumber = X_AXIS;
// Set the position of the X axis by changing the fixture offset.
mcAxisSetPos(mInst, AxisNumber, XAxisPos);



================================================================================
[56/904] mcAxisSetSoftlimitEnable
Source: CATmcAxisSetSoftlimitEnable.htm
================================================================================

mcAxisSetSoftlimitEnable
mcAxisSetSoftlimitEnable
C/C++ Syntax:
int mcAxisSetSoftlimitEnable(
			MINSTANCE mInst,
			int axis,
			int enabel);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitEnable(
			number mInst,
			number axis,
			number enabel)
Description:
Set the master soft limit enable flag for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
enable
1 for enable
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Soft limits can be enabled on a per axis basis.  This is the master soft limit enable for the axis.  It overrides the soft limit enable set by mcSoftLimitSetState().
Usage:
// Diable softlimits on axis 0
MINSTANCE mInst = 0;
mcAxisSetSoftlimitEnable(mInst, 0,0);



================================================================================
[57/904] mcAxisSetSoftlimitMax
Source: CATmcAxisSetSoftlimitMax.htm
================================================================================

mcAxisSetSoftlimitMax
mcAxisSetSoftlimitMax
C/C++ Syntax:
int mcAxisSetSoftlimitMax(
		MINSTANCE mInst, 
		int axisId, 
		double max);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMax(
		number mInst, 
		number axisId, 
		number max);
Description:
Set the softlimit maximum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
max
The maximum poisition of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit maximum for the axis by drilling down to each motor and setting it max softlimit based on the counts per unit and max sent (max * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double max = 20;
mcAxisGetSoftlimitMax( mInst, axis, max);
// Set the max distance of the softlimit for the Y axis to 20 units.



================================================================================
[58/904] mcAxisSetSoftlimitMin
Source: CATmcAxisSetSoftlimitMin.htm
================================================================================

mcAxisSetSoftlimitMin
mcAxisSetSoftlimitMin
C/C++ Syntax:
int mcAxisSetSoftlimitMin(
		MINSTANCE mInst, 
		int axisId, 
		double min);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMin(
		number mInst, 
		number axisId, 
		number min);
Description:
Set the softlimit minimum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
min
The minimum position of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit minimum for the axis by drilling down to each motor and setting it main softlimit based on the counts per unit and min sent (min * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double min = 20;
mcAxisGetSoftlimitMin( mInst, axis, min);
// Set the min distance of the softlimit for the Y axis to 20 units.



================================================================================
[59/904] mcAxisSetSpindle
Source: CATmcAxisSetSpindle.htm
================================================================================

mcAxisSetSpindle
mcAxisSetSpindle
C/C++ Syntax:
int mcAxisSetSpindle(
		MINSTANCE mInst, 
		int axisId, 
		BOOL spindle);
LUA Syntax:
rc = mc.mcAxisSetSpindle(
		number mInst, 
		number axisId, 
		number spindle)
Description:
Flag or unflag and axis as controlling a spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
spindle
The spindle flag.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Setting the current axis as an axis controlling a spindle has the effect of negating this flag for all other axes.
Only out of band axes can be falgged as controlling a spindle.
Usage:
// Set axis 6 as a spindle axis.
MINSTANCE mInst = 0;
mcAxisSetSpindle(mInst, 6, true);



================================================================================
[60/904] mcAxisSetVel
Source: CATmcAxisSetVel.htm
================================================================================

mcAxisSetVel
mcAxisSetVel
C/C++ Syntax:
int mcAxisSetVel(
	MINSTANCE mInst, 
	int axis, 
	double velocity);
Description:
Not used at this time.



================================================================================
[61/904] mcAxisUnmapMotor
Source: CATmcAxisUnmapMotor.htm
================================================================================

mcAxisUnmapMotor
mcAxisUnmapMotor
C/C++ Syntax:
int mcAxisUnmapMotor(
		MINSTANCE mInst, 
		int axisId, 
		int motor);
LUA Syntax:
rc = mc.mcAxisUnmapMotor(
		number mInst, 
		number axisId, 
		number motor)
Description:
Unmap the motor from the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The ID identifying the axis from which to unmap the motor.
motor
The ID identifying the motor to be unmapped from the aixs.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motor
was not found.
Notes:
Used to remove a motor from an axis based on it's motor id.
Usage:
int mInst = 0;
// Remove motor6 from the Y axis.
mcAxisUnmapMotor(mInst, Y_AXIS, MOTOR6);



================================================================================
[62/904] mcAxisUnmapMotors
Source: CATmcAxisUnmapMotors.htm
================================================================================

mcAxisUnmapMotors
mcAxisUnmapMotors
C/C++ Syntax:
int mcAxisUnmapMotors(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisUnmapMotors(
		number mInst, 
		number axisId)
Description:
Unmap all motors from the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis number to unmap motor from.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Used to remove all motors from an axis. This is used when an axis needs to have all it's child motors removed and setup with all new motors.
Usage:
int mInst = 0;
// Remove all motors from the Y axis.
mcAxisUnmapMotors(mInst, Y_AXIS);



================================================================================
[63/904] mcAxisUnregister
Source: CATmcAxisUnregister.htm
================================================================================

mcAxisUnregister
mcAxisUnregister
C/C++ Syntax:
int mcAxisUnregister(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisUnregister(
		number mInst, 
		number axisId)
Description:
Unregister an axis from the system.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
int mInst=0;
// Remove AXIS7 from frome the system.
mcAxisUnregister(mInst, AXIS7);



================================================================================
[64/904] mcCntlCheckLicenseFeature
Source: CATmcCntlCheckLicenseFeature.htm
================================================================================

mcCntlCheckLicenseFeature
mcCntlCheckLicenseFeature
C/C++ Syntax:
int mcCntlCheckLicenseFeature(
		MINSTANCE  mInst, 
		const char *licFile, 
		const char *requirement, 
		const char *feature);
LUA Syntax:
rc = mcCntlCheckLicenseFeature(
		number  mInst, 
		string licFile, 
		string requirement, 
		string feature);
Description:
Check a license file for a requirement and feature.
Parameters:
Parameter
Description
mInst
The controller instance.
licFile
The license file name.
requirement
A string defining the license requirement.
feature
A string defining the feature to check.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
feature
parameter cannot be NULL.
MERROR_NODATA
The license service count not be initialized.
MERROR_LIC_BAD_ID
The license file PCID does not match the current PCID.
MERROR_LIC_REQUIREMENT_NOT_FOUND
The specified license requirement does not exist in the license file.
MERROR_LIC_FEATURE_NOT_FOUND
The specified feature does not exist in the license file.
MERROR_LIC_EXPIRED
The time limited license has expired.
MERROR_LIC_BAD_KEY
The license encryption key is invalid.
(
Notes:
If no explicit path is given for the
licFile
parameter (just a file name), the core looks for the license in the Licenses directory of the installation path.  Otherwise, the fully qualified path is used.
Usage:
// Check the DarwinLic.dat file for feature M4_DARWIN
MINSTANCE mInst = 0;
int rc = mcCntlCheckLicenseFeature(mInst, "DarwinLic.dat", "NF_DARWIN", "M4_DARWIN");
if (rc != MERROR_NOERROR) {
// Feature found!!!
return;
}



================================================================================
[65/904] mcCntlCleanup
Source: CATmcCntlCleanup.htm
================================================================================

mcCntlCleanup
mcCntlCleanup
C/C++ Syntax:
int mcCntlCleanup(MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Cleanup the core instance before shutdown.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
None.
// Cleanup core instance 0
MINSTANCE mInst = 0;
int rc = mcCntlCleanup(mInst);



================================================================================
[66/904] mcCntlCloseGCodeFile
Source: CATmcCntlCloseGCodeFile.htm
================================================================================

mcCntlCloseGCodeFile
mcCntlCloseGCodeFile
C/C++ Syntax:
int mcCntlCloseGCodeFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCloseGCodeFile(
		number mInst)
Description:
Close Gocde file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to close a Gcode file if the Gcode File needs to be edited
Usage:
int mInst=0;
mcCntlCloseGCodeFile(mInst);
// Close the Gcode file in controller 0.



================================================================================
[67/904] mcCntlConfigStart
Source: CATmcCntlConfigStart.htm
================================================================================

mcCntlConfigStart
mcCntlConfigStart
C/C++ Syntax:
int mcCntlConfigStart(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlConfigStart(
		number mInst);
Description:
Put the control into the configure state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is in a state from which it cannot transition to the configure state.
Notes:
Upon entering the configure state, MSG_CONFIG_START is sent to the GUI and plugins.
Usage:
// Enter the configure state
MINSTANCE mInst = 0;
if (mcCntlConfigStart(mInst) == MERRROR_NOERROR) {
// Successfully entered the configure state!
}



================================================================================
[68/904] mcCntlConfigStop
Source: CATmcCntlConfigStop.htm
================================================================================

mcCntlConfigStop
mcCntlConfigStop
C/C++ Syntax:
int mcCntlConfigStop(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlConfigStop(
		number mInst);
Description:
Leave the configure state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control was not in the configure state.
Notes:
Upon leaving the congifure state, MSG_CONFIG_END is sent to the GUI and plugins.
Usage:
// Leave the configure state.
MINSTANCE mInst = 0;
int rc = mcCntlConfigStop(mInst);
if (rc == MERROR_NOERROR) {
// Successfully exited the configure state.
}



================================================================================
[69/904] mcCntlCreateLocalVars
Source: CATmcCntlCreateLocalVars.htm
================================================================================

mcCntlCreateLocalVars
mcCntlCreateLocalVars
C/C++ Syntax:
int mcCntlCreateLocalVars(
		MINSTANCE mInst, 
		const char *lineParams, 
		unsigned long *handle)
LUA Syntax:
hParams, rc = mc.mcCntlCreateLocalVars(
		number mInst, 
		string lineParams);
Description:
Create a handle to macro script parameters.  This is primarily a script debugging convenience function.
Parameters:
Parameter
Description
mInst
The controller instance.
lineParams
A string containing the G code block parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is in a state from which it cannot transition to the configure state.
Notes:
This function can be used to facilitate the debugging of scripts that take parameters.  Some M codes and/or custom M codes can take parameters specified on the G code blcok after the M code. It really has no use for C or C++.
Usage:
--Example m19 script that takes parameters
function m19(hParam)
--hParam is a handle to all parameters on same line as m19 --The  R and P params are optional. M19 R90 P0 for example.
--R is angle from 0 to 360.
--P is direction: 0 == shortest angle, 1 == clockwise, 2 == counterclockwise
--Fanuc uses S for angle
local inst = mc.mcGetInstance()
    local pcallRet = true
    local stat = 1
    local msgPre = "M19 macro says "
    local msg = "M19 Completed successfully"
    local varR = 0
    local varP = 0
    if (hParam ~= nil) then
        local rc, flagR, flagP
        flagR, rc = mc.mcCntlGetLocalVarFlag(inst, hParam, mc.SV_R)
        flagP, rc = mc.mcCntlGetLocalVarFlag(inst, hParam, mc.SV_P)
        if (flagR == 1) then
--Check that the flag has been set so we do not get an unexpected value for mc.SV_R
varR = mc.mcCntlGetLocalVar(inst, hParam, mc.SV_R)
            if (varR < 0) or (varR > 360) then
--It is out of range
msg = string.format("varR == " .. varR .. " and is out of range (0-360)")
                mc.mcCntlCycleStop(inst)
                return
            end
        end
		
        if (flagP == 1) then
--Check that the flag has been set so we do not get an unexpected value for mc.SV_P
varP = mc.mcCntlGetLocalVar(inst, hParam, mc.SV_P)
-- fixup the values to pass to the spindleorient script.
if (varP == 0) then 
                varP = mc.MC_SPINDLE_STOP
-- 0
elseif (varP == 1) then 
                varP = mc.MC_SPINDLE_FWD
-- 1
elseif (varP == 2) then 
                varP = mc.MC_SPINDLE_REV
-- -1
else
                msg = string.format("varP == " .. varP .. " and is out of range (0-2)")
                mc.mcCntlCycleStop(inst)
                return
            end
        end
    end

    pcallRet, stat, msg = pcall(spindleorient, varR, varP);
--Call the spindleorient.mcs script
mc.mcCntlSetLastError(inst, msgPre .. msg)
	
    if (pcallRet == false) then 
        mc.mcCntlCycleStop(inst)
    end
end

if (mc.mcInEditor() == 1) then
--We are testing the script in the editor.
--Fab up some paramters to pass to our m19() function.
local inst = mc.mcGetInstance()
    local hParams, rc =
mc.mcCntlCreateLocalVars
(inst, "R320 P0")
--Like we are testing "M19 R320 P0".
m19(hParams)
--Call m19() with hParams.
end



================================================================================
[70/904] mcCntlCycleStart
Source: CATmcCntlCycleStart.htm
================================================================================

mcCntlCycleStart
mcCntlCycleStart
C/C++ Syntax:
int mcCntlCycleStart(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCycleStart(
		number mInst)
Description:
Start the Gcode file running.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Is also used to restart after a feedhold.
Usage:
int mInst=0;
// Start controller 0's Gcode file.
mcCntlCycleStart(mInst);



================================================================================
[71/904] mcCntlCycleStop
Source: CATmcCntlCycleStop.htm
================================================================================

mcCntlCycleStop
mcCntlCycleStop
C/C++ Syntax:
int mcCntlCycleStop(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCycleStop(
		number mInst)
Description:
Stop a Gcode file that is running.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Feedhold needs to be used to pause the file. CMD_STOP_EXECUTION is sent to all plugins to tell the the Stop event has been requested.
Usage:
int mInst=0;
// Stop controller 0's Gcode file.
mcCntlCycleStop(mInst);



================================================================================
[72/904] mcCntlDryRunToLine
Source: CATmcCntlDryRunToLine.htm
================================================================================

mcCntlDryRunToLine
mcCntlDryRunToLine
C/C++ Syntax:
int mcCntlDryRunToLine(
		MINSTANCE mInst, 
		int line);
LUA Syntax:
rc = mc.mcCntlDryRunToLine(
		number mInst, 
		number line)
Description:
Process G code forward to a given line without motion.
Parameters:
Parameter
Description
mInst
The controller instance.
line
An integer specifying the G code line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_NOT_NOW
The operation could not be completed at this time.
It was not possible to start the dry run at this time.
Notes:
Once the dry run is started, the function returns immediately.  To wait on the dry run, you must check the state of the control.
Usage:
// Dry run to line 38
MINSTANCE mInst = 0;
int rc = mcCntlDryRunToLine(mInst, 38);



================================================================================
[73/904] mcCntlEStop
Source: CATmcCntlEStop.htm
================================================================================

mcCntlEStop
mcCntlEStop
C/C++ Syntax:
int mcCntlEStop(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlEStop(
	number mInst)
Description:
Disables the control and optionally dereferences all axes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is not a subsitute for a hard wired e-stop circuit!  This is a convenience function that is designed to put the contorol into a default state to be used after the machine has already been stopped by the real e-stop control circuit.
Usage:
// Put the control in the default state when e-stop is asserted.
MINSTANCE mInst = 0;
int rc = mcCntlEStop(mInst);



================================================================================
[74/904] mcCntlEnable
Source: CATmcCntlEnable.htm
================================================================================

mcCntlEnable
mcCntlEnable
C/C++ Syntax:
int mcCntlEnable(
	MINSTANCE mInst, 
	BOOL state);
LUA Syntax:
rc = mc.mcCntlEnable(
	number mInst, 
	number state)
Description:
Enable or disable the control.
Parameters:
Parameter
Description
mInst
The controller instance.
state
A BOOL specifying the desired control state. TRUE for enabled
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
The ISIG_EMERGENCY signal is asserted.
Notes:
If ISIG_EMERGENCY is asserted, the e-stop condition must be cleared.
Usage:
// Enable the control.
MINSTANCE mInst = 0;
int rc = mcCntlEnable(mInst, TRUE);



================================================================================
[75/904] mcCntlFeedHold
Source: CATmcCntlFeedHold.htm
================================================================================

mcCntlFeedHold
mcCntlFeedHold
C/C++ Syntax:
int mcCntlFeedHold(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlFeedHold(
		number mInst)
Description:
Pause the motion of a Gcode block.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Will not effect out of band axis or jogging.
Usage:
int mInst = 0;
int rc;
rc = mcCntlFeedHold(mInst);
// Pause the motion of controller 0.
if (rc == MERROR_NOERROR) {
// Feed hold was successful.
}



================================================================================
[76/904] mcCntlFeedHoldState
Source: CATmcCntlFeedHoldState.htm
================================================================================

mcCntlFeedHoldState
mcCntlFeedHoldState
C/C++ Syntax:
int mcCntlFeedHoldState(
		MINSTANCE mInst, 
		BOOL *InFeedHold);
LUA Syntax:
InFeedHold, rc = mc.mcCntlFeedHoldState(
				number mInst)
Description:
Get the state of Feedhold.
Parameters:
Parameter
Description
mInst
The controller instance.
InFeedHold
The address of a BOOL to receive the status of Feedhold (TRUE or FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Not used at this time.
Usage:
int mInst = 0;
int rc;
BOOL fhState;
rc = mcCntlFeedHoldState(mInst, &fhState);
// Pause the motion of controller 0.
if (rc == MERROR_NOERROR && fhState == TRUE) {
// The control is in Feedhold.
}



================================================================================
[77/904] mcCntlGcodeExecute
Source: CATmcCntlGcodeExecute.htm
================================================================================

mcCntlGcodeExecute
mcCntlGcodeExecute
C/C++ Syntax:
int mcCntlGcodeExecute(
		MINSTANCE mInst, 
		const char *commands);
LUA Syntax:
rc = mc.mcCntlGcodeExecute(
		number mInst, 
		string commands)
Description:
Execute G code as a unit of work.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MERROR_NOT_COMPILED
The macro scripts could not be compiled.
Notes:
If the control is in the idle state, this function will execute the G code in MDI mode.
It is important to note that this function does not wait for the G code to complete.  It is an error to execute G code with this function one line after another.  Instead, the lines should be combined into one string separeated with newline characters (\n).
Usage:
// Execute spindle stop and rapid to 0, 0.
MINSTANCE mInst = 0;
int rc;
rc = mcCntlGcodeExecute(mInst, "M05\nG00 X0 Y0");
if (rc == MERROR_NOERROR) {
// The G code was submitted for processing.
// However, the function return immediately and does not wait on the G code to finish.
}



================================================================================
[78/904] mcCntlGcodeExecuteWait
Source: CATmcCntlGcodeExecuteWait.htm
================================================================================

mcCntlGcodeExecuteWait
mcCntlGcodeExecuteWait
C/C++ Syntax:
int mcCntlGcodeExecuteWait(
		MINSTANCE mInst, 
		const char *commands);
LUA Syntax:
rc = mc.mcCntlGcodeExecuteWait(
		number mInst, 
		string commands)
Description:
Execute G code as a unit of work and wait until it is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MERROR_NOT_COMPILED
The macro scripts could not be compiled.
Notes:
If the control is in the idle state, this function will execute the G code in MDI mode.
Since mcCntlGcodeExecuteWait() waits for the G code execution to complete, multiple lines of G code can be broken up into separate calls.  This ia in contrast to mcCntlGcodeExecute() where the whole unit of work needs to be specified in one call.
Usage:
// Execute spindle stop and rapid to 0, 0.
MINSTANCE mInst = 0;
int rc;
rc = mcCntlGcodeExecuteWait(mInst, "M05\nG00 X0 Y0");
if (rc == MERROR_NOERROR) {
// The G code was submitted for processing and has completed.
}



================================================================================
[79/904] mcCntlGcodeInterpGetData
Source: CATmcCntlGcodeInterpGetData.htm
================================================================================

mcCntlGcodeInterpGetData
mcCntlGcodeInterpGetData
C/C++ Syntax:
int mcCntlGcodeInterpGetData(
		MINSTANCE mInst, 
		interperter_t *data);
LUA Syntax:
N/A
Description:
Retrieves the current G code interpreter data.
Parameters:
Parameter
Description
mInst
The controller instance.
data
The address of a Interpreter_info struct.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
struct Interperter_info {
	double ModalGroups[MC_MAX_GROUPS];
	double FeedRate;
	double SpindleSpeed;
	int SpindleDirection;
	BOOL Mist;
	BOOL Flood;
	int ToolNumber;
	int HeightRegister;
	int DiaRegister;
};
typedef struct Interperter_info interperter_t;
Usage:
// Get the interpreter information.
MINSTANCE mInst = 0;
interperter_t data;
int rc;
rc = mcCntlGcodeInterpGetData(mInst, &data);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[80/904] mcCntlGcodeInterpGetPos
Source: CATmcCntlGcodeInterpGetPos.htm
================================================================================

mcCntlGcodeInterpGetPos
mcCntlGcodeInterpGetPos
C/C++ Syntax:
int mcCntlGcodeInterpGetPos(
		MINSTANCE mInst, 
		int axisId, 
		double *pos);
LUA Syntax:
pos, rc = mc.mcCntlGcodeInterpGetPos(
		number mInst, 
		number axisId)
Description:
Retrieves the current G code interpreter position for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
pos
An address of a double to receive the axis' position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
It is important to not that the look ahead buffer will affect what value is returned and it may not be the current position.
Usage:
// Get the current buffered X axis position.
MINSTANCE mInst = 0;
double pos;
int rc;
rc = int mcCntlGcodeInterpGetPos(mInst, X_AXIS, &pos);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[81/904] mcCntlGetBlockDelete
Source: CATmcCntlGetBlockDelete.htm
================================================================================

mcCntlGetBlockDelete
mcCntlGetBlockDelete
C/C++ Syntax:
int mcCntlGetBlockDelete(
		MINSTANCE mInst, 
		int deleteId, 
		BOOL *val);
LUA Syntax:
val, rc = mc.mcCntlGetBlockDelete(
		number mInst, 
		number deleteId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
deleteId
An integer specifying the block delete index.
val
The address of a BOOL to revceive the block delete state. (TRUE is block delete on
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Up to 10 block deletes can be used.
Usage:
// Is block delete 0 on?
MINSTANCE mInst = 0;
BOOL val;
int rc = mcCntlGetBlockDelete(mInst, 0, &val);
if (rc == MERROR_NOERROR) {
	if (val == TRUE) {
// Is block delete 0 is on!
} else {
// Is block delete 0 is off!
}
}



================================================================================
[82/904] mcCntlGetBuild
Source: CATmcCntlGetBuild.htm
================================================================================

mcCntlGetBuild
mcCntlGetBuild
C/C++ Syntax:
int mcCntlGetBuild(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufsize);
LUA Syntax:
build, rc = mc.mcCntlGetBuild(
		number mInst)
Description:
Retrieves the core build number.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer that receives the build number.
bufsize
The length of the supplied string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get the core's build number
MINSTANCE mInst = 0;
char buildBuf[80];
int rc = mcCntlGetBuild(mInst, buildBuf, sizeof(buildBuf));
if (rc == MERROR_NOERROR) {
	printf("The current build is %s.n", buildBuf);
}



================================================================================
[83/904] mcCntlGetComputerID
Source: CATmcCntlGetComputerID.htm
================================================================================

mcCntlGetComputerID
mcCntlGetComputerID
C/C++ Syntax:
int mcCntlGetComputerID(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetComputerID(
		number mInst)
Description:
Retrieve the computer ID(s) for the current host PC.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the ID(s).
bufSize
The size of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Depending on the number of Ethernet cards in the PC, this functions may return more than one ID.  If more than one ID is returned, they will be delimited by tab characters.
Usage:
// Get the ID(s) for this host
MINSTANCE mInst = 0;
int rc = mcCntlGetComputerID(mInst, buf, sizeof(buf));
if (rc == MERROR_NOERROR) {
// Parse buf to get the ID(s)
}



================================================================================
[84/904] mcCntlGetCoolantDelay
Source: CATmcCntlGetCoolantDelay.htm
================================================================================

mcCntlGetCoolantDelay
mcCntlGetCoolantDelay
C/C++ Syntax:
int mcCntlGetCoolantDelay(
		MINSTANCE mInst, 
		double *secs);
LUA Syntax:
sec, rc = mc.mcCntlGetCoolantDelay(
		number mInst)
Description:
Get the coolant delay time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
an address of a double to receive the coolant delay.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the coolant delay.
MINSTANCE mInst = 0;
double secs;
int rc = mcCntlGetCoolantDelay(mInst, &secs);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[85/904] mcCntlGetCwd
Source: CATmcCntlGetCwd.htm
================================================================================

mcCntlGetCwd
mcCntlGetCwd
C/C++ Syntax:
int mcCntlGetCwd(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetCwd(
		number mInst)
Description:
Retrieves the core's current working directory.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the ID(s).
bufSize
The size of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get current working directory.
MINSTANCE mInst = 0;
char curDir[255];
int rc = mcCntlGetCwd(mInst, curDir, sizeof(curDir));
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[86/904] mcCntlGetDiaMode
Source: CATmcCntlGetDiaMode.htm
================================================================================

mcCntlGetDiaMode
mcCntlGetDiaMode
C/C++ Syntax:
int mcCntlGetDiaMode(
		MINSTANCE mInst, 
		BOOL *dia);
LUA Syntax:
dia, rc = mc.mcCntlGetDiaMode(
		number mInst)
Description:
Retrieve the lathe diameter mode.
Parameters:
Parameter
Description
mInst
The controller instance.
dia
The address of a BOOL that receives the diameter mode.  (TRUE is diameter mode
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Only valid when the control is in lathe (turn) mode.
Usage:
// Get the lathe diameter mode.
MINSTANCE mInst = 0;
BOOL Dia;
int rc = mcCntlGetDiaMode(mInst, &Dia);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[87/904] mcCntlGetDistToGo
Source: CATmcCntlGetDistToGo.htm
================================================================================

mcCntlGetDistToGo
mcCntlGetDistToGo
C/C++ Syntax:
int mcCntlGetDistToGo(
	MINSTANCE mInst, 
	int axisId, 
	double *togo);
LUA Syntax:
togo, rc = int mcCntlGetDistToGo(
	number mInst, 
	number axisId)
Description:
Returns the distance from the end point of a move in current block.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis from which to to get the distance.
togo
A pointer to a double to receive the distance left in current move.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Only used when running G code.
Usage:
int mInst=0;
int axis = Y_AXIS;
double togo=0;
mcCntlGetDistToGo(mInst, axis, &togo);



================================================================================
[88/904] mcCntlGetEnableFRO
Source: CATmcCntlGetEnableFRO.htm
================================================================================

mcCntlGetEnableFRO
mcCntlGetEnableFRO
C/C++ Syntax:
int mcCntlGetEnableFRO(
		MINSTANCE mInst, 
		BOOL *enable);
LUA Syntax:
eanbled, rc = mc.mcCntlGetEnableFRO(
		number mInst)
Description:
Get the current Feed Rate Override status.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a BOOL to receive the feed rate override satus.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current FRO status
MINSTANCE mInst = 0;
BOOL enabled;
int rc = mcCntlGetEnableFRO(mInst, &enabled);
if (rc == MERROR_NOERROR) {
// Success!
if (enabled == TRUE) {
// Feed Rate Override is enabled!
} else {
// Feed Rate Override is disabled!
}
}



================================================================================
[89/904] mcCntlGetFRO
Source: CATmcCntlGetFRO.htm
================================================================================

mcCntlGetFRO
mcCntlGetFRO
C/C++ Syntax:
int mcCntlGetFRO(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcCntlGetFRO(
		number mInst)
Description:
Get the current Feed Rate Override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The Address of a double to receive the feed rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current FRO
MINSTANCE mInst = 0;
double fro;
int rc = mcCntlGetFRO(mInst, &fro);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[90/904] mcCntlGetGcodeFileName
Source: CATmcCntlGetGcodeFileName.htm
================================================================================

mcCntlGetGcodeFileName
mcCntlGetGcodeFileName
C/C++ Syntax:
int mcCntlGetGcodeFileName(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetGcodeFileName(
		number mInst)
Description:
Retrieve he current G code file name.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffere to receive the G code file name.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
An empty string is returned if there is no G code file loaded.
Usage:
// Get the currently loaded G code file name.
MINSTANCE mInst = 0;
char gCodeFileName[255];
int rc = mcCntlGetGcodeFileName(mInst, gCodeFileName, sizeof(gCodeFileName)); 
if (rc == MERROR_NOERROR) {
// Success.
}



================================================================================
[91/904] mcCntlGetGcodeLine
Source: CATmcCntlGetGcodeLine.htm
================================================================================

mcCntlGetGcodeLine
mcCntlGetGcodeLine
C/C++ Syntax:
int mcCntlGetGcodeLine(
		MINSTANCE mInst, 
		int LineNumber, 
		char *buf, 
		long bufSize);
LUA Syntax:
buff, rc = mc.mcCntlGetGcodeLine(
		number mInst, 
		number LineNumber)
Description:
Get the line of Gcode from the loaded gcode file.
Parameters:
Parameter
Description
mInst
The controller instance.
LineNumber
The desired line number from the Gcode file.
buf
The address of a character buffer that recieves the Gcode line.
bufSize
The size of the receiving character buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
LineNumber
is out of range
Notes:
Used to get the gocde file lines to display
Usage:
int mInst=0;
int LineNumber = 5;
char gline[128];
gline[0] = '0';
mcCntlGetGcodeLine(mInst, LineNumber, gline , 128);
// Get line number 5 from the Gocde file loaded into controller 0.



================================================================================
[92/904] mcCntlGetGcodeLineCount
Source: CATmcCntlGetGcodeLineCount.htm
================================================================================

mcCntlGetGcodeLineCount
mcCntlGetGcodeLineCount
C/C++ Syntax:
int mcCntlGetGcodeLineCount(
		MINSTANCE mInst, 
		double *count);
LUA Syntax:
count, rc = mc.mcCntlGetGcodeLineCount(
		number mInst)
Description:
Get the number of lines in the Gcode file.
Parameters:
Parameter
Description
mInst
The controller instance.
count
The address of a double to receive the number of lines in the G code file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The number of lines in the file may not be the number of blocks or moves to be done because of sub routines and canned cycles.
Usage:
int mInst=0;
double count=0;
mcCntlGetGcodeLineCount(mInst, &count);



================================================================================
[93/904] mcCntlGetGcodeLineNbr
Source: CATmcCntlGetGcodeLineNbr.htm
================================================================================

mcCntlGetGcodeLineNbr
mcCntlGetGcodeLineNbr
C/C++ Syntax:
int mcCntlGetGcodeLineNbr(
		MINSTANCE mInst, 
		double *val);
LUA Syntax:
val, rc = mc.mcCntlGetGcodeLineNbr(
		number mInst)
Description:
Returns the line number of the current move being made.
Parameters:
Parameter
Description
mInst
The controller instance.
val
The address of a double to receive the G code line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function will return the next line that will be run if G code is not running.
Usage:
int mInst=0;
double dline=0;
mcCntlGetGcodeLineNbr(mInst, &dline);
//Get the current running line number



================================================================================
[94/904] mcCntlGetInstanceHandle
Source: CATmcCntlGetInstanceHandle.htm
================================================================================

mcCntlGetInstanceHandle
mcCntlGetInstanceHandle
C/C++ Syntax:
int mcCntlGetInstanceHandle(MINSTANCE mInst, 
                            const char *owner, 
                            HMINSTANCE *hInst);
LUA Syntax:
hInst, rc = mc.mcCntlGetInstanceHandle(
                                       number mInst, 
                                       string owner)
or

hInst = mc.mcGetInstance(string owner)
Description:
Returns a HMINSTANCE handle that can be used in place of a MISNTANCE parameter.  If API calls are made with a HMINSTANCE parameter, logging can trace from where the the API call came.
Parameters:
Parameter
Description
mInst
The controller instance.
owner
A string buffer naming that is associated with the returned HMINSANCE.
hInst
The address of a HMINSTANCE variable to receive the new handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function will return a HMINSTANCE based on the passed in MINSTANCE and owner variables.
The instance number can still be gleaned from an instance handle.  The instance handle is 4 bytes wide with the instance number being the lower 8 bytes.
MINSTANCE mInst = hInst & 0x000000FF;
Usage:
MINSTANCE mInst=0;
HMINSTANCE hInst;
mcCntlGetInstanceHandle(mInst, "My Description", &hInst);
mcCntlCycleStart(hInst);
//Will show in the log as coming from "My Description"



================================================================================
[95/904] mcCntlGetLastError
Source: CATmcCntlGetLastError.htm
================================================================================

mcCntlGetLastError
mcCntlGetLastError
C/C++ Syntax:
int mcCntlGetLastError(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLastError(
		MINSTANCE mInst)
Description:
Retrieve the last error/status message from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the next error message on the error message stack.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
was NULL or
bufSize
was 0.
MERROR_NODATA
No message was available.
Notes:
Calling this function removes the returned message from the stack.
Usage:
int mInst=0;
char error[128];
mcCntlGetLastError(mInst, error, 128);
// Receives the last error messge for controller instance 0.



================================================================================
[96/904] mcCntlGetLastLogMsg
Source: CATmcCntlGetLastLogMsg.htm
================================================================================

mcCntlGetLastLogMsg
mcCntlGetLastLogMsg
C/C++ Syntax:
int mcCntlGetLastLogMsg(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLastLogMsg(
		number mInst)
Description:
Retrieve the last log message from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the next log message on the log message stack.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
was NULL or
bufSize
was 0.
MERROR_NODATA
No log message was available.
Notes:
Calling this function removes the returned message from the log stack.
Usage:
int mInst=0;
char msg[128];
mcCntlGetLastLogMsg(mInst, msg, 128);
// Receives the last log messge for controller instance 0.



================================================================================
[97/904] mcCntlGetLicenseData
Source: CATmcCntlGetLicenseData.htm
================================================================================

mcCntlGetLicenseData
mcCntlGetLicenseData
C/C++ Syntax:
int mcCntlGetLicenseData(
		MINSTANCE mInst, 
		int index, 
		char *buf, 
		long bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLicenseData(
		number mInst, 
		number index)
Description:
Retrieves the license data for the specified index.
Parameters:
Parameter
Description
mInst
The controller instance.
index
The index of the license data to retrieve.
buf
The address of a character buffer that recieves the Gcode line.
bufSize
The size of the receiving character buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
index
is out of range
MERROR_NODATA
There is no license data for the specidied index.
Notes:
Usage:
// Get the license data at index 1.
MINSTANCE mInst = 0;
long len;
char *data;
long dataLen = 0;
int index = 1;
int rc = mcCntlGetLicenseDataLen(mInst, index, &dataLen);
if (rc == MERROR_NOERROR && dataLen > 0) {
	data = (char *)malloc(dataLen + 1);
	memset(data, 0, dataLen + 1);
	rc =
mcCntlGetLicenseData(mInst, index, data, dataLen)
;
	if (rc == MERROR_NOERROR) {
// Success!
}
}



================================================================================
[98/904] mcCntlGetLicenseDataLen
Source: CATmcCntlGetLicenseDataLen.htm
================================================================================

mcCntlGetLicenseDataLen
mcCntlGetLicenseDataLen
C/C++ Syntax:
int mcCntlGetLicenseDataLen(
		MINSTANCE mInst, 
		int index, 
		long *bufSize);
LUA Syntax:
bufSize, rc = mc.mcCntlGetLicenseData(
		number mInst, 
		number index)
Description:
Retrieves the license data length for the specified index.
Parameters:
Parameter
Description
mInst
The controller instance.
index
The index of the license data to retrieve.
bufSize
The address of a long to receive the data length..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
index
is out of range
MERROR_NODATA
There is no license data for the specidied index.
Notes:
Usage:
// Get the license data at index 1.
MINSTANCE mInst = 0;
long len;
char *data;
long dataLen = 0;
int index = 1;
int rc =
mcCntlGetLicenseDataLen(mInst, index, &dataLen)
;
if (rc == MERROR_NOERROR && dataLen > 0) {
	data = (char *)malloc(dataLen + 1);
	memset(data, 0, dataLen + 1);
	rc = mcCntlGetLicenseData(mInst, index, data, dataLen);
	if (rc == MERROR_NOERROR) {
// Success!
}
}



================================================================================
[99/904] mcCntlGetLicenseModules
Source: CATmcCntlGetLicenseModules.htm
================================================================================

mcCntlGetLicenseModules
mcCntlGetLicenseModules
C/C++ Syntax:
int mcCntlGetLicenseModules(
		MINSTANCE mInst, 
		unsigned long long *modules)
LUA Syntax:
N/A
Description:
Retrieve the 64 bit number comprising the licensed modules.
Parameters:
Parameter
Description
mInst
The controller instance.
modules
The address of a unsigned lon long to receive the licensed modules..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Retrieve the licensed modules.
MINSTANCE mInst = 0;
unsigned long long modules = 0;
int rc = mcCntlGetLicenseModules(mInst, &modules);



================================================================================
[100/904] mcCntlGetLocalComment
Source: CATmcCntlGetLocalComment.htm
================================================================================

mcCntlGetLocalComment
mcCntlGetLocalComment
int mcCntlGetLocalComment(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		char *buf
		size_t bufSize);
LUA Syntax:
comment, rc = mc.mcCntlGetLocalComment(
		number mInst, 
		number hVars)
Description:
Retrieve the comment that may have been on the block line.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
buf
The address of a buffer to receive the comment text.
bufSize
The size of the supplied buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
    local inst = mc.mcGetInstance()
-- Get the current instance
local nilPoundVar = mc.mcCntlGetPoundVar(inst, 0)
    local comment =
mc.mcCntlGetLocalComment
(inst, hVars)
    local message = ""
    if hVars ~= nil then
        local flag, retval, rc
        flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
        if (flag == 1) then 
            retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
            if rc == mc.MERROR_NOERROR then 
                message = message .. "A" .. ":" .. tostring(retval) .. ", "
            end
        end
        flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
        if (flag == 1) then 
            retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
            if rc == mc.MERROR_NOERROR then 
                message = message .. "B" .. ":" .. tostring(retval)
            end
        end
        mc.mcCntlSetLastError(inst, message)
    end
end

if (mc.mcInEditor() == 1) then
--We are testing the script in the editor.
--Fab up some paramters to pass to our m700() function.
local inst = mc.mcGetInstance()
    local hParams, rc =
mc.mcCntlCreateLocalVars
(inst, "A23 B6 (my Comment)")
--Like we are testing "M700 A23 B6 (my Comment)".
m700(hParams)
-- Call m700 with hParams.
end



================================================================================
[101/904] mcCntlGetLocalVar
Source: CATmcCntlGetLocalVar.htm
================================================================================

mcCntlGetLocalVar
mcCntlGetLocalVar
int mcCntlGetLocalVar(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		int varNumber, 
		doubl *retval);
LUA Syntax:
retval, rc = mc.mcCntlGetLocalVar(
		number mInst, 
		number hVars, 
		number varNumber)
Description:
Retrieve the specified local variable.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
varNumber
The index of the local variable flage to retrieve.
retval
An address of a double integer to receive the value of the specified local variable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
varNumber
is out of range or
retval
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
	local inst = mc.mcGetInstance() -- Get the current instance
	local nilPoundVar = mc.mcCntlGetPoundVar(inst, hVars, 0)
	local message = ""
	if hVars ~= nil then
		local flag, retval, rc
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "A" .. ":" .. tostring(retval) .. ", "
			end
		end
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "B" .. ":" .. tostring(retval)
			end
		end
		mc.mcCntlSetLastError(inst, message)
	end
end

if (mc.mcInEditor() == 1) then
    m700(nil)
-- We can't test this in the editor!
end



================================================================================
[102/904] mcCntlGetLocalVarFlag
Source: CATmcCntlGetLocalVarFlag.htm
================================================================================

mcCntlGetLocalVarFlag
mcCntlGetLocalVarFlag
C/C++ Syntax:
int mcCntlGetLocalVarFlag(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		int varNumber, 
		int *retval);
LUA Syntax:
retval, rc = mc.mcCntlGetLocalVarFlag(
		number mInst, 
		number hVars, 
		number varNumber)
Description:
Retrieve the specified local variable.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
varNumber
The index of the local variable flage to retrieve.
retval
An address of an integer to receive the value of the specified local variable flag.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
varNumber
is out of range or
retval
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
	local inst = mc.mcGetInstance() -- Get the current instance
	local nilPoundVar = mc.mcCntlGetPoundVar(inst,0)
	local message = ""
	if hVars ~= nil then
		local flag, retval, rc
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "A" .. ":" .. tostring(retval) .. ", "
			end
		end
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "B" .. ":" .. tostring(retval)
			end
		end
		mc.mcCntlSetLastError(inst, message)
	end
end

if (mc.mcInEditor() == 1) then
    m700(nil)
-- We can't test this in the editor!
end



================================================================================
[103/904] mcCntlGetLogging
Source: CATmcCntlGetLogging.htm
================================================================================

mcCntlGetLogging
mcCntlGetLogging
C/C++ Syntax:
int mcCntlGetLogging(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcCntlGetLogging(
		number mInst)
Description:
Determine if logging is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
(enabled, The address of a BOOL to receive the logging state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
is NULL.
Notes:
None.
Usage:
// Check is logging is enabled.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcCntlGetLogging(mInst, &enabled);
if (rc == MERROR_NOERROR && enabled == TRUE) {
// Logging is enabled!
}



================================================================================
[104/904] mcCntlGetMachDir
Source: CATmcCntlGetMachDir.htm
================================================================================

mcCntlGetMachDir
mcCntlGetMachDir
C/C++ Syntax:
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[105/904] mcCntlGetMistDelay
Source: CATmcCntlGetMistDelay.htm
================================================================================

mcCntlGetMistDelay
mcCntlGetMistDelay
C/C++ Syntax:
int mcCntlGetMistDelay(
		MINSTANCE mInst, 
		double *secs);
LUA Syntax:
secs, rc = mcCntlGetMistDelay(
		number mInst)
Description:
Get the mist delay time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
an address of a double to receive the mist delay.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mist delay.
MINSTANCE mInst = 0;
double secs;
int rc = mcCntlGetMistDelay(mInst, &secs);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[106/904] mcCntlGetModalGroup
Source: CATmcCntlGetModalGroup.htm
================================================================================

mcCntlGetModalGroup
mcCntlGetModalGroup
C/C++ Syntax:
int mcCntlGetModalGroup(
		MINSTANCE mInst, 
		int group, 
		double *val);
LUA Syntax:
val, rc = mc.mcCntlGetModalGroup(
		number mInst, 
		number group)
Description:
Get the modal group code for the specified group.
Parameters:
Parameter
Description
mInst
The controller instance.
group
A integer specifying the modal group.
val
The address of a double to receive the modal group value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
val
is NULL or
group
is out of range.
Notes:
If the modal group is not active, -1 is returned.
Usage:
// Get the modal code for modal group 1.
MINSTANCE mInst = 0;
int rc = mcCntlGetModalGroup(mInst, 1); 
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[107/904] mcCntlGetMode
Source: CATmcCntlGetMode.htm
================================================================================

mcCntlGetMode
mcCntlGetMode



================================================================================
[108/904] mcCntlGetOffset
Source: CATmcCntlGetOffset.htm
================================================================================

mcCntlGetOffset
mcCntlGetOffset
C/C++ Syntax:
int mcCntlGetOffset(
		MINSTANCE mInst, 
		int axisId, 
		int type, 
		double *offset);
LUA Syntax:
offset, rc = mc.mcCntlGetOffset(
		number mInst, 
		number axisId, 
		number type)
Description:
Retrieve the offset specified by type for the axis specified by axisId
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An Interger specifying the axis ID. (X_AXIS, Y_AXIS, Z_AXIS)
type
An Interger specifying the offset type. (MC_OFFSET_FIXTURE, MC_OFFSET_AXIS
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[109/904] mcCntlGetOptionalStop
Source: CATmcCntlGetOptionalStop.htm
================================================================================

mcCntlGetOptionalStop
mcCntlGetOptionalStop
C/C++ Syntax:
int mcCntlGetOptionalStop(
		MINSTANCE mInst, 
		BOOL *stop);
LUA Syntax:
stop, rc = mc.mcCntlGetOptionalStop(
		number mInst)
Description:
Retrieve the state of optional stop.
Parameters:
Parameter
Description
mInst
The controller instance.
stop
The address of a BOOL to contain the optional stop state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stop
is NULL.
Notes:
None.
Usage:
// See if optional stop is in effect.
MINSTANCE mInst = 0;
BOOL opStop = FALSE;
int rc = mcCntlGetOptionalStop(mInst, &opStop);
if (rc == MERROR_NOERROR) {
	if (opStop == TRUE) {
// Optional Stop is in effect!
	} else {
// Optional Stop is not in effect!
	}
}



================================================================================
[110/904] mcCntlGetPoundVar
Source: CATmcCntlGetPoundVar.htm
================================================================================

mcCntlGetPoundVar
mcCntlGetPoundVar
C/C++ Syntax:
int mcCntlGetPoundVar(
		MINSTANCE mInst, 
		int param, 
		double *value);
LUA Syntax:
value, rc = mc.mcCntlGetPoundVar(
		number mInst, 
		number param)
Description:
Get the value of a system variable (pound variable).
Parameters:
Parameter
Description
mInst
The controller instance.
param
An integer specifying a system variable.
*value
The address of a double to receive the value of the system variable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
param
is out of range.
Notes:
This is a good tool to assist in debugging G code files with system variable (pound variable) programing.
Note that system variables can reflect values in the future because of the look ahead buffer.
Usage:
int mInst=0;
double PoundVar=50;
dobule Value=0;
;// Get the value of #50.
mcCntlGetPoundVar(mInst, PoundVar, &Value);



================================================================================
[111/904] mcCntlGetRRO
Source: CATmcCntlGetRRO.htm
================================================================================

mcCntlGetRRO
mcCntlGetRRO
C/C++ Syntax:
int mcCntlGetRRO(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcCntlGetRRO(
		number mInst)
Description:
Get the current Feed Rate Override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The Address of a double to receive the rapid rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current RRO
MINSTANCE mInst = 0;
double rro;
int rc = mcCntlGetRRO(mInst, &rro);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[112/904] mcCntlGetRegister
Source: CATmcCntlGetRegister.htm
================================================================================

mcCntlGetRegister
mcCntlGetRegister
C/C++ Syntax:
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[113/904] mcCntlGetRunTime
Source: CATmcCntlGetRunTime.htm
================================================================================

mcCntlGetRunTime
mcCntlGetRunTime
C/C++ Syntax:
int mcCntlGetRunTime(
		MINSTANCE mInst, 
		double *time);
LUA Syntax:
int mcCntlGetRunTime(MINSTANCE mInst, double *time)
Description:
Get the control run time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
time
The address of a double to receive the run time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
time
is NULL.
Notes:
None.
Usage:
// Get the control run time in seconds.
MINSTANCE mInst = 0;
double time;
int rc = mcCntlGetRunTime(mInst, &time);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[114/904] mcCntlGetSingleBlock
Source: CATmcCntlGetSingleBlock.htm
================================================================================

mcCntlGetSingleBlock
mcCntlGetSingleBlock
C/C++ Syntax:
int mcCntlGetSingleBlock(
		MINSTANCE mInst, 
		BOOL *sbState);
LUA Syntax:
sbState, rc = mc.mcCntlGetSingleBlock(
		number mInst)
Description:
Get the state of Single block.
Parameters:
Parameter
Description
mInst
The controller instance.
sbState
The address of a BOOL to receive the state of single block. (MC_ON/TRUE, MC_OFF/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sbState
is NULL.
Notes:
Used to display the state of single block to the user.
Usage:
// Get the state of single block.
int mInst=0;
BOOL IsOn = FALSE;
mcCntlGetSingleBlock(mInst, &IsOn);



================================================================================
[115/904] mcCntlGetSpindleSpeed
Source: CATmcCntlGetSpindleSpeed.htm
================================================================================

mcCntlGetSpindleSpeed
mcCntlGetSpindleSpeed
C/C++ Syntax:
mcCntlSetSpindleSpeed(
	MINSTANCE mInst, 
	double secs);
Notes:
Not used at this time
END_FUNTION



================================================================================
[116/904] mcCntlGetState
Source: CATmcCntlGetState.htm
================================================================================

mcCntlGetState
mcCntlGetState
C/C++ Syntax:
int mcCntlGetState(
		MINSTANCE mInst, 
		mcState *state);
LUA Syntax:
mcState, rc = mc.mcCntlGetState(
		MINSTANCE mInst)
Description:
Get the current controller state.
Parameters:
Parameter
Description
mInst
The controller instance.
state
The address of a mcState variable to receive the controller state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
state
is NULL.
Notes:
None.
Usage:
// Get the state of controller instance 0.
MINSTANCE mInst = 0;
mcState state;
char stateName[80];
int rc =
mcCntlGetState(mInst, &state)
;
if (rc == MERROR_NOERROR) {
// Success!
rc = mcCntlGetStateName(mInst, state, stateName, sizeof(stateName));
}



================================================================================
[117/904] mcCntlGetStateName
Source: CATmcCntlGetStateName.htm
================================================================================

mcCntlGetStateName
mcCntlGetStateName
C/C++ Syntax:
int mcCntlGetStateName(
		MINSTANCE mInst, 
		mcState state, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetStateName(
		number mInst, 
		number state)
Description:
Retrieve the state name for the given mcState.
Parameters:
Parameter
Description
mInst
The controller instance.
state
A mcState variable specifying the state.
buf
A string buffer to receive the state name..
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufSize
is less than or equal to zero.
MERROR_INVALID_STATE
state
is out of range.
Notes:
None.
Usage:
// Get the state name for controller instance 0.
MINSTANCE mInst = 0;
mcState state;
char stateName[80];
int rc = mcCntlGetState(mInst, &state);
if (rc == MERROR_NOERROR) {
// Success!
rc =
mcCntlGetStateName(mInst, state, stateName, sizeof(stateName))
;
}



================================================================================
[118/904] mcCntlGetStats
Source: CATmcCntlGetStats.htm
================================================================================

mcCntlGetStats
mcCntlGetStats
C/C++ Syntax:
int mcCntlGetStats(
		MINSTANCE mInst, 
		mstats_t *stats);
LUA Syntax:
N/A
Description:
Retrieve the control statistics.
Parameters:
Parameter
Description
mInst
The controller instance.
stats
The address of a mstats_t variable to receive the statistics.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stats
is NULL.
Notes:
struct mstats {
	int cannon_buf_depth;
	int la_cannon_buf_depth;
	double totalTime;
	double sessionTime;
	double spindleTime;
	long m3count;
	long m4count;
	long m6count;
	double xDistance;
	double yDistance;
	double zDistance;
	double aDistance;
	double bDistance;
	double cDistance;
};
typedef struct mstats mstats_t;
Usage:
// Get controller statistics.
MINSTANCE mInst = 0;
mstats_t stats;
int rc = mcCntlGetStats(mInst, &stats);
if (rc == MERROR_NOERROR) {
	printf("M3 count = %dn", stats.m3Count);
}



================================================================================
[119/904] mcCntlGetToolOffset
Source: CATmcCntlGetToolOffset.htm
================================================================================

mcCntlGetToolOffset
mcCntlGetToolOffset
C/C++ Syntax:
int mcCntlGetToolOffset(
		MINSTANCE mInst, 
		int axisId, 
		double *offset);
LUA Syntax:
offset, rc = mc.mcCntlGetToolOffset(
		number mInst, 
		number axisId)
Description:
Get the tool offset distance for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
offset
The address of a double that receives the offset distance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
offset
is NULL.
Notes:
None
Usage:
int mInst=0;
int toolnum = 5;
double val = 0;
mcCntlGetToolOffset(mInst, Z_AXIS, &val);
// Get the tool offset distance for the Z axis..



================================================================================
[120/904] mcCntlGetUnitsCurrent
Source: CATmcCntlGetUnitsCurrent.htm
================================================================================

mcCntlGetUnitsCurrent
mcCntlGetUnitsCurrent
C/C++ Syntax:
int mcCntlGetUnitsCurrent(
		MINSTANCE mInst, 
		int *units);
LUA Syntax:
units, rc = mc.mcCntlGetUnitsCurrent(
		number mInst)
Description:
Get the current machine units.
Parameters:
Parameter
Description
mInst
The controller instance.
units
The address of an integer to receive the current machine units.  (200 = inches
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
units
is NULL.
Notes:
None.
Usage:
// Get the current machine units.
MINSTANCE mInst = 0;
int units;
int rc = mcCntlGetUnitsCurrent(mInst, &units);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[121/904] mcCntlGetUnitsDefault
Source: CATmcCntlGetUnitsDefault.htm
================================================================================

mcCntlGetUnitsDefault
mcCntlGetUnitsDefault
C/C++ Syntax:
int mcCntlGetUnitsDefault(
		MINSTANCE mInst, 
		int *units);
LUA Syntax:
units, rc = mc.mcCntlGetUnitsDefault(
		number mInst)
Description:
Get the default machine units.
Parameters:
Parameter
Description
mInst
The controller instance.
units
The address of an integer to receive the default machine units.  (200 = inches
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
units
is NULL.
Notes:
None.
Usage:
// Get the default machine units.
MINSTANCE mInst = 0;
int units;
int rc = mcCntlGetUnitsDefault(mInst, &units);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[122/904] mcCntlGetValue
Source: CATmcCntlGetValue.htm
================================================================================

mcCntlGetValue
mcCntlGetValue
C/C++ Syntax:
int mcCntlGetValue(
		MINSTANCE  mInst, 
		int valId, 
		int param, 
		double *value);
LUA Syntax:
value, rc = mc.mcCntlGetValue(
		number mInst, 
		number valId, 
		number param)
Description:
Get the value of a core variable.
Parameters:
Parameter
Description
mInst
The controller instance.
valId
An integer specifying the core variable (VAL_ prefix in MachAPI.h).
param
An integer specifying the parameter for the core variable
value
The address of a double to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The value specified by
valId
is not implemented.
various
Depending upon the value specified by
valId
.
Notes:
This is for ArtSoft's use.  It is a generic interface for retrieving values from the core.  Use of this API function is dicouraged in favor of using one of the clearly named API calls to retrieve values for GUI and plugin programming.
Usage:
int mInst = 0;
int motor = 1;
double value = 0;
// Get the motor velocity of motor1.
int rc = mcCntlGetValue(mInst, VAL_MOTOR_VEL, motor, &value);



================================================================================
[123/904] mcCntlGetVersion
Source: CATmcCntlGetVersion.htm
================================================================================

mcCntlGetVersion
mcCntlGetVersion
C/C++ Syntax:
int mcCntlGetVersion(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetVersion(
		number mInst)
Description:
Retrieve the core version string.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to recevive the core version string.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufSize
is 0.
Notes:
None.
Usage:
// Get the core version string.
MINSTANCE mInst = 0;
char ver[80];
int rc = mcCntlGetVersion(mInst, ver, sizeof(ver)):
if (rc == MERROR_NOERROR) {
	printf("The core version is %sn", ver);
}



================================================================================
[124/904] mcCntlGotoZero
Source: CATmcCntlGotoZero.htm
================================================================================

mcCntlGotoZero
mcCntlGotoZero
C/C++ Syntax:
int mcCntlGotoZero(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlGotoZero(
		number mInst)
Description:
Move the X,Y,A,B,C and then the Z axis to zero of the current fixture offset.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This can also be done by sending in a G code move.
Usage:
int mInst = 0;
mcCntlGotoZero(mInst);
// Move controller instance 0 to x,y,z,a,b,c zero.



================================================================================
[125/904] mcCntlInit
Source: CATmcCntlInit.htm
================================================================================

mcCntlInit
mcCntlInit
C/C++ Syntax:
MINSTANCE mcCntlInit(
		const char *ProfileName, 
		int ControllerID);
LUA Syntax:
N/A
Description:
Init the instance specified by
ControllerID
with the profile specified by
ProfileName
.
Parameters:
Parameter
Description
ProfileName
Profile that is to be loaded for the controller instance.
ControllerID
The controller instance to start. (must start with zero)
Returns:
Return Code
Description
The controller instance.
0 to 5
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MACHINIT_INVALID_ARG
ProfileName
is NULL.
MACHINIT_CONTROLLER_INUSE
The controller instance is in use, try the next one.
Notes:
Only GUIs will use this API function.  It must be called at the start of the app to initialize at least one controller instance.  All other API calls will fail with MERROR_INVALID_INSTANCE until an instance is initialized with mcCntlInit().
Usage:
MINSTANCE mInst;
mInst = mcCntlInit("Mach4Mill", mInst);
if (mInst >= 0) {
// A valid instance has been initialized!
}



================================================================================
[126/904] mcCntlIsInCycle
Source: CATmcCntlIsInCycle.htm
================================================================================

mcCntlIsInCycle
mcCntlIsInCycle
C/C++ Syntax:
int mcCntlIsInCycle(
		MINSTANCE mInst, 
		BOOL *cycle);
LUA Syntax:
cycle, rc = mc.mcCntlIsInCycle(
		number mInst)
Description:
Used to see if a G code file is running.
Parameters:
Parameter
Description
mInst
The controller instance.
cycle
The address of a BOOL to receive the in cycle state (TRUE, FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
cycle
is NULL.
Notes:
This call is useful for showing the user if the control is processing a G code file.
Usage:
int mInst = 0;
BOOL InCycle = FALSE;
bool RunningFile = false;

int rc = mcCntlIsInCycle(mInst, &InCycle);
// See if a G code file is running.
if(rc == MERROR_NOERROR && InCycle == TRUE){
    RunningFile = true;
}



================================================================================
[127/904] mcCntlIsStill
Source: CATmcCntlIsStill.htm
================================================================================

mcCntlIsStill
mcCntlIsStill
C/C++ Syntax:
int mcCntlIsStill(
		MINSTANCE mInst, 
		BOOL *still);
LUA Syntax:
still, rc = mc.mcCntlIsStill(
		number mInst)
Description:
Determine if all controlled axes are still.
Parameters:
Parameter
Description
mInst
The controller instance.
still
The address of a BOOL to receive the still state of the control.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
still
is NULL.
Notes:
This function cannot be used to determine if the control is finished processing G code.  For example, the call may return TRUE if the control is in a dwell (G04).
Usage:
// See if the control axes are still.
MINSTANCE mInst = 0;
BOOL still;
int rc = mcCntlIsStill(mInst, &still);
if (rc == MERROR_NOERROR) {
	if (still == TRUE) {
// All axes are still.
} else {
// At least one axis is moving!
}
}



================================================================================
[128/904] mcCntlLoadGcodeFile
Source: CATmcCntlLoadGcodeFile.htm
================================================================================

mcCntlLoadGcodeFile
mcCntlLoadGcodeFile
C/C++ Syntax:
int mcCntlLoadGcodeFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcCntlLoadGcodeFile(
		number mInst, 
		stringFileToLoad)
Description:
Load a G code file.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer containing the Gcode file name.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
FileToLoad
is NULL.
MERROR_FILE_EXCEPTION
Exception while loading file.
MERROR_FILE_EMPTY
No data a in file.
MERROR_FILE_SHARING
Violation sharing file.
MERROR_FILE_INVALID
Not a valid file type.
MERROR_FILE_BADSIZE
Invalid file size (over 1.5GB).
MERROR_FILE_NOT_FOUND
The file cannot be found in the file system.
MERROR_FILE_BADFORMAT
The file had a line end without a new line character.  The file may be incomplete.
Notes:
Used to load a file into a controller instance.
Usage:
int mInst=0;
char File[128] = "C:SomeGocdefile.tap";
int rc = mcCntlLoadGcodeFile(mInst, &char);
// Load SomeGocdefile.tap file.
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[129/904] mcCntlLoadGcodeString
Source: CATmcCntlLoadGcodeString.htm
================================================================================

mcCntlLoadGcodeString
mcCntlLoadGcodeString
C/C++ Syntax:
int mcCntlLoadGcodeString(
		MINSTANCE mInst, 
		const char *gCode);
LUA Syntax:
rc = mc.mcCntlLoadGcodeString(
		MINSTANCE mInst, 
		const char *gCode);
Description:
Loads G code from a string.
Parameters:
Parameter
Description
mInst
The controller instance.
gCode
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
gCode
is NULL.
Notes:
This function will load G code from a string instead of a file. It is primarily used for static test or repeating operations.
Usage:
// Load G code from a string.
MINSTANCE mInst = 0;
char *gCode = "%nO1001nG90 G94 G91.1 G40 G49 G17nG20"
int rc = mcCntlLoadGcodeString(mInst, gCode);



================================================================================
[130/904] mcCntlLog
Source: CATmcCntlLog.htm
================================================================================

mcCntlLog
mcCntlLog
C/C++ Syntax:
int mcCntlLog(
	MINSTANCE mInst, 
	const char *message, 
	const char *file, 
	int line);
LUA Syntax:
rc = mc.mcCntlLog(
	number mInst, 
	string message, 
	string file, 
	number line)
Description:
Log a message to the core log.
Parameters:
Parameter
Description
mInst
The controller instance.
message
A string buffer containing the message to be logged.
file
A string buffer specifying the source file name.
line
An integer specifying the source line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Logging must be enabled with mcCntlSetLogging() in order for the messages to show in the diagnostic log.
If
file
is NULL, no source file or line information is dispalyed in the log for C/C++ environments.  If
line
is -1, no source file or line information is dispalyed in the log for scripting environments.
Usage:
// Load G code from a string.
MINSTANCE mInst = 0;
BOOL test = TRUE;
int rc;
if (test == TRUE) {
// File and line info in the log.
mcCntlLog(mInst, "test == TRUE!", __FILE__, __LINE__);
} else {
// No file and line info in the log.
mcCntlLog(mInst, "test == FALSE!", NULL, 0);
}



================================================================================
[131/904] mcCntlMachineStateClear
Source: CATmcCntlMachineStateClear.htm
================================================================================

mcCntlMachineStateClear
mcCntlMachineStateClear
C/C++ Syntax:
int mcCntlMachineStateClear(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStateClear(
		number mInst)
Description:
Clears the machine control state stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to clear a stack of control states and is primarily used in a scripting environment.  Control states are pushed on a stack with mcCntlMachineStatePush().
Usage:
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- clear the machine state stack and leave the machine in G21 and G91 modes.
mc.mcCntlMachineStateClear(inst); 
end



================================================================================
[132/904] mcCntlMachineStatePop
Source: CATmcCntlMachineStatePop.htm
================================================================================

mcCntlMachineStatePop
mcCntlMachineStatePop
C/C++ Syntax:
int mcCntlMachineStatePop(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStatePop(
		number mInst)
Description:
Pops a machine control state off the stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to return the control to a state previously saved on the state stack and is primarily used in a scripting environment.  Control states are pushed (saved) on a stack with mcCntlMachineStatePush().
Usage:
-- LUA example
function test()
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack saving original modes.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- restore the machine state stack to G20 and G90 modes.
mc.mcCntlMachineStatePop(inst);
-- restore the machine state stack to original modes.
mc.mcCntlMachineStatePop(inst); 
end



================================================================================
[133/904] mcCntlMachineStatePush
Source: CATmcCntlMachineStatePush.htm
================================================================================

mcCntlMachineStatePush
mcCntlMachineStatePush
C/C++ Syntax:
int mcCntlMachineStatePush(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStatePush(
		number mInst)
Description:
Pushes the machine control state on the stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to save the control state to a stack of states and is primarily used in a scripting environment.
Usage:
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack saving original modes.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- restore the machine state stack to G20 and G90 modes.
mc.mcCntlMachineStatePop(inst);
-- restore the machine state stack to original modes.
mc.mcCntlMachineStatePop(inst); 
end



================================================================================
[134/904] mcCntlMacroAlarm
Source: CATmcCntlMacroAlarm.htm
================================================================================

mcCntlMacroAlarm
mcCntlMacroAlarm
C/C++ Syntax:
int mcCntlMacroAlarm(
		MINSTANCE mInst
		int error, 
		const char *message);
LUA Syntax:
rc = mc.mcCntlMacroAlarm(
		number mInst
		number error
		string message)
Description:
Forces the control into the ALARM state similar to writing a number to #3000.
Parameters:
Parameter
Description
mInst
The controller instance.
error
The error number.
message
The error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
message
is NULL.
Notes:
This function is used to put the control in the ALARM state.  OSIG_ALARM will be raised and the control will have to be reset to clear the ALARM condition.  This is primarily a scripting function.
Usage:
-- LUA example
function test()
    local inst = mc.mcGetInstance();
    mc.mcCntlMacroAlarm(inst, 19, "Test Alram")
end



================================================================================
[135/904] mcCntlMacroStop
Source: CATmcCntlMacroStop.htm
================================================================================

mcCntlMacroStop
mcCntlMacroStop
C/C++ Syntax:
int mcCntlMacroStop(
		MINSTANCE mInst
		int error, 
		const char *message);
LUA Syntax:
rc = mc.mcCntlMacroStop(
		number mInst
		number error
		string message)
Description:
Forces the control into the IDLE state similar to writing a number to #3006.
Parameters:
Parameter
Description
mInst
The controller instance.
error
The error number.
message
The error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
message
is NULL.
Notes:
This function is used to put the control in the IDLE state.  This is primarily a scripting function.
Usage:
-- LUA example
function test()
    local inst = mc.mcGetInstance();
    mc.mcCntlMacroStop(inst, 19, "Test Stop")
end



================================================================================
[136/904] mcCntlMdiExecute
Source: CATmcCntlMdiExecute.htm
================================================================================

mcCntlMdiExecute
mcCntlMdiExecute
C/C++ Syntax:
int mcCntlMdiExecute(
		MINSTANCE mInst,
		const char *commands);
LUA Syntax:
rc = mc.mcCntlMdiExecute(
		number mInst,
		string commands)
Description:
Used to execute G code commands that are not part of the main G code execution.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer with the line or lines of Gcode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
commands
is NULL.
Notes:
Used to run commands like MDI or script commands.  The function returns immediately without waiting on the G code to proocess.  It is an error to call this function multiple times for each block of G code.   Multiple blocks should be concatenated and separated with new line characters to form a "unit of work".
Usage:
MINSTANCE mInst = 0;
int rc;
// Move the machine back to xy then z zero.
// Correct example.
rc = mcCntlMdiExecute(mInst, "G00 G90 X0.0 Y0.0\nZ0.0");
// Incorrect example.
rc = mcCntlMdiExecute(mInst, "G00 G90 X0.0 Y0.0");
rc = mcCntlMdiExecute(mInst, "Z0.0");



================================================================================
[137/904] mcCntlPluginConfig
Source: CATmcCntlPluginConfig.htm
================================================================================

mcCntlPluginConfig
mcCntlPluginConfig
C/C++ Syntax:
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[138/904] mcCntlPluginDiag
Source: CATmcCntlPluginDiag.htm
================================================================================

mcCntlPluginDiag
mcCntlPluginDiag
C/C++ Syntax:
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[139/904] mcCntlProbeFileClose
Source: CATmcCntlProbeFileClose.htm
================================================================================

mcCntlProbeFileClose
mcCntlProbeFileClose
C/C++ Syntax:
int mcCntlProbeFileClose(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlProbeFileClose(
		number mInst)
Description:
Close the probe data file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Closes a probe data file that was previously opened with mcCntlProbeFileOpen().  This function is primarily used in a scripting environment.
Usage:
-- probe file close LUA macro example.
function m112()
	local inst=mc.mcGetInstance();
	local rc = mc.mcCntlProbeFileClose(inst);
end 

if (mc.mcInEditor() == 1) then
	m112()
end



================================================================================
[140/904] mcCntlProbeFileOpen
Source: CATmcCntlProbeFileOpen.htm
================================================================================

mcCntlProbeFileOpen
mcCntlProbeFileOpen
C/C++ Syntax:
int mcCntlProbeFileOpen(
		MINSTANCE mInst, 
		const char *fileName, 
		const char *format, 
		BOOL overWrite);
LUA Syntax:
rc = mc.mcCntlProbeFileOpen(
		number mInst, 
		string fileName, 
		string format, 
		number overWrite);
Description:
Open a probe data collection file.
Parameters:
Parameter
Description
mInst
The controller instance.
fileName
A string buffer containing the full path of the probe data file to be opened.
format
A string buffer containing the format description for the probe data file.
overWrite
A BOOL specifying if the file should be over written if it exists.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Opens a probe data collection file and specifies the format in which the data is saved.  This function is primarily used in a scripting environment.
The
format
parameter uses subtitutions.  Numbers are formatted with the C/C++ printf style notation.  Axis values are substituted with AXIS_X, AXIS_Y, AXIS_Z, AXIS_A, AXIS_B, and AXIS_C.
Usage:
-- probe file open LUA macro example.
function m111()
	local inst = mc.mcGetInstance();
	local rc = mc.mcCntlProbeFileOpen(inst, 'probetest.csv', '%.4AXIS_X, %.4AXIS_Y,  %.4AXIS_Z\r\n', TRUE);
end 

if (mc.mcInEditor() == 1) then
	m111()
end



================================================================================
[141/904] mcCntlProbeGetStrikeStatus
Source: CATmcCntlProbeGetStrikeStatus.htm
================================================================================

mcCntlProbeGetStrikeStatus
mcCntlProbeGetStrikeStatus
C/C++ Syntax:
int mcCntlProbeGetStrikeStatus(
		MINSTANCE mInst, 
		BOOL *didStrike);
LUA Syntax:
didstrike, rc = mc.mcCntlProbeGetStrikeStatus(
		number mInst)
Description:
Check and see if a probe struck during a probing move.
Parameters:
Parameter
Description
mInst
The controller instance.
didStrike
The address of a BOOL to receive the probe strike status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
didStrike
is NULL.
Notes:
Determine if the probe struck during a probe move.  This function is primarily used in a scripting environment.  Any G31, G31.1, G31.2, or G31.3 will reset the strike status to FALSE.  The status will only be set to TRUE if the probe struck a surface.
Usage:
-- probe get strike status example.
local inst = mc.mcGetInstance()
local didStrike, rc = mc.mcCntlProbeGetStrikeStatus(inst)



================================================================================
[142/904] mcCntlReset
Source: CATmcCntlReset.htm
================================================================================

mcCntlReset
mcCntlReset
C/C++ Syntax:
int mcCntlReset(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlReset(
		number mInst)
Description:
Reset the controller instance to a known state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
A MSG_RESET_CNTL notification is sent to the GUI and plugins.
Usage:
MINSTANCE mInst = 0;
mcCntlReset(mInst);
// Reset controller instance 0.



================================================================================
[143/904] mcCntlRewindFile
Source: CATmcCntlRewindFile.htm
================================================================================

mcCntlRewindFile
mcCntlRewindFile
C/C++ Syntax:
int mcCntlRewindFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlRewindFile(
		number mInst)
Description:
Rewind the G code file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The G code file is running and not allowing a rewind.
Notes:
A MSG_REWIND_FILE notification is sent to the GUI and plugins.
Usage:
MINSTANCE mInst = 0;
mcCntlRewindFile(mInst);
// Rewind controller 0's Gcode file.



================================================================================
[144/904] mcCntlSetBlockDelete
Source: CATmcCntlSetBlockDelete.htm
================================================================================

mcCntlSetBlockDelete
mcCntlSetBlockDelete
C/C++ Syntax:
int mcCntlSetBlockDelete(
		MINSTANCE mInst, 
		int deleteID, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcCntlSetBlockDelete(
		number mInst, 
		number deleteID, 
		number enabled)
Description:
Enable or Disable a block delete level.
Parameters:
Parameter
Description
mInst
The controller instance.
deleteId
The block delete index level.
enabled
A BOOL specifying if the lock delete level is enabled. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
deleteID
is out of range.
Notes:
There are currently 10 block delete levels (0-9).  If any block delete level is enabled, the OSIG_BLOCK_DELETE output signal is asserted.
Usage:
MINSTANCE mInst = 0;
// Enable block delete level 0.
mcCntlSetBlockDelete(mInst, 0, TRUE);



================================================================================
[145/904] mcCntlSetCoolantDelay
Source: CATmcCntlSetCoolantDelay.htm
================================================================================

mcCntlSetCoolantDelay
mcCntlSetCoolantDelay
C/C++ Syntax:
int mcCntlSetCoolantDelay(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
rc = mc.mcCntlSetCoolantDelay(
		number mInst, 
		number secs);
Description:
Set the coolant delay in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
seconds
A double specifying the delay in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Seconds can be a decimal value.  e.g. .5 for half of a second.
Usage:
// Set 3/4 second coolant delay.
MINSTANCE mInst = 0;
int rc = mcCntlSetCoolantDelay(mInst, .750);



================================================================================
[146/904] mcCntlSetDiaMode
Source: CATmcCntlSetDiaMode.htm
================================================================================

mcCntlSetDiaMode
mcCntlSetDiaMode
C/C++ Syntax:
int mcCntlSetDiaMode(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetDiaMode(
		number mInst, 
		number enable);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the siameter mode state.  (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is only valid when the control is in lathe mode.
Usage:
// Enable diamter mode
MINSTANCE mInst = 0;
int rc = mcCntlSetDiaMode(mInst, TRUE);



================================================================================
[147/904] mcCntlSetEnableFRO
Source: CATmcCntlSetEnableFRO.htm
================================================================================

mcCntlSetEnableFRO
mcCntlSetEnableFRO
C/C++ Syntax:
int mcCntlSetEnableFRO(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetEnableFRO(
		number mInst, 
		number enable);
Description:
Set whether feed rate override is allowed (enabled).
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying if feed rate override is enabled.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Enable feed rate override
MINSTANCE mInst = 0;
int rc = mcCntlSetEnableFRO(mInst, TRUE);



================================================================================
[148/904] mcCntlSetFRO
Source: CATmcCntlSetFRO.htm
================================================================================

mcCntlSetFRO
mcCntlSetFRO
C/C++ Syntax:
int mcCntlSetFRO(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcCntlSetFRO(
		number mInst, 
		number percent);
Description:
Set the feed rate override by the percentage of the coded feed rate.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the feed rate override percent.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Set feed rate override to 150%
MINSTANCE mInst = 0;
int rc = mcCntlSetFRO(mInst, 150.0);



================================================================================
[149/904] mcCntlSetGcodeLineNbr
Source: CATmcCntlSetGcodeLineNbr.htm
================================================================================

mcCntlSetGcodeLineNbr
mcCntlSetGcodeLineNbr
C/C++ Syntax:
int mcCntlSetGcodeLineNbr(
		MINSTANCE mInst, 
		double line);
Description:
Set the Gcode line number to run / start.
Parameters:
Parameter
Description
mInst
The controller instance.
line
Sets the current line in the Gcode file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This will not update the running state engine so great care should be used when setting the line.
Do not set the line when processing G code.
Calling this function sends MSG_GCODE_LINE to the GUI and plugins.
The parameter
line
is base 1.
Usage:
int mInst=0;
mcCntlSetGcodeLineNbr(mInst, 10);
// Set the Gcode file to be at line 10.



================================================================================
[150/904] mcCntlSetLastError
Source: CATmcCntlSetLastError.htm
================================================================================

mcCntlSetLastError
mcCntlSetLastError
C/C++ Syntax:
int mcCntlSetLastError(
		MINSTANCE mInst, 
		const char *emsg);
LUA Syntax:
rc = mc.mcCntlSetLastError(
		number mInst, 
		string emsg)
Description:
Sets the last error in the error stack.
Parameters:
Parameter
Description
mInst
The controller instance.
emsg
A string buffer with the error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The error sent may not be seen by the user if the caller of mcGetLastError() is not showing the last errors.
Usage:
MINSTANCE mInst = 0;
char *erbuf = "Tool no longer in the spindle";
// Send an error messge for controller 0.
int rc = mcCntlSetLastError(mInst, erbuf);



================================================================================
[151/904] mcCntlSetLogging
Source: CATmcCntlSetLogging.htm
================================================================================

mcCntlSetLogging
mcCntlSetLogging
C/C++ Syntax:
int mcCntlSetLogging(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetLogging(
		number mInst, 
		number enable)
Description:
Enable or disable the log facility.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of the logging facility.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Enable logging.
MINSTANCE mInst = 0;
int rc = mcCntlSetLogging(mInst, enable);



================================================================================
[152/904] mcCntlSetMistDelay
Source: CATmcCntlSetMistDelay.htm
================================================================================

mcCntlSetMistDelay
mcCntlSetMistDelay
C/C++ Syntax:
int mcCntlSetMistDelay(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
rc = mc.mcCntlSetMistDelay(
		number mInst, 
		number secs);
Description:
Set the delay for the mist coolant in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
A double specifying the delay in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Decimal values are allowed.  e.g. .5 is 1/2 of a second.
Usage:
// Set the mist delay to 3/4 of a second.
MINSTANCE mInst = 0;
int rc = mcCntlSetMistDelay(mInst, .750);



================================================================================
[153/904] mcCntlSetMode
Source: CATmcCntlSetMode.htm
================================================================================

mcCntlSetMode
mcCntlSetMode
C/C++ Syntax:
int mcCntlSetMode(
		MINSTANCE mInst, 
		double mode);
LUA Syntax:
rc = mc.mcCntlSetMode(
		number mInst, 
		number mode)
Description:
Set the interpreter mode of the controller instance.
Parameters:
Parameter
Description
mInst
The controller instance.
mode
the interpreter mode of the controller. (MC_MODE_MILL, MC_MODE_LATHE_DIA, MC_MODE_LATHE_RAD, MC_MODE_TANGENTIAL)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The core needs to be restarted if the mode is changed.
Usage:
// Set the interpreter mode to Lathe Diameter.
MINSTANCE mInst = 0;
int rc = mcCntlSetMode(mInst, MC_MODE_LATHE_DIA);



================================================================================
[154/904] mcCntlSetOptionalStop
Source: CATmcCntlSetOptionalStop.htm
================================================================================

mcCntlSetOptionalStop
mcCntlSetOptionalStop
C/C++ Syntax:
int mcCntlSetOptionalStop(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetOptionalStop(
		number mInst
		number enable)
Description:
Set the state of optional stop.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of optional stop. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The output signal OSIG_OPT_STOP reflects the state of optional stop.
Usage:
// Enable optional stop.
MINSTANCE mInst = 0;
int rc = mcCntlSetOptionalStop(mInst, TRUE);



================================================================================
[155/904] mcCntlSetPoundVar
Source: CATmcCntlSetPoundVar.htm
================================================================================

mcCntlSetPoundVar
mcCntlSetPoundVar
C/C++ Syntax:
mcCntlSetPoundVar(
		MINSTANCE mInst, 
		int param, 
		double value);
LUA Syntax:
mcCntlSetPoundVar(
		number mInst, 
		number param, 
		number value)
Description:
Set the value of a system variable (pound variable).
Parameters:
Parameter
Description
mInst
The controller instance.
param
system variable index.
value
The value to apply to the system variable (pound variable).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
param
is out of range.
Notes:
This function should only be used when G code is not processing.
Usage:
MINSTANCE mInst = 0;
int PoundVar = 50;
dobule Value=21;
// Set the value of #50 to 21.
int rc = mcCntlSetPoundVar(mInst, PoundVar, Value);



================================================================================
[156/904] mcCntlSetRRO
Source: CATmcCntlSetRRO.htm
================================================================================

mcCntlSetRRO
mcCntlSetRRO
C/C++ Syntax:
int mcCntlSetRRO(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcCntlSetRRO(
		number mInst, 
		number percent);
Description:
Set the rapid rate override by the percentage of maxiumum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the rapid rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The maximum velocity is capped by the motor tuning.  Therefore the percentage should be less than 100%.
Usage:
// Set feed rapid override to 50%
MINSTANCE mInst = 0;
int rc = mcCntlSetRRO(mInst, 50.0);



================================================================================
[157/904] mcCntlSetResetCodes
Source: CATmcCntlSetResetCodes.htm
================================================================================

mcCntlSetResetCodes
mcCntlSetResetCodes
C/C++ Syntax:
int mcCntlSetResetCodes(
		MINSTANCE mInst, 
		const char *resetCodes);
LUA Syntax:
rc = mc.mcCntlSetResetCodes(
		number mInst, 
		string resetCodes)
Description:
Set the G code that is used when mcCntlReset() is called.
Parameters:
Parameter
Description
mInst
The controller instance.
resetCodes
A string buffer containing the G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Each block needs to be separated with new line characters (\n).
Usage:
// Set the G code used to reset the controller instance 0.
MINSTANCE mInst = 0;
int rc = mcCntlSetResetCodes(mInst, "G40 G20 G90 G52 X0 Y0 Z0\nG92.1 G69");



================================================================================
[158/904] mcCntlSetSingleBlock
Source: CATmcCntlSetSingleBlock.htm
================================================================================

mcCntlSetSingleBlock
mcCntlSetSingleBlock
C/C++ Syntax:
int mcCntlSetSingleBlock(
		MINSTANCE mInst, 
		BOOL enable);
Description:
Set the state of single block mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of single block mode. (TRUE/FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Single block runs one line of G code at a time and is most often used to debug G code programs.
Usage:
// Enable single block mode.
MINSTANCE mInst = 0;
mcCntlSetSingleBlock(mInst, TRUE);



================================================================================
[159/904] mcCntlSetStats
Source: CATmcCntlSetStats.htm
================================================================================

mcCntlSetStats
mcCntlSetStats
C/C++ Syntax:
int mcCntlSetStats(
		MINSTANCE mInst, 
		mstats_t *stats);
LUA Syntax:
N/A
Description:
Set/reset the machine statistics.
Parameters:
Parameter
Description
mInst
The controller instance.
(stats, The address of a mstats_t struct with which to set the control statistics.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stats
is NULL.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[160/904] mcCntlSetValue
Source: CATmcCntlSetValue.htm
================================================================================

mcCntlSetValue
mcCntlSetValue
C/C++ Syntax:
int mcCntlSetValue(
		MINSTANCE  mInst, 
		int valId, 
		int param, 
		double value);
LUA Syntax:
rc = mc.mcCntlSetValue(
		number mInst, 
		number valId, 
		number param, 
		number value)
Description:
Set the value of a control variable.
Parameters:
Parameter
Description
mInst
The controller instance.
valId
The control variable to set (VAL_ prefix in MachAPI.h).
param
The parameter for the control value (or 0).
value
The new value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The value specified by
valId
is not implemented.
Various
Depending upon
valId
.
Notes:
This function is used by Artsoft to add control values to the core on a per OEM basis.  Use of this function is discouraged in favor of using the more clearly named API functions for GUI and plugin programming.
Usage:
MINSTANCE mInst = 0;
int motor = 1;
value=1000.0;
// Set the Velocity of the motor to 1000.0 .
in rc = mcCntlSetValue(mInst, VAL_MOTOR_VEL, motor, value);



================================================================================
[161/904] mcCntlStartMotionDev
Source: CATmcCntlStartMotionDev.htm
================================================================================

mcCntlStartMotionDev
mcCntlStartMotionDev
C/C++ Syntax:
int mcCntlStartMotionDev(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlStartMotionDev(
		number mInst)
Description:
Starts the selected motion device.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to start the selected motion device.  This is normally a function used by a GUI where a motion device selection dialog is presented to the user.
Usage:
// Start the selected motion device.
MINSTANCE mInst = 0;
int rc = mcCntlStartMotionDev(mInst);



================================================================================
[162/904] mcCntlStopMotionDev
Source: CATmcCntlStopMotionDev.htm
================================================================================

mcCntlStopMotionDev
mcCntlStopMotionDev
C/C++ Syntax:
int mcCntlStopMotionDev(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlStopMotionDev(
		number mInst);
Description:
Stop the selected motion device.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to stop the selected motion device.  This is normally a function used by a GUI where a motion device selection dialog is presented to the user.
Usage:
// Stop the selected motion device.
MINSTANCE mInst = 0;
int rc = mcCntlStopMotionDev(mInst);



================================================================================
[163/904] mcCntlToolChangeManual
Source: CATmcCntlToolChangeManual.htm
================================================================================

mcCntlToolChangeManual
mcCntlToolChangeManual
C/C++ Syntax:
int mcCntlToolChangeManual(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlToolChangeManual(
		number mInst)
Description:
A convenience function used in M6 tool change macros.  It will prompt the user to change the tool and wait for a cycle start.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcCntlToolChangeManual(inst);



================================================================================
[164/904] mcCntlWaitOnCycleStart
Source: CATmcCntlWaitOnCycleStart.htm
================================================================================

mcCntlWaitOnCycleStart
mcCntlWaitOnCycleStart
C/C++ Syntax:
int mcCntlWaitOnCycleStart(
		MINSTANCE mInst, 
		const char *msg, 
		int timeOutMs);
LUA Syntax:
rc = mc.mcCntlWaitOnCycleStart(
		number mInst, 
		string msg, 
		number timeOutMs);
Description:
A convenience function used in macros.  It will prompt the user with the given message and optionally use a timeout.
Parameters:
Parameter
Description
mInst
The controller instance.
msg
A string buffer for the prompt message.
timeOutMs
A timeout value in milliseconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcCntlWaitOnCycleStart(inst, "Please press Cycle Start.", 1000);



================================================================================
[165/904] mcDeviceGetHandle
Source: CATmcDeviceGetHandle.htm
================================================================================

mcDeviceGetHandle
mcDeviceGetHandle
C/C++ Syntax:
int mcDeviceGetHandle(
		MINSTANCE mInst, 
		int devid, 
		HMCDEV *hDev);
LUA Syntax:
hDev, rc = mc.mcDeviceGetHandle(
		number mInst, 
		number devid)
Description:
Retrieve the hDev handle specified by devid.
Parameters:
Parameter
Description
mInst
The controller instance.
devid
The device ID as it was registered in the core.
hDev
The address of a HMCDEV handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_DEVICE_NOT_FOUND
No device with the ID specified by
devid
was found.
Notes:
None.
Usage:
int mInst = 0; 
int devid = 0; 
HMCDEV hDev;
//See if we can find a device with an I of zero
int rc =
mcDeviceGetHandle(mInst, devid, &hDev);
if (rc == MERROR_NOERROR) {
// We found it!
}



================================================================================
[166/904] mcDeviceGetInfo
Source: CATmcDeviceGetInfo.htm
================================================================================

mcDeviceGetInfo
mcDeviceGetInfo
C/C++ Syntax:
mcDeviceGetInfo(
		HMCDEV hDev, 
		char *nameBuf, 
		size_t nameBuflen, 
		char *descBuf, 
		size_t descBuflen, 
		int *type, 
		int *id);
LUA Syntax:
nameBuf, descBuf, type, id, rc = mc.mcDeviceGetInfo(HMCDEV hDev}
Description:
Return infromation about a device.
Parameters:
Parameter
Description
hDev
The handle for the device.
nameBuf
The address of a string buffer to receive the device name.
nameBuflen
The nameBuf buffer length.
descBuf
The address of a string buffer to receive the device description.
descBuflen
The descBuf buffer length.
type
The address of an integer to receive the device type.
id
The address of an integer to receive the device ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
The
hDev
parameter was 0 or no device with that handle exists.
Notes:
None.
Usage:
int mInst=0;
HMCSIG hDev = 0;
devinfo_t devinf;
char nameBuf[80];
char descBuf[80];
int type = 0;
int id = 0;
//Look for all the IO devices and get their devinfo_t struct
while (mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (hSig != 0) {
mcDeviceGetInfo(hDev, nameBuf, sizeof(nameBuf), 
				descBuf, sizeof(descBuf), &type, &id);
// do something with the device info.
} else {
		break;
	}
}



================================================================================
[167/904] mcDeviceGetInfoStruct
Source: CATmcDeviceGetInfoStruct.htm
================================================================================

mcDeviceGetInfoStruct
mcDeviceGetInfoStruct
C/C++ Syntax:
int mcDeviceGetInfoStruct(
		HMCSIG hDev, 
		devinfo_t *devinf);
LUA Syntax:
N/A
Description:
Return infromation about a device.
Parameters:
Parameter
Description
hDev
The handle for the device.
devinf
The address of a devinfo struct to receive the device information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hDev
parameter was 0.
Notes:
struct devinfo {
	char devName[80];
	char devDesc[80];
	int  devType;
	int  devId;
};
typedef struct devinfo devinfo_t;
Usage:
int mInst=0;
HMCSIG hDev = 0;
devinfo_t devinf;

//Look for all the IO devices and get their devinfo_t struct
while (mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (hSig != 0) {
mcDeviceGetInfoStruct(hDev, devinf);
// Do something with the device info.
} else {
		break;
	}
}



================================================================================
[168/904] mcDeviceGetNextHandle
Source: CATmcDeviceGetNextHandle.htm
================================================================================

mcDeviceGetNextHandle
mcDeviceGetNextHandle
C/C++ Syntax:
int mcDeviceGetNextHandle(
		MINSTANCE mInst, 
		int devtype, 
		HMCDEV startDev, 
		HMCDEV *hDev);
LUA Syntax:
hDev, rc = mc.mcDeviceGetNextHandle(
		number mInst, 
		number devtype, 
		number startDev)
Description:
Provides a means of looping through the available devices.
Parameters:
Parameter
Description
mInst
The controller instance.
devtype
Device type DEV_TYPE_NONE, DEV_TYPE_MOTION, DEV_TYPE_IO, DEV_TYPE_SCRIPT, DEV_TYPE_CONFIG, DEV_TYPE_DIAG.
startDev
A device handle defining the device from which to start.
hDev
A pointer to a HMCDEV to receive the next device handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NODATA
No more device handles are available.
Notes:
None.
Usage:
int mInst=0;
HMCDEV hDev;
//Look for all the IO devices
while (
mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev)
== MERROR_NOERROR) {
	if (hSig != 0) {
// Do something with hDev.
} else {
		break;
	}
}



================================================================================
[169/904] mcDeviceRegister
Source: CATmcDeviceRegister.htm
================================================================================

mcDeviceRegister
mcDeviceRegister
C/C++ Syntax:
mcDeviceRegister(
	MINSTANCE mInst,
	HMCPLUG plugid,
	const char *DeviceName,
	const char *DeviceDesc,
	int Type,
	HMCDEV *hDev);
LUA Syntax:
N/A
Description:
Register the device in the core.
Parameters:
Parameter
Description
mInst
The controller instance.
plugid
The ID of the plugin passed by mcPluginInit.
DeviceName
Name the device.
DeviceDesc
Description of the device.
Type
DEV_TYPE_NONE, DEV_TYPE_MOTION, DEV_TYPE_IO, DEV_TYPE_SCRIPT, DEV_TYPE_CONFIG, DEV_TYPE_DIAG, DEV_TYPE_REG, DEV_TYPE_PROBE2, DEV_TYPE_THREAD2, DEV_TYPE_RTAP, DEV_TYPE_RTAP2, DEV_TYPE_PROBE, DEV_TYPE_THREAD
hDev
The address of a HMCDEV to receive the returned device handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin referenced by
pluginid
was not found.
MERROR_NOT_CREATED
The device was not registered!
Notes:
Registers a device into the core and defines its capabilities.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
mcRegisterIo(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcRegisterIo(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0);

	if (!m_timer->Start(10, wxTIMER_ONE_SHOT)) {
		wxMessageBox(wxT("Timer could not start!"), wxT("Timer"));
	}
}



================================================================================
[170/904] mcFileHoldAquire
Source: CATmcFileHoldAquire.htm
================================================================================

mcFileHoldAquire
mcFileHoldAquire
C/C++ Syntax:
int mcFileHoldAquire(
		MINSTANCE mInst, 
		const char *reason, 
		int JogAxisBits);
LUA Syntax:
rc = mc.mcFileHoldAquire(
		number mInst, 
		string reason, 
		number JogAxisBits)
Description:
Used to hold G code processing.
Parameters:
Parameter
Description
mInst
The controller instance.
reason
A string buffer specifying the reason for the file hold.
JogAxisBits
A bitmask of bits specifying the axes that are allowed to jog when in then file hold state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is not in a state where file hold is allowed.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);



================================================================================
[171/904] mcFileHoldReason
Source: CATmcFileHoldReason.htm
================================================================================

mcFileHoldReason
mcFileHoldReason
C/C++ Syntax:
int mcFileHoldReason(
		MINSTANCE mInst, 
		char *buf, 
		long bufSize);
LUA Syntax:
reason, rc = mc.mcFileHoldReason(
		number mInst)
Description:
Returns a string clarifying why the file processing was held.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer that receives the reason the file was held.
bufSize
A long specifying the length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is not in the file hold state.
MERROR_INVALIS_ARG
buf
is NULL or
bufSize
is less than or equal to 0.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);
loacl reason
reason, rc = mc.mcFileHoldReason(inst);



================================================================================
[172/904] mcFileHoldRelease
Source: CATmcFileHoldRelease.htm
================================================================================

mcFileHoldRelease
mcFileHoldRelease
C/C++ Syntax:
int mcFileHoldRelease(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcFileHoldRelease(
		number mInst)
Description:
Used to exit a file hold state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control was not in the file hold state.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);
loacl reason
reason, rc = mc.mcFileHoldReason(inst);
-- Do some script magic...
rc = mc.mcFileHoldRelease(inst);
-- G code processing resumes.



================================================================================
[173/904] mcFixtureLoadFile
Source: CATmcFixtureLoadFile.htm
================================================================================

mcFixtureLoadFile
mcFixtureLoadFile
C/C++ Syntax:
int mcFixtureLoadFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcFixtureLoadFile(
		number mInst, 
		string FileToLoad);
Description:
Used to load a fixture table into the core.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer specifying the fixture table file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_EMPTY
The file did not contain any fixture table data.
Notes:
This function is primarily used by the GUI.
Usage:
// Load a fixture table file.
MINSTANCE mInst = 0;
int rc = mcFixtureLoadFile(mInst, "MyFixtureTable.dat");



================================================================================
[174/904] mcFixtureSaveFile
Source: CATmcFixtureSaveFile.htm
================================================================================

mcFixtureSaveFile
mcFixtureSaveFile
C/C++ Syntax:
int mcFixtureSaveFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcFixtureSaveFile(
		number mInst),
Description:
Used to save a previously loaded and modified fixture table file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_INVALID
No fixture table file was previously loaded.
Notes:
This function is primarily used by the GUI.
Usage:
// Save the fixture table file.
MINSTANCE mInst = 0;
int rc = mcFixtureSaveFile(mInst);



================================================================================
[175/904] mcGuiGetWindowHandle
Source: CATmcGuiGetWindowHandle.htm
================================================================================

mcGuiGetWindowHandle
mcGuiGetWindowHandle
C/C++ Syntax:
int mcGuiGetWindowHandle(
		MINSTANCE mInst, 
		void **handle);
LUA Syntax:
N/A
Description:
Used by the core or plugins to retriev the GUI's main window handle.
Parameters:
Parameter
Description
mInst
The controller instance.
handle
The address of a void pointer to receive the GUI's main window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the returned handle is NULL, then no handle was set by the GUI.
Usage:
//
MINSTANCE mInst = 0;
void *guiHandle;
rc = mcGuiGetWindowHandle(mInst, &guiHandle);



================================================================================
[176/904] mcGuiSetCallback
Source: CATmcGuiSetCallback.htm
================================================================================

mcGuiSetCallback
mcGuiSetCallback
C/C++ Syntax:
int mcGuiSetCallback(
	MINSTANCE mInst, 
	void *fp);
LUA Syntax:
N/A
Description:
Sets a call back function that is used to pass messages from the core to the GUI.
Parameters:
Parameter
Description
mInst
The controller instance.
fp
Function pointer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If this call back is not set, then the GUI has no means of receiving event based messages.
Usage:
/* In the GUI code */
MCP_API
int
MCP_APIENTRY mcGUIMsg(MINSTANCE mInst,
long
msg,
long
wparam,
long
lparam)
{
// Process messages...
return(MERROR_NOERROR);
}

MINSTANCE mInst = 0;
mcGuiSetCallback(mInst, &mcGUIMsg);



================================================================================
[177/904] mcGuiSetFocus
Source: CATmcGuiSetFocus.htm
================================================================================

mcGuiSetFocus
mcGuiSetFocus
C/C++ Syntax:
int mcGuiSetFocus(
		MINSTANCE mInst, 
		BOOL focus);
LUA Syntax:
N/A
Description:
Causes the GUI to gain or lose focus.
Parameters:
Parameter
Description
mInst
The controller instance.
focus
A BOOL specifying the desired GUI focus state. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The GUI will receive a MSG_GUI_FOCUS message.  It is up to the GUI to implement this functionality.
Usage:
// Set focus to the GUI's main window
MINSTANCE mInst = 0;
int rc = mcGuiSetFocus(mInst, TRUE);



================================================================================
[178/904] mcGuiSetWindowHandle
Source: CATmcGuiSetWindowHandle.htm
================================================================================

mcGuiSetWindowHandle
mcGuiSetWindowHandle
C/C++ Syntax:
int mcGuiSetWindowHandle(
		MINSTANCE mInst, 
		void *handle);
LUA Syntax:
N/A
Description:
Informs the core of the GUI's main window handle.
Parameters:
Parameter
Description
mInst
The controller instance.
handle
The GUI's main window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
It is up to the GUI to implement this functionality.  The handle should be the HWND handle on the Windows platform and the wxWindow handle on all other platforms.
Usage:
// Set the GUI main window handle.
MINSTANCE mInst = 0;
	mcGuiSetWindowHandle(0, this);



================================================================================
[179/904] mcIoGetHandle
Source: CATmcIoGetHandle.htm
================================================================================

mcIoGetHandle
mcIoGetHandle
C/C++ Syntax:
mcIoGetHandle(
	MINSTANCE mInst, 
	const char *path, 
	HMCIO *hIo);
LUA Syntax:
hIo, rc = mc.mcIoGetHandle(
		number mInst,
		string path)
Description:
Retrieve the IO handle given a named path.
Parameters:
Parameter
Description
mInst
The controller instance.
path
A string representing the named path.  e.g. devname/ioname
hIo
The address of a HMCIO handle
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_IO_NOT_FOUND
No IO handle available for the given path.
Notes:
None.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";
mcIoGetHandle(m_cid, path, &hIo);



================================================================================
[180/904] mcIoGetInfoStruct
Source: CATmcIoGetInfoStruct.htm
================================================================================

mcIoGetInfoStruct
mcIoGetInfoStruct
C/C++ Syntax:
int mcIoGetInfoStruct(
		HMCIO hIo, 
		ioinfo_t *ioinf);
LUA Syntax:
ioinf, rc = mc.mcIoGetInfoStruct(
			number hIo)
Description:
Retrieve the current state of the IO handle.
Parameters:
Parameter
Description
hIo
The IO handle.
ioinf
The address of an ioinf struct to receive the IO information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
handle is 0 or invalid, or the
ioinf
parameter is NULL
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct ioinfo {
	char ioName[80];
	char ioDesc[80];
	int  ioType;
	HMCDEV ioDev;
	HMCSIG ioMappedSignals[MAX_MAPPED_SIGNAL];
	void *ioUserData;
	int ioInput;
};
typedef struct ioinfo ioinfo_t;
Usage:
HMCDEV hDev = 0;
devinfo_t devinf;
int rc;
// Get all IO information from every registered device.
while (mcDeviceGetNextHandle(0, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (mcDeviceGetInfoStruct(hDev, &devinf) == MERROR_NOERROR) {
		HMCIO hIo = 0;
		while (mcIoGetNextHandle(hDev, hIo, &hIo) == MERROR_NOERROR) {
			ioinfo_t ioinf;
			rc =
mcIoGetInfoStruct(hIo, &ioinf);
if (rc ==
MERROR_NOERROR
No Error.
) {
// IO information successfuly retrieved.
}
		}
	}
}



================================================================================
[181/904] mcIoGetNextHandle
Source: CATmcIoGetNextHandle.htm
================================================================================

mcIoGetNextHandle
mcIoGetNextHandle
C/C++ Syntax:
mcIoGetNextHandle(
	HMCDEV hDev, 
	HMCIO startIo)
	HMCIO *hIo)
Description:
Provides a means to loop though the registered IO of a registered device.
Parameters:
Parameter
Description
hDev
The device handle.
startIo
The starting IO handle. (0 to begin)
hIo
The address to a HMCIO handle to receive the next IO handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The hDev paramete was 0.
MERROR_NODATA
No IO handle available.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Useful in a GUI where retrieving information to display to the user is needed.
Usage:
HMCDEV hDev = 0;
devinfo_t devinf;
int rc;
// Get all IO information from every registered device.
while (mcDeviceGetNextHandle(0, DEV_TYPE_IO, hDev, &hDev) ==
MERROR_NOERROR
No Error.
) {
	if (mcDeviceGetInfoStruct(hDev, &devinf) ==
MERROR_NOERROR
No Error.
) {
		HMCIO hIo = 0;
		while (
mcIoGetNextHandle(hDev, hIo, &hIo)
==
MERROR_NOERROR
No Error.
) {
			ioinfo_t ioinf;
			rc = mcIoGetInfoStruct(hIo, &ioinf);
			if (rc ==
MERROR_NOERROR
No Error.
) {
// IO information successfuly retrieved.
}
		}
	}
}



================================================================================
[182/904] mcIoGetState
Source: CATmcIoGetState.htm
================================================================================

mcIoGetState
mcIoGetState
C/C++ Syntax:
mcIoGetState(
	HMCIO hIo,
	bool *state);
Description:
Retrieve the current state of the IO handle.
Parameters:
Parameter
Description
hIo
The IO handle.
state
The address of a bool to receive the state status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetState(m_Input0,	&oldstate);
newstate = simGetIO(0);
	fi (newstate != oldstate) {
		mcIoSetState(m_Input0, newstate);
	}
}



================================================================================
[183/904] mcIoGetType
Source: CATmcIoGetType.htm
================================================================================

mcIoGetType
mcIoGetType
C/C++ Syntax:
mcIoGetType(
	HMCIO hIo, 
	int *type);
LUA Syntax:
type, rc = mcIoGetType(
	number hIo)
Description:
Retrieve the type (input or output) the IO object.
Parameters:
Parameter
Description
hIo
The IO handle.
type
The address of an integer to receive the type information. (IO_TYPE_INPUT or IO_TYPE_OUTPUT)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetType(m_Input0, &type);
// type will equal IO_TYPE_INPUT
}



================================================================================
[184/904] mcIoGetUserData
Source: CATmcIoGetUserData.htm
================================================================================

mcIoGetUserData
mcIoGetUserData
C/C++ Syntax:
mcIoGetUserData(
	HMCIO hIo, 
	void **data);
LUA Syntax:
N/A
Description:
Retrieve the type user data pointer associated with the I/O object..
Parameters:
Parameter
Description
hIo
The IO handle.
data
The address of a pointer to receive the user data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
struct myData {
	int myPortNumber;
	int myPinNumber;
};

void GetUserData(void)
{
	MINSTANCE mInst = 0;
	HMCIO hIo;
	void *data;
	if (mcIoGetHandle(mInst, "Sim0/Input0", &hIo) == MERROR_NOERROR) {
mcIoGetUserData(hIo, &data);
// type cast the pointer
struct myData *mData = (struct myData *)data;
	}
}



================================================================================
[185/904] mcIoIsEnabled
Source: CATmcIoIsEnabled.htm
================================================================================

mcIoIsEnabled
mcIoIsEnabled
C/C++ Syntax:
mcIoIsEnabled (
		HMCIO hIo, 
		bool *enabled);
Description:
Check to see if IO device has been enabled.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcGetSignalHandle().
state
The address of a bool to receive the enabled state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_IO_NOT_FOUND
The IO parameter was not found.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will return MERROR_IO_NOT_FOUND.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";
bool enabled;
mcIoGetHandle(m_cid, path, &hIo);
//Get the handle
mcIoIsEnabled(hIo , &enabled);
//Get the enabled state of the IO



================================================================================
[186/904] mcIoRegister
Source: CATmcIoRegister.htm
================================================================================

mcIoRegister
mcIoRegister
C/C++ Syntax:
mcIoRegister(
	HMCDEV hDev,
	const char *IoName,
	const char *IoDesc, 
	int Type, 
	HMCIO *hIo);
LUA Syntax:
N/A
Description:
Register the I/O object in the Mach core.
Parameters:
Parameter
Description
hDev
Pointer to the device.
IoName
Name of the IO point.
IoDesc
Description of the IO.
Type
IO_TYPE_NONE, IO_TYPE_INPUT, IO_TYPE_OUTPUT, IO_TYPE_ANA_INPUT, IO_TYPE_ANA_OUTPUT.
hIo
Address of the IO point
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0);
if (!m_timer->Start(10, wxTIMER_ONE_SHOT)) {
		wxMessageBox(wxT("Timer could not start!"), wxT("Timer"));
	}
}



================================================================================
[187/904] mcIoSetDesc
Source: CATmcIoSetDesc.htm
================================================================================

mcIoSetDesc
mcIoSetDesc
C/C++ Syntax:
mcIoSetDesc(
	HMCIO hIo, 
	const char *desc);
LUA Syntax:
rc = mc.mcIoSetDesc(
	number hIo, 
	string desc)
Description:
Sets the decription of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O handle.
desc
The description to apply to the I/O object.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";

if (mcIoGetHandle(m_cid, path, &hIo) == MERROR_NOERROR) {
mcIoSetDesc(hIo, "my mew description);
}



================================================================================
[188/904] mcIoSetName
Source: CATmcIoSetName.htm
================================================================================

mcIoSetName
mcIoSetName
C/C++ Syntax:
mcIoSetName(
	HMCIO hIo, 
	const char *name);
LUA Syntax:
rc = mc.mcIoSetName(
	number hIo, 
	string name)
Description:
Sets the name of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O handle.
name
The name to apply to the I/O object.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";

if (mcIoGetHandle(m_cid, path, &hIo) == MERROR_NOERROR) {
mcIoSetName(hIo, "Limit0++");
// The name is changed from Input0 to Limit0++
}



================================================================================
[189/904] mcIoSetState
Source: CATmcIoSetState.htm
================================================================================

mcIoSetState
mcIoSetState
C/C++ Syntax:
mcIoSetState(
	HMCIO hIo, 
	bool state);
Description:
Sets the state of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O object handle.
state
The state of I/O object
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
A value of true means the I/O object is in a high state. This function should only be used upon a state change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetState(m_Input0, &oldstate);
newstate = simGetIO(0);
	if (newstate != oldstate) {
		mcIoSetState(m_Input0, newstate);
	}
}



================================================================================
[190/904] mcIoSetType
Source: CATmcIoSetType.htm
================================================================================

mcIoSetType
mcIoSetType
C/C++ Syntax:
mcIoSetType(
	HMCIO hIo, 
	int type);
LUA Syntax:
rc = mcIoSetType(
	number hIo
	number type)
Description:
Retrieve the type (input or output) the IO object.
Parameters:
Parameter
Description
hIo
The I/O object handle.
type
An integer specifying the type of the I/O object. (IO_TYPE_INPUT or IO_TYPE_OUTPUT)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoSetType(m_Input0, IO_TYPE_OUTPUT);
// change the type to IO_TYPE_OUTPUT
}



================================================================================
[191/904] mcIoSetUserData
Source: CATmcIoSetUserData.htm
================================================================================

mcIoSetUserData
mcIoSetUserData
C/C++ Syntax:
mcIoSetUserData(
	HMCIO hIo, 
	void **data);
LUA Syntax:
N/A
Description:
Retrieve the type user data pointer associated with the I/O object..
Parameters:
Parameter
Description
hIo
The IO handle.
data
The address of a pointer to receive the user data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
struct myData {
	int myPortNumber;
	int myPinNumber;
};

struct myData data;

void GetUserData(void)
{
	MINSTANCE mInst = 0;
	HMCIO hIo;
	struct myData data;
	data.myPortNumber = 1;
	data.myPinNumber = 12;
	if (mcIoGetHandle(mInst, "Sim0/Input0", &hIo) == MERROR_NOERROR) {
mcIoSetUserData(hIo, &data);
}
}



================================================================================
[192/904] mcIoSyncSignal
Source: CATmcIoSyncSignal.htm
================================================================================

mcIoSyncSignal
mcIoSyncSignal
C/C++ Syntax:
mcIoSyncSignal(
	HMCIO hIo, 
	BOOL state);
LUA Syntax:
N/A
Description:
A special function that I/O plugins can use to force the synchronization of a Mach output signal.
Parameters:
Parameter
Description
hIo
The I/O object handle.
state
An BOOL specifying the state to sync to the I/O objects mapped core output signal
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
This function is primarily used to synchronize the core output signal when setting/clearing outputs are coordinated with machine motion.  (M63/M63)
Usage:
N/A



================================================================================
[193/904] mcIoUnregister
Source: CATmcIoUnregister.htm
================================================================================

mcIoUnregister
mcIoUnregister
C/C++ Syntax:
mcIoUnregister(
	HMCDEV hDev, 
	HMCIO hIo);
LUA Syntax:
N/A
Description:
Unregister the I/O object in the Mach core.
Parameters:
Parameter
Description
hDev
Pointer to the device.
hIo
The /O object handle to remove from the core..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Usage:
N/A



================================================================================
[194/904] mcJogAbsStart
Source: CATmcJogAbsStart.htm
================================================================================

mcJogAbsStart
mcJogAbsStart
C/C++ Syntax:
int mcJogAbsStart(
		MINSTANCE mInst, 
		int axisId, 
		double pos);
LUA Syntax:
rc = mc.mcJogAbsStart(
		number mInst, 
		number axisId, 
		number pos)
Description:
Start an absolute jog move.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to start jogging.
pos
The absolute position to which to jog the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Jog or position any axis.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double JogToPos = 5.0;
// Jog controller 0 to position 5.0 in the Z axis.
mcJogAbsStart(mInst, axis, Jogpos);



================================================================================
[195/904] mcJogAbsStop
Source: CATmcJogAbsStop.htm
================================================================================

mcJogAbsStop
mcJogAbsStop
C/C++ Syntax:
int mcJogAbsStop(
		MINSTANCE mInst, 
		int axisId, 
		double incr);
LUA Syntax:
rc = mc.mcJogAbsStop(
		number mInst, 
		number axisId, 
		number incr)
Description:
Stop an abs jog prematurely at the closest increment.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
inc
The increment on which to to stop the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function will stop an axis on an increment. This feature is like a digital detent to allow an axis to stop at some set increment. The original use is to stop an axis that is over loaded with inc jog requests.
Usage:
// Stop the incremental jog on the Z axis.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
int rc = mcJogAbsStop(mInst, axis, Joginc);



================================================================================
[196/904] mcJogGetAccel
Source: CATmcJogGetAccel.htm
================================================================================

mcJogGetAccel
mcJogGetAccel
C/C++ Syntax:
int mcJogGetAccel(
		MINSTANCE mInst, 
		int axisId, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcJogGetAccel(
		number mInst, 
		number axis)
Description:
Get the current jog acceleration value for the give aixs as a percentage of max velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
(percent, The address of a double to receive the current jog acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
percent
is NULL.
Notes:
Usage:
// Get the jog accel percentage for the X axis.
MINSTANCE mInst = 0;
double accel;
int rc = mcJogGetAccel(mInst, X_AXIS, &accel);



================================================================================
[197/904] mcJogGetFeedRate
Source: CATmcJogGetFeedRate.htm
================================================================================

mcJogGetFeedRate
mcJogGetFeedRate
C/C++ Syntax:
int mcJogGetFeeRate(
		MINSTANCE mInst, 
		int axisId, 
		double *feedRate);
LUA Syntax:
feedRate, rc = mc.mcJogSetFeedRate(
		number mInst, 
		number axisId)
Description:
Get the jog feed rate of the given axis.  To set the units mode, inch or metric, see mcJogSetUnitsMode().
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
feedRate
A pointer to a double with which to receive the jog feed rate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double feedRate = 0.0;
int rc = mcJogSetUnitsMode(mInst, axis, MC_UNITS_INCH); 
rc = mcJogSetFeedRate(mInst, axis, &feedRate);
// Get the feed rate in inches per minute.



================================================================================
[198/904] mcJogGetFollowMode
Source: CATmcJogGetFollowMode.htm
================================================================================

mcJogGetFollowMode
mcJogGetFollowMode
C/C++ Syntax:
mcJogGetFollowMode(
	MINSTANCE mInst, 
	double *mode_on);
Description:
Get the jog follow state of the toolpath. This is when 
the tool path will auto pan to follow the tool on the screen.
Parameters:
Parameter
Description
mInst
The controller instance.
mode_on
A pointer to an int to receive the jog follow state (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
This call is used to help display the state to the user.
Usage:
int mInst=0;
double jfstat=0;
mcJogGetFollowMode(mInst, &jfstate);



================================================================================
[199/904] mcJogGetInc
Source: CATmcJogGetInc.htm
================================================================================

mcJogGetInc
mcJogGetInc
C/C++ Syntax:
int mcJogGetInc(
		MINSTANCE mInst, 
		int axisId, 
		double *increment);
LUA Syntax:
increment, rc = mc.mcJogGetInc(
		number mInst, 
		number axisId)
Description:
Returns the current jog increment for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
increment
is NULL.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[200/904] mcJogGetRate
Source: CATmcJogGetRate.htm
================================================================================

mcJogGetRate
mcJogGetRate
C/C++ Syntax:
int mcJogGetRate(
		MINSTANCE mInst, 
		int axisId, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcJogGetRate(
		number mInst, 
		number axisId)
Description:
Returns the current jog rate as a percentage of max velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
percent
The address of a double to receive the jog rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
percentage
is NULL.
Notes:
Usage:
// Get the current jog rate for the X axis
MINSTANCE mInst = 0;
double jogRate;
int rc = mcJogGetRate(mInst, X_AXIS, &jogRate);



================================================================================
[201/904] mcJogGetTraceEnable
Source: CATmcJogGetTraceEnable.htm
================================================================================

mcJogGetTraceEnable
mcJogGetTraceEnable
C/C++ Syntax:
int mcJogGetTraceEnable(MINSTANCE mInst, BOOL *enable);
LUA Syntax:
enable, rc = mc.mcJogGetTraceEnable(number mInst)
Description:
Get the enabled status of jog tracing in the tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A pointer to a BOOL with which to revceive the jog trace enable status. (MC_TRUE or MC_FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None
Usage:
// Get jog trace enable status.
MINSTANCE mInst = 0;
int enabled = MC_FALSE;
int rc = mcJogGetTraceEnable(mInst, &enabled);



================================================================================
[202/904] mcJogGetType
Source: CATmcJogGetType.htm
================================================================================

mcJogGetType
mcJogGetType
C/C++ Syntax:
int mcJogGetType(MINSTANCE mInst, int axisId, int *type);
LUA Syntax:
type, rc = mc.mcJogGetType(
		number mInst, 
		number axisId)
Description:
Get the jog operation type for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
type
A pointer to an integer with which to revceive the jog type. (MC_JOG_TYPE_VEL or MC_JOG_TYPE_INC)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Get the X axis jog type.
MINSTANCE mInst = 0;
int type = 0;
int rc = mcJogGetType(mInst, X_AXIS, &type);



================================================================================
[203/904] mcJogGetUnitsMode
Source: CATmcJogGetUnitsMode.htm
================================================================================

mcJogGetUnitsMode
mcJogGetUnitsMode
C/C++ Syntax:
mcJogGetUnitsMode(
	MINSTANCE mInst, 
	int axisId,
	int *mode);
Description:
Get the jog units mode.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
mode
A pointer to an int to receive the jog units mode (MC_UNITS_INCH or MC_UNITS_METRIC) of the given axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
int mInst = 0;
int mode = 0;
mcJogGetUnitsMode(mInst, X_AXIS, &mode);



================================================================================
[204/904] mcJogGetVelocity
Source: CATmcJogGetVelocity.htm
================================================================================

mcJogGetVelocity
mcJogGetVelocity
C/C++ Syntax:
int mcJogGetVelocity(
		MINSTANCE mInst, 
		int axisId, 
		double *vel);
LUA Syntax:
vel, rc = mc.mcJogGetVelocity(
		number mInst, 
		number axisId),
Description:
Get the current jog velocity setting in units per minute.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis from which to get the jog velocity.
vel
The address of a double to receive the current jog velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Changing the jog rate (percentage of max velocity) will affect the return value.
Usage:
// Get the current jog velocity setting for the X axis
MINSTANCE mInst = 0;
double jogVel;
int rc = mcJogGetVelocity(mInst, X_AXIS, &jogVel);



================================================================================
[205/904] mcJogIncStart
Source: CATmcJogIncStart.htm
================================================================================

mcJogIncStart
mcJogIncStart
C/C++ Syntax:
int mcJogIncStart(
		MINSTANCE mInst, 
		int axisId, 
		double dist);
LUA Syntax:
rc = mc.mcJogIncStart(
		number mInst, 
		number axisId, 
		number dist)
Description:
Start an Incermetnal jog move.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to start jogging.
dist
The incremental distance to jog the axis (added to current goal position).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Inc jog or position any axis. The axis will use the MaxVel and Accel settings to get into position.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
// Jog controller 0 .1 in the Z axis.
mcJogIncStart(mInst, axis, Joginc);



================================================================================
[206/904] mcJogIncStop
Source: CATmcJogIncStop.htm
================================================================================

mcJogIncStop
mcJogIncStop
C/C++ Syntax:
int mcJogIncStop(
		MINSTANCE mInst, 
		int axisId, 
		double incr);
LUA Syntax:
rc = mc.mcJogIncStop(
		number mInst, 
		number axisId, 
		number incr)
Description:
Stop an incremental jog at the closest increment.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
inc
The increment on which to to stop the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function will stop an axis on an increment. This feature is like a digital detent to allow an axis to stop at some set increment. The original use is to stop an axis that is over loaded with inc jog requests.
Usage:
// Stop the incremental jog on the Z axis.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
int rc = mcJogIncStop(mInst, axis, Joginc);



================================================================================
[207/904] mcJogIsJogging
Source: CATmcJogIsJogging.htm
================================================================================

mcJogIsJogging
mcJogIsJogging
C/C++ Syntax:
int mcJogIsJogging(
		MINSTANCE mInst, 
		int axisId, 
		BOOL *jogging);
LUA Syntax:
jogging, rc = mc.mcJogIsJogging(
		number mInst, 
		number axisId)
Description:
Determine if the given axis is jogging.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
jogging
The address of a BOOL to receive the axis jog state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// See if the X axis is jogging.
MINSTANCE mInst = 0;
BOOL jogging = FALSE;
int rc = mcJogIsJogging(mInst, X_AXIS, &jogging);



================================================================================
[208/904] mcJogIsStopping
Source: CATmcJogIsStopping.htm
================================================================================

mcJogIsStopping
mcJogIsStopping
C/C++ Syntax:
int mcJogIsStopping(
		MINSTANCE mInst, 
		int axisId, 
		BOOL *stopping);
LUA Syntax:
stopping, rc = mc.mcJogIsStopping(
		number mInst, 
		number axisId)
Description:
Determine if the given axis has been commanded to stop but has not yet stopped.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
stopping
The address of a BOOL to receive the axis jog state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// See if the X axis is stopping.
MINSTANCE mInst = 0;
BOOL stopping = FALSE;
int rc = mcJogIsStopping(mInst, X_AXIS, &stopping);



================================================================================
[209/904] mcJogSetAccel
Source: CATmcJogSetAccel.htm
================================================================================

mcJogSetAccel
mcJogSetAccel
C/C++ Syntax:
int mcJogSetAccel(
		MINSTANCE mInst, 
		int axisId, 
		double percent);
LUA Syntax:
rc = mc.mcJogSetAccel(
		number mInst, 
		number axisId, 
		double percent)
Description:
Set the jog accel as a percentage of the axis' maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer spcifying the axis.
percent
A double specifying the acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
// Set the X axis jog accel percentage to 75%.
MINSTANCE mInst = 0;
int mcJogSetAccel(mInst, X_AXIS, 75);



================================================================================
[210/904] mcJogSetFeedRate
Source: CATmcJogSetFeedRate.htm
================================================================================

mcJogSetFeedRate
mcJogSetFeedRate
C/C++ Syntax:
int mcJogSetFeeRate(
		MINSTANCE mInst, 
		int axisId, 
		double feedRate);
LUA Syntax:
rc = mc.mcJogSetFeedRate(
		number mInst, 
		number axisId, 
		number feedRate)
Description:
Set the jog feed rate of the given axis.  To set the units mode, inch or metric, see mcJogSetUnitsMode().
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
feedRate
The jog feed rate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc = mcJogSetUnitsMode(mInst, axis, MC_UNITS_INCH); 
rc = mcJogSetFeedRate(mInst, axis, 20);
// 20 inches per minute.



================================================================================
[211/904] mcJogSetFollowMode
Source: CATmcJogSetFollowMode.htm
================================================================================

mcJogSetFollowMode
mcJogSetFollowMode
C/C++ Syntax:
mcJogSetFollowMode(
	MINSTANCE mInst, 
	double mode_on);
Description:
Set the jog follow mode of the toolpath.
Parameters:
Parameter
Description
mInst
The controller instance.
mode_on
Sets Jog follow mode to be on or off with (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
This can be set at anytime.
Usage:
int mInst=0;
mcJogGetFollowMode(mInst, MC_ON);



================================================================================
[212/904] mcJogSetInc
Source: CATmcJogSetInc.htm
================================================================================

mcJogSetInc
mcJogSetInc
C/C++ Syntax:
int mcJogSetInc(
		MINSTANCE mInst, 
		int axisId, 
		double increment);
LUA Syntax:
rc = mc.mcJogSetInc(
		number mInst, 
		number axisId, 
		number increment)
Description:
Set the current jog increment for the give axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
increment
A double specifying the desired increment.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// Set the X axis jog increment to .010"
MINSTANCE mInst = 0;
int rc = mcJogSetInc(mInst, X_AXIS, .010);



================================================================================
[213/904] mcJogSetRate
Source: CATmcJogSetRate.htm
================================================================================

mcJogSetRate
mcJogSetRate
C/C++ Syntax:
int mcJogSetRate(
		MINSTANCE mInst, 
		int axisId, 
		double percent);
LUA Syntax:
rc = mc.mcJogSetRate(
		number mInst, 
		number axisId, 
		number percent)
Description:
Set the jog rate of the given axis as a percentage of the axis' maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
percent
The jog rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc = mcJogSetRate(mInst, axis, 75);



================================================================================
[214/904] mcJogSetTraceEnable
Source: CATmcJogSetTraceEnable.htm
================================================================================

mcJogSetTraceEnable
mcJogSetTraceEnable
C/C++ Syntax:
int mcJogSetTraceEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcJogSetTraceEnable(
		number mInst, 
		number enable)
Description:
Enable or disable tool path jog tracing.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL secifying tool path jog tracing.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None
Usage:
//Set jog tracing.
MINSTANCE mInst = 0;
int rc = mcJogSetTraceEnable(mInst, MC_TRUE);



================================================================================
[215/904] mcJogSetType
Source: CATmcJogSetType.htm
================================================================================

mcJogSetType
mcJogSetType
C/C++ Syntax:
int mcJogSetType(MINSTANCE mInst, int axisId, int type);
LUA Syntax:
rc = mc.mcJogSetType(
		number mInst, 
		number axisId, 
		number type)
Description:
Set the jog operation type for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
type
An integer specifying the jog type. (MC_JOG_TYPE_VEL or MC_JOG_TYPE_INC)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the X axis jog type to velocity mode.
MINSTANCE mInst = 0;
int rc = mcJogSetType(mInst, X_AXIS, MC_JOG_TYPE_VEL);



================================================================================
[216/904] mcJogSetUnitsMode
Source: CATmcJogSetUnitsMode.htm
================================================================================

mcJogSetUnitsMode
mcJogSetUnitsMode
C/C++ Syntax:
mcJogSetUnitsMode(
	MINSTANCE mInst, 
	int axisId,
	int mode);
Description:
Get the jog units mode.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
mode
The desired units mode (MC_UNITS_INCH or MC_UNITS_METRIC) for the given axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
int mInst = 0;
mcJogSetUnitsMode(mInst, X_AXIS, MC_UNITS_INCH);



================================================================================
[217/904] mcJogVelocityStart
Source: CATmcJogVelocityStart.htm
================================================================================

mcJogVelocityStart
mcJogVelocityStart
C/C++ Syntax:
int mcJogVelocityStart(
		MINSTANCE mInst, 
		int axisId, 
		double dir);
LUA Syntax:
rc = mc.mcJogVelocityStart(
		number mInst, 
		number axisId, 
		number dir);
Description:
Start a velocity jog on the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis to jog.
dir
An integer specifying the direction of the jog. (MC_JOG_POS, MC_JOG_NEG, MC_JOG_STOP)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Specifying MC_JOG_STOP for
dir
is the same as calling mcJogVelocityStop().
Usage:
int mInst=0;
int axis = Z_AXIS;
int rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS);
// Start Z axis jogging for 5 sec.
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS);
// Reverse axis and jog the axis Back.
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
mcJogVelocityStop(mInst, axis);
// Stop the axis.



================================================================================
[218/904] mcJogVelocityStop
Source: CATmcJogVelocityStop.htm
================================================================================

mcJogVelocityStop
mcJogVelocityStop
C/C++ Syntax:
mcJogVelocityStop(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
mcJogVelocityStop(
		number mInst, 
		number axisId)
Description:
Stop a velocity jog on an the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Stops the axis with respect to acceleration settings of the slowest motor that is part of the axis.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc;
// Jog axis at 10 % max velocity.
rc = mcJogSetRate(mInst, axis, 10);
rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS); 
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
// Stop the axis.
rc = mcJogVelocityStop(mInst, axis);



================================================================================
[219/904] mcMotionClearPlanner
Source: CATmcMotionClearPlanner.htm
================================================================================

mcMotionClearPlanner
mcMotionClearPlanner
C/C++ Syntax:
int mcMotionClearPlanner(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcMotionClearPlanner(
		number mInst)
Description:
Clears the motion planner of all previously planned moves.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is useful when probing and the probe has struck before the planned moves are exhausted.
Usage:
// Clear the planner.
MINSTANCE mInst = 0;
int rc = mcMotionClearPlanner(mInst);



================================================================================
[220/904] mcMotionCyclePlanner
Source: CATmcMotionCyclePlanner.htm
================================================================================

mcMotionCyclePlanner
mcMotionCyclePlanner
C/C++ Syntax:
int mcMotionCyclePlanner(MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Cycle the core planner.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is depricated in favor of mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[221/904] mcMotionCyclePlannerEx
Source: CATmcMotionCyclePlannerEx.htm
================================================================================

mcMotionCyclePlannerEx
mcMotionCyclePlannerEx
C/C++ Syntax:
int mcMotionCyclePlannerEx(
		MINSTANCE mInst, 
		execution_t *exInfo);
LUA Syntax:
N/A
Description:
Cycles the core planner to produce one time slice of movement information.
Parameters:
Parameter
Description
mInst
The controller instance.
exInfo
The address of an execution_t struct that receives the movement information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
exInfo
is NULL.
Notes:
This is the main function a motion plugin uses to drive motion.
Usage:
// Cycle the core planner.
MINSTANCE mInst = 0;
execution_t exInfo;
int rc = mcMotionCyclePlannerEx(mInst, &exInfo);
// For more information, see the Sim plugin example.



================================================================================
[222/904] mcMotionGetAbsPos
Source: CATmcMotionGetAbsPos.htm
================================================================================

mcMotionGetAbsPos
mcMotionGetAbsPos
C/C++ Syntax:
int mcMotionGetAbsPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned absolute motor position for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[223/904] mcMotionGetAbsPosFract
Source: CATmcMotionGetAbsPosFract.htm
================================================================================

mcMotionGetAbsPosFract
mcMotionGetAbsPosFract
C/C++ Syntax:
int mcMotionGetAbsPosFract(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned absolute motor position for the given motor (with fractions).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[224/904] mcMotionGetBacklashAbs
Source: CATmcMotionGetBacklashAbs.htm
================================================================================

mcMotionGetBacklashAbs
mcMotionGetBacklashAbs
C/C++ Syntax:
int mcMotionGetBacklashAbs(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
N/A
Description:
Retrieves the last planned backlast amount for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[225/904] mcMotionGetBacklashInc
Source: CATmcMotionGetBacklashInc.htm
================================================================================

mcMotionGetBacklashInc
mcMotionGetBacklashInc
C/C++ Syntax:
int mcMotionGetBacklashInc(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
N/A
Description:
Retrieves the last planned backlast amount for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[226/904] mcMotionGetIncPos
Source: CATmcMotionGetIncPos.htm
================================================================================

mcMotionGetIncPos
mcMotionGetIncPos
C/C++ Syntax:
int mcMotionGetIncPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned incremental motor position for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[227/904] mcMotionGetMoveID
Source: CATmcMotionGetMoveID.htm
================================================================================

mcMotionGetMoveID
mcMotionGetMoveID
C/C++ Syntax:
int mcMotionGetMoveID(
		MINSTANCE mInst, 
		int motorId, 
		long *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned move ID for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a long to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[228/904] mcMotionGetPos
Source: CATmcMotionGetPos.htm
================================================================================

mcMotionGetPos
mcMotionGetPos
C/C++ Syntax:
int mcMotionGetPos(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
pos, rc = mc.mcMotionGetPos(
		number mInst, 
		number motorId)
Description:
Retrieves the current motor pos in counts.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the motor 0 position.
MINSTANCE mInst = 0;
double pos;
int rc = mcMotionGetPos(mInst, 0, &pos);



================================================================================
[229/904] mcMotionGetProbeParams
Source: CATmcMotionGetProbeParams.htm
================================================================================

mcMotionGetProbeParams
mcMotionGetProbeParams
C/C++ Syntax:
int mcMotionGetProbeParams(
		MINSTANCE mInst, 
		probe_t *probeInfo);
LUA Syntax:
N/A
Description:
Get the probing parameters from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
probeInfo
The address of a prob_t struct to receive the probing parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
A motion device registered with DEV_TYPE_PROBE2 must be defined in order to use this function.
Usage:
// Get the probing parameters from the core.
MINSTANCE mInst = 0;
probe_t pInfo;
int mcMotionGetProbeParams(mInst, &pInfo);



================================================================================
[230/904] mcMotionGetRigidTapParams
Source: CATmcMotionGetRigidTapParams.htm
================================================================================

mcMotionGetRigidTapParams
mcMotionGetRigidTapParams
C/C++ Syntax:
int mcMotionGetRigidTapParams(
		MINSTANCE mInst, 
		tap_t *tapInfo);
LUA Syntax:
N/A
Description:
Retrieve the tapping parameters from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
tapInfo
The address of a tap_t struct to receive the tapping parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
A motion device registered with DEV_TYPE_TAP2 must be defined in order to use this function.
Usage:
// Get the tpping parameters from the core.
MINSTANCE mInst = 0;
tap_t tapInfo;
int rc = mcMotionGetRigidTapParams(mInst, &tapInfo);



================================================================================
[231/904] mcMotionGetSyncOutput
Source: CATmcMotionGetSyncOutput.htm
================================================================================

mcMotionGetSyncOutput
mcMotionGetSyncOutput
C/C++ Syntax:
int mcMotionGetSyncOutput(
		MINSTANCE mInst, 
		int outputQueue, 
		HMCIO *hIo, 
		BOOL *state);
LUA Syntax:
N/A
Description:
Gets a movement coordinated output from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
outputQueue
An integer specifying which output queue.
hIo
The address of a HMCIO variable to receive the I/O handle associated with the output.
state
Te address of a BOOL to receive the desired state of the output.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Test the ex.exOutputQueue flag to see if there are any coordinated output to be set/cleared.  The
outputQueue
parameter comes from ex.ex.exOutputQueue.
Usage:
// Retrieve the coordinated outputs/
MINSTANCE mInst = 0;
execution_t ex;
mcMotionCyclePlannerEx(mInst, &ex);
if (ex.exOutputQueue != EX_NONE) {
	HMCIO hIo;
	BOOL state;
	while (mcMotionGetSyncOutput(m_cid, ex.exOutputQueue, &hIo, &state) == MERROR_NOERROR) {
// Pair setting the output along with the moves in (execution_t)ex.
}
}



================================================================================
[232/904] mcMotionGetThreadParams
Source: CATmcMotionGetThreadParams.htm
================================================================================

mcMotionGetThreadParams
mcMotionGetThreadParams
C/C++ Syntax:
int mcMotionGetThreadParams(
		MINSTANCE mInst, 
		thread_t *threadInfo);
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
threadInfo
The address of a thread_t struct to receive the threading parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The motion device does not support DEV_TYPE_THREAD2 type threading.
Notes:
A motion device registered with DEV_TYPE_THREAD2 is required.
Usage:
//
MINSTANCE mInst = 0;
thread_t threadInfo;
int mcMotionGetThreadParams(mInst, &threadInfo);



================================================================================
[233/904] mcMotionGetThreadingRate
Source: CATmcMotionGetThreadingRate.htm
================================================================================

mcMotionGetThreadingRate
mcMotionGetThreadingRate
C/C++ Syntax:
int mcMotionGetThreadingRate(
		MINSTANCE mInst, 
		double *ratio);
LUA Syntax:
N/A
Description:
Get the current threading ration from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
ratio
The address to a double to receive the threading ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get the current threading rate from the core.
MINSTANCE mInst = 0;
double ratio;
int rc = mcMotionGetThreadingRate(mInst, ∶);



================================================================================
[234/904] mcMotionGetVel
Source: CATmcMotionGetVel.htm
================================================================================

mcMotionGetVel
mcMotionGetVel
C/C++ Syntax:
int mcMotionGetVel(MINSTANCE mInst, int motorId, double *velocity);
LUA Syntax:
velocity, rc = mc.mcMotionGetVel(
		number mInst, 
		number motorId)
Description:
Retrieve the current motor velocity in counts per second squared.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor ID.
velocity. The address of a double to receive the motor velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
velocity
is NULL or
motorId
is less than 0.
Notes:
None.
Usage:
// Get the motor velocity for motor 1
MINSTANCE mInst = 0;
double vel;
int rc = mcMotionGetVel(mInst, 1, &vel);



================================================================================
[235/904] mcMotionSetCycleTime
Source: CATmcMotionSetCycleTime.htm
================================================================================

mcMotionSetCycleTime
mcMotionSetCycleTime
C/C++ Syntax:
int mcMotionSetCycleTime(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
N/A
Description:
Set the time slice of a cycle.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
A double specifying the cycle time slice.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Decimal values are accepted.  e.g. .001 is equal to 1 millisecond.
Usage:
// Set the cycle time slice.
MINSTANCE mInst = 0;
int mcMotionSetCycleTime(mInst, .001);



================================================================================
[236/904] mcMotionSetMoveID
Source: CATmcMotionSetMoveID.htm
================================================================================

mcMotionSetMoveID
mcMotionSetMoveID
C/C++ Syntax:
int mcMotionSetMoveID(
		MINSTANCE mInst, 
		int id);
LUA Syntax:
N/A
Description:
Set the time slice of a cycle.
Parameters:
Parameter
Description
mInst
The controller instance.
id
Set the currently executing movement ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Ideally, the motion control device should report the currently executing movement.
Usage:
// Set the currently executing movement ID.
MINSTANCE mInst = 0;
int moveId = 10001;
// Should be obtained from the motion controller.
int mcMotionSetMoveID(mInst, moveId);



================================================================================
[237/904] mcMotionSetPos
Source: CATmcMotionSetPos.htm
================================================================================

mcMotionSetPos
mcMotionSetPos
C/C++ Syntax:
int mcMotionSetPos(
		MINSTANCE mInst, 
		int motorId
		double val);
LUA Syntax:
N/A
Description:
Report the position in counts to the core for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
MotorId
An integer specifying the motor.
val
A double specifying the motor position in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
The motion control device should report the motor positions to the core so that the core can synchronize events based on the current position.
Usage:
// Set the motor position for motor 1.
MINSTANCE mInst = 0;
motorCounts = 324255;
// Should be retrieved from the motion controller.
int mcMotionSetPos(mInst, 1, motorCounts);



================================================================================
[238/904] mcMotionSetProbeComplete
Source: CATmcMotionSetProbeComplete.htm
================================================================================

mcMotionSetProbeComplete
mcMotionSetProbeComplete
C/C++ Syntax:
int mcMotionSetProbeComplete(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Inform the core that a probe operation is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Calling this function assumes that a probe stike has happened and that the probed positions have been reproted.
Usage:
// Complete a probe operation.
MINSTANCE mInst = 0;
int rc = mcMotionSetProbeComplete(mInst);



================================================================================
[239/904] mcMotionSetProbePos
Source: CATmcMotionSetProbePos.htm
================================================================================

mcMotionSetProbePos
mcMotionSetProbePos
C/C++ Syntax:
int mcMotionSetProbePos(
		MINSTANCE mInst, 
		int motorId, 
		double val);
LUA Syntax:
N/A
Description:
Report the probed position for the given motor to the core.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
A double specifying the probed motor position in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
When the probe strikes, the position needs to be reported to the core.
Usage:
// Set the probed position for motor 0.
MINSTANCE mInst = 0;
double probedPos = 2314134;
// Should be reteived from motion controller latch registers.
int rc = mcMotionSetProbePos(mInst, 0, double val);



================================================================================
[240/904] mcMotionSetStill
Source: CATmcMotionSetStill.htm
================================================================================

mcMotionSetStill
mcMotionSetStill
C/C++ Syntax:
int mcMotionSetStill(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Report when the given motor is still.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
The core will request a stop report in order to synchronize events with the end of movement.  This is a very important thing to get correct in a motion plugin.  This is how the core will know to stop waiting on M code or any other G code that breaks the CV chain.
Usage:
// Motor stop report example.
MINSTANCE mInst = 0;
execution_t ex;
mcMotionCyclePlannerEx(m_cid, &ex);
switch(ex.exType) {
case EX_STOP_REQ:
	// See if we need to report when the motors are still.
	for (i = 0; i < 8; i++) {
		if (ex.exMotors[i].reportStopped == TRUE) {
// Report when this motor has completed all previous moves!
}
	}
	break;
	...
}



================================================================================
[241/904] mcMotionSetThreadingRate
Source: CATmcMotionSetThreadingRate.htm
================================================================================

mcMotionSetThreadingRate
mcMotionSetThreadingRate
C/C++ Syntax:
int mcMotionSetThreadingRate(
		MINSTANCE mInst, 
		double ratio);
LUA Syntax:
N/A
Description:
Set the threading skew ratio.
Parameters:
Parameter
Description
mInst
The controller instance.
ratio
A double specifying the skew ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the threading ratio.
MINSTANCE mInst = 0;
int rc = mcMotionSetThreadingRate(mInst, 1.2);



================================================================================
[242/904] mcMotionSetVel
Source: CATmcMotionSetVel.htm
================================================================================

mcMotionSetVel
mcMotionSetVel
C/C++ Syntax:
int mcMotionSetVel(
		MINSTANCE mInst, 
		int motorId, 
		double velocity);
LUA Syntax:
N/A
Description:
Report the velocity (in counts per second squared) to the core for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
velocity
A double specifying the velocity in counts per second squared.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Motion plugins use this function to report motor velocities to the core.
Usage:
// Report the velocity for motor 0.
MINSTANCE mInst = 0;
double vel = 2342420;
// Should be obtained from the motion controller.
int mcMotionSetVel(mInst, 0, vel);



================================================================================
[243/904] mcMotionSync
Source: CATmcMotionSync.htm
================================================================================

mcMotionSync
mcMotionSync
C/C++ Syntax:
int mcMotionSync(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Synchronize the core planners with the last reported motor positions.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If movement has been done outside of direction from the core, the planners must be synced to the new motor positons.
Usage:
// Synch core planner positions with the last reported motor positions.
MINSTANCE mInst = 0;
int rc = mcMotionSync(mInst);



================================================================================
[244/904] mcMotionThreadComplete
Source: CATmcMotionThreadComplete.htm
================================================================================

mcMotionThreadComplete
mcMotionThreadComplete
C/C++ Syntax:
int mcMotionThreadComplete(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Inform the core that the threading operation is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the motion controller is profiling all of the threading moves, the core must be informed when the threading operation is complete.
Usage:
// Report that the threading op is complete.
MINSTANCE mInst = 0;
int rc = mcMotionThreadComplete(mInst);



================================================================================
[245/904] mcMotorGetAxis
Source: CATmcMotorGetAxis.htm
================================================================================

mcMotorGetAxis
mcMotorGetAxis
C/C++ Syntax:
int mcMotorGetAxis(
		MINSTANCE mInst, 
		int motorId, 
		int *axisId)
LUA Syntax:
axisId, rc = mc.mcMotorGetAxis(
		number mInst, 
		number motorId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
axisId
The address of an interger to receive the motor's mapped axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_AXIS_NOT_FOUND
No axis has the specified motor mapped.
Notes:
axisId
will be -1 if the function returns MERROR_AXIS_NOT_FOUND.
Usage:
// Get the parent axis for motor 0.
MINSTANCE mInst = 0;
int axisId = -1;
int rc = mcMotorGetAxis(mInst, 0, &axisId);



================================================================================
[246/904] mcMotorGetCountsPerUnit
Source: CATmcMotorGetCountsPerUnit.htm
================================================================================

mcMotorGetCountsPerUnit
mcMotorGetCountsPerUnit
C/C++ Syntax:
int mcMotorGetCountsPerUnit(
		MINSTANCE mInst, 
		int motorId, 
		double *counts)
LUA Syntax:
counts, rc = mc.mcMotorGetCountsPerUnit(
		number mInst, 
		number motorId)
Description:
Retrieve the counts per native machine units for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
The address of a double to receive the counts value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the counts per unit for motor 0.
MINSTANCE mInst = 0;
double counts = 0.0;
int rc = mcMotorGetCountsPerUnit(mInst, 0, &counts);



================================================================================
[247/904] mcMotorGetInfoStruct
Source: CATmcMotorGetInfoStruct.htm
================================================================================

mcMotorGetInfoStruct
mcMotorGetInfoStruct
C/C++ Syntax:
mcMotorGetInfoStruct(
		MINSTANCE mInst, 
		int motorId, 
		motorinfo_t *minf);
LUA Syntax:
N/A
Description:
Retrieve the motor information of the motor in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
minf
The address of a motorinfo_t struct to receive the motor settings.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
minf
cannot be NULL.
Notes:
Retrieve all the motor settings in one call.
To change any of the settings mcMotorSetInfoStruct() may be called.
struct motorinfo {
	double CountsPerUnit;    // Number of encoder counts or steps per unit.
	double MaxVelocity;      // Max velocity of the axis.
	double MaxAcceleration;  // Max rate to accelerate.
	BOOL   Reverse;          // Is the axis reversed?
	double BacklashAmount;   // The amount of backlash in counts.
	double CurrentVelocity;  // The speed the axis is moving, This could be reported by the motion deivce.
	int    CurrentPosition;  // The Current Position (From the motion device).
	BOOL   Homed;            // True if the axis has been homed.
	long   SoftMaxLimit;     // Count for the max travel.
	long   SoftMinLimit;     // Count for the min travel.
	BOOL   CanHome;          // Can this motor home?
	BOOL   Enabled;          // Is this motor enabled?
	long   EnableDelay;      // ms to delay the enable signal for this motor.
	int    AxisId;           // -1 if no axis has mapped this motor.
};
typedef struct motorinfo motorinfo_t;
Usage:
MINSTANCE mInst = 0;
int m = 2;
motorinfo_t minf;
mcMotorGetInfoStruct(mInst, m, &minf);
// Get data for motor 2.



================================================================================
[248/904] mcMotorGetMaxAccel
Source: CATmcMotorGetMaxAccel.htm
================================================================================

mcMotorGetMaxAccel
mcMotorGetMaxAccel
C/C++ Syntax:
int mcMotorGetMaxAccel(
		MINSTANCE mInst, 
		int motorId, 
		double *maxAccel);
LUA Syntax:
maxAccel, rc = mc.mcMotorGetMaxAccel(
		number mInst, 
		number motorId)
Description:
Retrieve the maximum acceleration value for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxAccel
The address of a double to receive the maximum acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the max accel for motor 0.
MINSTANCE mInst = 0;
double maxAccel = 0.0;
int rc = mcMotorGetMaxAccel(mInst, 0, &maxAccel);



================================================================================
[249/904] mcMotorGetMaxVel
Source: CATmcMotorGetMaxVel.htm
================================================================================

mcMotorGetMaxVel
mcMotorGetMaxVel
C/C++ Syntax:
int mcMotorGetMaxVel(
		MINSTANCE mInst, 
		int motorId, 
		double *maxVel)
LUA Syntax:
maxVel, rc = mc.mcMotorGetMaxVel(
		number mInst, 
		number motorId)
Description:
Retrieve the maximum velocity for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
The address of a double to receive the maximum velocity value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the max vel for motor 0.
MINSTANCE mInst = 0;
double maxVel = 0.0;
int rc = mcMotorGetMaxVel(mInst, 0, &maxVel);



================================================================================
[250/904] mcMotorGetPos
Source: CATmcMotorGetPos.htm
================================================================================

mcMotorGetPos
mcMotorGetPos
C/C++ Syntax:
int mcMotorGetPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
val, rc = mc.mcMotorGetPos(
		number mInst, 
		number motorId)
Description:
Retrieve the position of the given motor in counts (fractional counts supported).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the motor position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
val
cannot be NULL.
Notes:
If the motor is not setup,
val
will contain zero.
Usage:
MINSTANCE mInst = 0;
double Motor1Pos = 0;
// Get the position of the Motor 1.
mcMotorGetPos(mInst, 1, &Motor1Pos);



================================================================================
[251/904] mcMotorGetVel
Source: CATmcMotorGetVel.htm
================================================================================

mcMotorGetVel
mcMotorGetVel
C/C++ Syntax:
int mcMotorGetVel(
		MINSTANCE mInst, 
		int motor, 
		double *velocity);
LUA Syntax:
velocity, rc = mc.mcMotorGetVel(
		number mInst, 
		number motor)
Description:
Retreive the current velocity of a motor in counts per sec.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
velocity
The address of a double to receive the motor velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
velocity
cannot be NULL.
Notes:
Reports the speed of a motor.  The returned value can be fractional counts.
If the motor is not found, a value of zero is returned in velocity.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
double CurrentVel = 0;
mcMotorSetVel(mInst, m, &CurrentVel);
// Get the current speed of motor2.



================================================================================
[252/904] mcMotorIsHomed
Source: CATmcMotorIsHomed.htm
================================================================================

mcMotorIsHomed
mcMotorIsHomed
C/C++ Syntax:
int mcMotorIsHomed(
		MINSTANCE mInst, 
		int motorId, 
		BOOL *homed);
LUA Syntax:
homed, rc = mc.mcMotorIsHomed(
		number mInst, 
		number motorId)
Description:
Get the homed state of the motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
homed
The address of a BOOL to receive the homed state of a motor. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
homed
cannot be NULL.
Notes:
Reports the homed state of the motor.  The returned value 1 for homed and 0 for not homed.
All child motors linked to axis must be homed for the axis to report as homed.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
int Homed = 0;
mcMotorIsHomed(mInst, m, &Homed);
// Get the homed state of motor2.



================================================================================
[253/904] mcMotorIsStill
Source: CATmcMotorIsStill.htm
================================================================================

mcMotorIsStill
mcMotorIsStill
C/C++ Syntax:
int mcMotorIsStill(
		MINSTANCE mInst, 
		int motorId, 
		BOOL *still);
LUA Syntax:
still, rc = mc.mcMotorIsStill(
		number mInst, 
		number motorId)
Description:
Set the motor is not moving from motion Motion plugin that owns this motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorID
The motor id.
still
The address of an BOOL to receive the still state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
still
cannot be NULL.
Notes:
Motor has its "isStill" when it is not in motion.
still
== TRUE is no movement,
still
== FALSE motor has movment.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR0;
int still = 0;
mcMotorSetStill(mInst, m, &still);
// Get the state if MOTOR0 is still



================================================================================
[254/904] mcMotorMapGetDefinition
Source: CATmcMotorMapGetDefinition.htm
================================================================================

mcMotorMapGetDefinition
mcMotorMapGetDefinition
C/C++ Syntax:
int mcMotorMapGetDefinition(
		MINSTANCE mInst, 
		int motorId, 
		long *lengthCounts, 
		long *numPoints);
LUA Syntax:
lengthCounts, numPoints, rc = mc.mcMotorMapGetDefinition(
		number mInst, 
		number motorId)
Description:
Retrieve the motor screw map definition.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
lengthCounts
and
numPoints
are NULL.
Notes:
None.
Usage:
//
MINSTANCE mInst = 0;
long lengthCounts;
long numPoints;
int rc = mcMotorMapGetDefinition(mInst, 0, &lengthCounts, &numPoints);



================================================================================
[255/904] mcMotorMapGetLength
Source: CATmcMotorMapGetLength.htm
================================================================================

mcMotorMapGetLength
mcMotorMapGetLength
C/C++ Syntax:
int mcMotorMapGetLength(
		MINSTANCE mInst, 
		int motorId, 
		int *length);
LUA Syntax:
length, rc = mcMotorMapGetLength(
		number mInst, 
		number motorId)
Description:
Retrieve the motor screw map length (length of measured screw in counts).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
length
the address of an integer to receive the screw length in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
length
is NULL.
Notes:
None.
Usage:
// Get the screw length for motor zero.
MINSTANCE mInst = 0;
int length;
int rc = mcMotorMapGetLength(mInst, 0, &length);



================================================================================
[256/904] mcMotorMapGetPoint
Source: CATmcMotorMapGetPoint.htm
================================================================================

mcMotorMapGetPoint
mcMotorMapGetPoint
C/C++ Syntax:
int mcMotorMapGetPoint(
		MINSTANCE mInst, 
		int motorId, 
		int point, 
		int *error);
LUA Syntax:
error, rc = mc.mcMotorMapGetPoint(
		numbser mInst, 
		numbser motorId, 
		numbser point)
Description:
Retrieves the screw map error for the given motor and point.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
point
An integer specifying the measurement point number.
error
the address of an integer to receive the screw error (in counts).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
error
is NULL.
Notes:
None.
Usage:
// Get the screw map error for motor 0, measurement point 10.
MINSTANCE mInst = 0;
int screwErr; 
int rc = mcMotorMapGetPoint(mInst, 0, 10, &screwErr);



================================================================================
[257/904] mcMotorMapGetPointCount
Source: CATmcMotorMapGetPointCount.htm
================================================================================

mcMotorMapGetPointCount
mcMotorMapGetPointCount
C/C++ Syntax:
int mcMotorMapGetPointCount(
		MINSTANCE mInst, 
		int motorId, 
		int *points);
LUA Syntax:
points, rc = mc.mcMotorMapGetPointCount(
		number mInst, 
		number motorId)
Description:
Retrieve the number of measurement points in the screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
the address of an integer to receive the number of measurement points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is NULL.
Notes:
None.
Usage:
// Get the number of measurement points.
MINSTANCE mInst = 0;
int points;
int rc = mcMotorMapGetPointCount(mInst, 0, &points);



================================================================================
[258/904] mcMotorMapGetStart
Source: CATmcMotorMapGetStart.htm
================================================================================

mcMotorMapGetStart
mcMotorMapGetStart
C/C++ Syntax:
int mcMotorMapGetStart(
		MINSTANCE mInst, 
		int motorId, 
		int *startPoint);
LUA Syntax:
startPoint, rc = mc.mcMotorMapGetStart(
		number mInst, 
		number motorId)
Description:
Retrieve the starting point of the motor screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
startPoint
The address of an integer to receive the screw map starting point.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
startPoint
is NULL.
Notes:
None.
Usage:
// Get the starting point for the motor 0 screw map.
MINSTANCE mInst = 0;
int startPoint;
int rc = mcMotorMapGetStart(mInst, 0, &startPoint);



================================================================================
[259/904] mcMotorMapSetDefinition
Source: CATmcMotorMapSetDefinition.htm
================================================================================

mcMotorMapSetDefinition
mcMotorMapSetDefinition
C/C++ Syntax:
int mcMotorMapSetDefinition(
		MINSTANCE mInst, 
		int motorId, 
		long lengthCounts, 
		long numPoints);
LUA Syntax:
rc = mc.mcMotorMapSetDefinition(
		number mInst, 
		number motorId, 
		number lengthCounts,
		number numPoints)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
lengthCounts
An integer specifying the length of the measured screw in counts.
numPoints
An integer specifying the number of measurement points in the screw map.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This is the prefered method of defining a motor screw map.
Usage:
// Set the screw map definition for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetDefinition(mInst, 0, 20000, 20);



================================================================================
[260/904] mcMotorMapSetLength
Source: CATmcMotorMapSetLength.htm
================================================================================

mcMotorMapSetLength
mcMotorMapSetLength
C/C++ Syntax:
int mcMotorMapSetLength(
		MINSTANCE mInst, 
		int motorId, 
		int length);
LUA Syntax:
rc = mc.mcMotorMapSetLength(
		number mInst, 
		number motorId, 
		number length);
Description:
Set the length of the screw (in counts) for the screw map of the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
length
An integer specifying the length.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
length
is less <= 0.
Notes:
None.
Usage:
// Set the screw length for the motor 0 screw map.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetLength(mInst, 0, 20000);



================================================================================
[261/904] mcMotorMapSetPoint
Source: CATmcMotorMapSetPoint.htm
================================================================================

mcMotorMapSetPoint
mcMotorMapSetPoint
C/C++ Syntax:
int mcMotorMapSetPoint(
		MINSTANCE mInst, 
		int motorId, 
		int point, 
		int error);
LUA Syntax:
rc = mc.mcMotorMapSetPoint(
		number mInst, 
		number motorId, 
		number point, 
		number error);
Description:
Set the error (in counts) for the screw map point for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
point
An integer specifying the measurement point number.
error
An integer specifying the screw error.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None
Usage:
// Set the error in motor 0 screw map.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetPoint(mInst, 0, 5, 12);



================================================================================
[262/904] mcMotorMapSetPointCount
Source: CATmcMotorMapSetPointCount.htm
================================================================================

mcMotorMapSetPointCount
mcMotorMapSetPointCount
C/C++ Syntax:
int mcMotorMapSetPointCount(
		MINSTANCE mInst, 
		int motorId, 
		int points);
LUA Syntax:
rc = mc.mcMotorMapSetPointCount(
		number mInst, 
		number motorId, 
		number points);
Description:
Set the number of measured points for the screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
An integer specifying the number of measured points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is <= 0.
Notes:
None.
Usage:
// Set the number of measured points in the screw map for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetPointCount(mInst, 0, 20);



================================================================================
[263/904] mcMotorMapSetStart
Source: CATmcMotorMapSetStart.htm
================================================================================

mcMotorMapSetStart
mcMotorMapSetStart
C/C++ Syntax:
int mcMotorMapSetStart(
		MINSTANCE mInst, 
		int motorId, 
		int start);
LUA Syntax:
rc = mc.mcMotorMapSetStart(
		number mInst, 
		number motorId, 
		number start)
Description:
Set the starting point number of the screw map of the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
start
An integer specifying the starting point number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None/
Usage:
// Set the starting point number for the motor 0 screw map. (usually 0)
MINSTANCE mInst = 0;
int rc = mcMotorMapSetStart(mInst, 0, 0);



================================================================================
[264/904] mcMotorRegister
Source: CATmcMotorRegister.htm
================================================================================

mcMotorRegister
mcMotorRegister
C/C++ Syntax:
mcMotorRegister(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Register a motor to the system (used by motion plugins).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
motorId
is out of range.
Notes:
Add motor to the core from a motion device. Motion devices can register max of MC_MAX_MOTORS.
Usage:
MINSTANCE mInst = 0;
for (int m = MOTOR0; m < MOTOR4; m++) { 
    mcMotorRegister(mInst, m);
// Register motor0 - motor2 in the core.
}



================================================================================
[265/904] mcMotorSetCountsPerUnit
Source: CATmcMotorSetCountsPerUnit.htm
================================================================================

mcMotorSetCountsPerUnit
mcMotorSetCountsPerUnit
C/C++ Syntax:
int mcMotorSetCountsPerUnit(
		MINSTANCE mInst, 
		int motorId, 
		double counts);
LUA Syntax:
rc = mc.mcMotorSetCountsPerUnit(
		number mInst, 
		number motorId,
		number counts)
Description:
Set the counts per native machine setup units.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
A double specifying the counts value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set the counts for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorSetCountsPerUnit(mInst, 0, 1024);



================================================================================
[266/904] mcMotorSetHomePos
Source: CATmcMotorSetHomePos.htm
================================================================================

mcMotorSetHomePos
mcMotorSetHomePos
C/C++ Syntax:
int mcMotorSetHomePos(
		MINSTANCE mInst, 
		int motorId, 
		int count);
LUA Syntax:
rc = mc.mcMotorSetHomePos(
		number mInst, 
		number motorId, 
		number count)
Description:
Set the home position for the motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
count
The positon of the motor away from the home switch
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Sets the position of the motor away from the home switch. This is used to provide a home offest for the motor.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
int count = 1200;
mcMotorSetHomePos(mInst, m, count);
// Set the Home position of motor2.



================================================================================
[267/904] mcMotorSetInfoStruct
Source: CATmcMotorSetInfoStruct.htm
================================================================================

mcMotorSetInfoStruct
mcMotorSetInfoStruct
C/C++ Syntax:
int mcMotorSetInfoStruct(
		MINSTANCE mInst, 
		int motoId, 
		motorinfo_t *minf);
LUA Syntax:
N/A
Description:
Retrieve the motor info struct to get all the settings of the motor in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
minf
The address of a motorinfo_t to receive the motor settings.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
minf
cannot be NULL.
Notes:
To get cuttent settings mcMotorGetInfoStruct() must be called.
struct motorinfo {
	double CountsPerUnit;    // Number of encoder counts or steps per unit.
	double MaxVelocity;      // Max velocity of the axis.
	double MaxAcceleration;  // Max rate to accelerate.
	BOOL   Reverse;          // Is the axis reversed?
	double BacklashAmount;   // The amount of backlash in counts.
	double CurrentVelocity;  // The speed the axis is moving, This could be reported by the motion deivce.
	int    CurrentPosition;  // The Current Position (From the motion device).
	BOOL   Homed;            // True if the axis has been homed.
	long   SoftMaxLimit;     // Count for the max travel.
	long   SoftMinLimit;     // Count for the min travel.
	BOOL   CanHome;          // Can this motor home?
	BOOL   Enabled;          // Is this motor enabled?
	long   EnableDelay;      // ms to delay the enable signal for this motor.
};
typedef struct motorinfo motorinfo_t;
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
motorinfo_t minf;
mcMotorGetInfoStruct(mInst, m, &minf);
// Get data for motor2.
minf.CountsPerUnit /= 2;
//Divid motor counts per unit by 2.
mcMotorSetInfoStruct(mInst, m, &minf);
// Set data for motor2.



================================================================================
[268/904] mcMotorSetMaxAccel
Source: CATmcMotorSetMaxAccel.htm
================================================================================

mcMotorSetMaxAccel
mcMotorSetMaxAccel
C/C++ Syntax:
int mcMotorSetMaxAccel(
		MINSTANCE mInst, 
		int motorId, 
		double maxAccel);
LUA Syntax:
rc = mc.mcMotorSetMaxAccel(
		number mInst, 
		number motorId, 
		number maxAccel)
Description:
Set the maximum acceleration value for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxAccel
A double specifying the maximum acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set a new accel value for motor 0.
MINSTANCE mInst = 0;
int mcMotorSetMaxAccel(mInst, 0, 75);



================================================================================
[269/904] mcMotorSetMaxVel
Source: CATmcMotorSetMaxVel.htm
================================================================================

mcMotorSetMaxVel
mcMotorSetMaxVel
C/C++ Syntax:
int mcMotorSetMaxVel(
		MINSTANCE mInst, 
		int motorId, 
		double maxVel);
LUA Syntax:
rc = mc.mcMotorSetMaxVel(
		number mInst, 
		number motorId,
		number maxVel)
Description:
Set the maximum velocity for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
A double specifying the maximum velocity value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set the maximum velocity for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorSetMaxVel(mInst, 0, 500);



================================================================================
[270/904] mcMotorUnregister
Source: CATmcMotorUnregister.htm
================================================================================

mcMotorUnregister
mcMotorUnregister
C/C++ Syntax:
int mcMotorUnregister(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Unregister a motor from the core (usually not used.)
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Remove motor from the core, this should only be done by the owner of the motor (Motion plugin).
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
mcMotorUnregister(mInst, m);
// Unregister motor2 from the Core.



================================================================================
[271/904] mcMpgGetAccel
Source: CATmcMpgGetAccel.htm
================================================================================

mcMpgGetAccel
mcMpgGetAccel
C/C++ Syntax:
int mcMpgGetAccel(
		MINSTANCE mInst, 
		int mpg, 
		double *percentMaxAccel);
LUA Syntax:
percentMaxAccel, rc = mc.mcMpgGetAccel(
		number mInst, 
		number mpg)
Description:
Get the percentage of the maximum acceleration for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxAccel
The address of a double to receive the max acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentMaxAccel
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the current accel for MPG 0.
MINSTANCE mInst = 0;
double percentMaxAccel = 0;
int rc;
rc = mcMpgGetAccel(mInst, 0, &percentMaxAccel);



================================================================================
[272/904] mcMpgGetAxis
Source: CATmcMpgGetAxis.htm
================================================================================

mcMpgGetAxis
mcMpgGetAxis
C/C++ Syntax:
int mcMpgGetAxis(
		MINSTANCE mInst, 
		int mpg, 
		int *axisId);
LUA Syntax:
axisId, rc = mc.mcMpgGetAxis(
		number mInst, 
		number mpg)
Description:
Retrieve the current axis for the specified MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
axisId
the address of a integer to revceive the axis ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
axisId
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the currently selected axis for MPG 0.
MINSTANCE mInst = 0;
int axisId;
int rc = mcMpgGetAxis(mInst, 0, &axisId);



================================================================================
[273/904] mcMpgGetCountsPerDetent
Source: CATmcMpgGetCountsPerDetent.htm
================================================================================

mcMpgGetCountsPerDetent
mcMpgGetCountsPerDetent
C/C++ Syntax:
int mcMpgGetCountsPerDetent(
		MINSTANCE mInst, 
		int mpg, 
		int *pulses);
LUA Syntax:
pulses, rc = mc.mcMpgGetCountsPerDetent(
		number mInst, 
		number mpg)
Description:
Retrieves the number of pulse required to move 1 unit for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
pulses
The address of an integer to receive the pulse count.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
pulses
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the counts per detent for MPG 0.
MINSTANCE mInst = 0;
int cnts;
int rc = mcMpgGetCountsPerDetent(mInst, 0, &cnts);



================================================================================
[274/904] mcMpgGetEnable
Source: CATmcMpgGetEnable.htm
================================================================================

mcMpgGetEnable
mcMpgGetEnable
C/C++ Syntax:
int mcMpgGetEnable(
		MINSTANCE mInst, 
		int mpg, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcMpgGetEnable(
		number mInst, 
		number mpg)
Description:
Get the enabled status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
enabled
The address of a BOOL to receive the MPG's enabled status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the enabled status of MPG 0.
MINSTANCE mInst = 0;
BOOL enabled = MC_FALSE;

int rc = mcMpgGetEnable(mInst, 0, &enabled);



================================================================================
[275/904] mcMpgGetEncoderReg
Source: CATmcMpgGetEncoderReg.htm
================================================================================

mcMpgGetEncoderReg
mcMpgGetEncoderReg
C/C++ Syntax:
int mcMpgGetEncoderReg(
		MINSTANCE mInst, 
		int mpg, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcMpgGetEncoderReg(
		number mInst, 
		number mpg)
Description:
Get the current encoder register that is associated to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
hReg
The address of a MCHREG to receive the encoder register's handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
hReg
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the current encoder associated with MPG 0.
MINSTANCE mInst = 0;
HMCREG hReg = 0;

int rc = mcMpgGetEncoderReg(mInst, 0, &hReg);



================================================================================
[276/904] mcMpgGetInc
Source: CATmcMpgGetInc.htm
================================================================================

mcMpgGetInc
mcMpgGetInc
C/C++ Syntax:
int mcMpgGetInc(
		MINSTANCE mInst, 
		int mpg, 
		double *inc);
LUA Syntax:
inc, rc = mc.mcMpgGetInc(
		number mInst, 
		number mpg)
Description:
Retrieve the increment for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
inc
The address of a double to receive the increment value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
inc
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the incremnt for MPG 0.
MINSTANCE mInst = 0;
double inc;
int rc = mcMpgGetInc(mInst, 0, &inc);



================================================================================
[277/904] mcMpgGetRate
Source: CATmcMpgGetRate.htm
================================================================================

mcMpgGetRate
mcMpgGetRate
C/C++ Syntax:
int mcMpgGetRate(
		MINSTANCE mInst, 
		int mpg, 
		double *percentMaxVel);
LUA Syntax:
percentMaxVel, rc = mc.mcMpgGetRate(
		number mInst, 
		number mpg)
Description:
Retrieve the percentage of the maximum velocity for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxVel
The address of a double to receive the percentage of max velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentMaxVel
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the velocity percentage for MPG 0.
MINSTANCE mInst = 0;
double velPercent;
int rc = mcMpgGetRate(mInst, 0, &velPercent);



================================================================================
[278/904] mcMpgGetReversed
Source: CATmcMpgGetReversed.htm
================================================================================

mcMpgGetReversed
mcMpgGetReversed
C/C++ Syntax:
int mcMpgGetReversed(
		MINSTANCE mInst, 
		int mpg, 
		BOOL *reversed);
LUA Syntax:
reversed, rc = mc.mcMpgGetReversed(
		number mInst, 
		number mpg)
Description:
Get the reveresed status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
reversed
The address of a BOOL to receive the MPG's reversed status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
reversed
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the reversed status of MPG 0.
MINSTANCE mInst = 0;
BOOL reversed = MC_FALSE;

int rc = mcMpgGetReversed(mInst, 0, &reversed);



================================================================================
[279/904] mcMpgGetShuttleMode
Source: CATmcMpgGetShuttleMode.htm
================================================================================

mcMpgGetShuttleMode
mcMpgGetShuttleMode
C/C++ Syntax:
int mcMpgGetShuttleMode(
		MINSTANCE mInst, 
		BOOL *on);
LUA Syntax:
on, rc = mc.mcMpgGetShuttleMode(
		number mInst)
Description:
Determine the state of MPG shuttle mode.
Parameters:
Parameter
Description
mInst
The controller instance.
on
The address of a BOOL to receive the state of MPG shuttle mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
on
is NULL.
Notes:
None.
Usage:
// Check the state of MPG shuttle mode.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcMpgGetShuttleMode(mInst, &enabled);



================================================================================
[280/904] mcMpgGetShuttlePercent
Source: CATmcMpgGetShuttlePercent.htm
================================================================================

mcMpgGetShuttlePercent
mcMpgGetShuttlePercent
C/C++ Syntax:
int mcMpgGetShuttlePercent(
		MINSTANCE mInst, 
		int mpg, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcMpgGetShuttlePercent(
		number mInst, 
		number mpg)
Description:
Retrieve the shuttle mode rate percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percent
The address of a double to receive the shuttle rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentage
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the shuttle percentage for MPG 0.
MINSTANCE mInst = 0;
double percent;
int rc = mcMpgGetShuttlePercentage(mInst, 0, &percent);



================================================================================
[281/904] mcMpgMoveCounts
Source: CATmcMpgMoveCounts.htm
================================================================================

mcMpgMoveCounts
mcMpgMoveCounts
C/C++ Syntax:
int mcMpgMoveCounts(
		MINSTANCE mInst, 
		int mpg, 
		int deltaCounts);
LUA Syntax:
rc = mc.mcMpgMoveCounts(
		number mInst, 
		number mpg, 
		number deltaCounts)
Description:
Move the axis mapped to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
deltaCounts
An integer specifying the number of counts the MPG has moved.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
This is the main MPG function that a plugin that supports encoders will use.  All the plugin has to do is report the delta difference between reads of the encoder.
Usage:
// Move the MPG 0 "n" counts.
MINSTANCE mInst = 0;
int n = 16;
int rc = mcMpgMoveCounts(mInst, 0, n);



================================================================================
[282/904] mcMpgSetAccel
Source: CATmcMpgSetAccel.htm
================================================================================

mcMpgSetAccel
mcMpgSetAccel
C/C++ Syntax:
int mcMpgSetAccel(
		MINSTANCE mInst, 
		int mpg, 
		double percentMaxAccel);
LUA Syntax:
rc = mc.mcMpgSetAccel(
		number mInst, 
		number mpg, 
		number percentMaxAccel)
Description:
Set the acceration percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxAccel
A double specifying the accelration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
The accelation percentage is based off of the maximum acceleration values for the currently mapped axis.
The percentage is expressed as a whole percentage.  e.g. 20.5 for 20 and a half percent.
Usage:
// Set the acceleration value for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetAccel(mInst, 0, 20.5);



================================================================================
[283/904] mcMpgSetAxis
Source: CATmcMpgSetAxis.htm
================================================================================

mcMpgSetAxis
mcMpgSetAxis
C/C++ Syntax:
int mcMpgSetAxis(
		MINSTANCE mInst, 
		int mpg, 
		int axisId);
LUA Syntax:
rc = mc.mcMpgSetAxis(
		number mInst, 
		number mpg, 
		number axis)
Description:
Set the current driven axis for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
axisId
An integer specifying the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set MPG 0 to move the X axis.
MINSTANCE mInst = 0;
int rc = mcMpgSetAxis(mInst, 0, X_AXIS);



================================================================================
[284/904] mcMpgSetCountsPerDetent
Source: CATmcMpgSetCountsPerDetent.htm
================================================================================

mcMpgSetCountsPerDetent
mcMpgSetCountsPerDetent
C/C++ Syntax:
int mcMpgSetCountsPerDetent(
		MINSTANCE mInst, 
		int mpg, 
		int pulses);
LUA Syntax:
rc = mc.mcMpgSetCountsPerDetent(
		number mInst, 
		number mpg, 
		number pulses);
Description:
Set the number of counts the MPG outputs for 1 detent. (usually 4)
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
pulses
An integer specifying the number of counts per detent.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the number of counts per detent for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetCountsPerDetent(mInst, 0, 4);



================================================================================
[285/904] mcMpgSetEnable
Source: CATmcMpgSetEnable.htm
================================================================================

mcMpgSetEnable
mcMpgSetEnable
C/C++ Syntax:
int mcMpgSetEnable(
		MINSTANCE mInst, 
		int mpg, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcMpgSetEnable(
		number mInst, 
		number mpg
		number enabled)
Description:
Get the current encoder register that is associated to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
enabled
The MPG's enabled status. (MC_TRUE or MC_FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the enabled status of MPG 0.
MINSTANCE mInst = 0;
BOOL enabled = MC_FALSE;

int rc = mcMpgSetEnable(mInst, 0, MC_TRUE);



================================================================================
[286/904] mcMpgSetEncoderReg
Source: CATmcMpgSetEncoderReg.htm
================================================================================

mcMpgSetEncoderReg
mcMpgSetEncoderReg
C/C++ Syntax:
int mcMpgSetEncoderReg(
		MINSTANCE mInst, 
		int mpg, 
		HMCREG hReg);
LUA Syntax:
rc = mc.mcMpgSetEncoderReg(
		number mInst, 
		number mpg
		number hReg)
Description:
Associate an encoder register to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
hReg
A MCHREG to associate to the given MPG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Associate an encoder with MPG 0.
MINSTANCE mInst = 0;
HMCREG hReg = 0;
int rc
rc = mcRegGetHandle(mInst, "/Sim0/Encoder0", &hReg);
if (rc == MERROR_NOERROR) {
	rc = mcMpgSetEncoderReg(mInst, 0, hReg);
}



================================================================================
[287/904] mcMpgSetInc
Source: CATmcMpgSetInc.htm
================================================================================

mcMpgSetInc
mcMpgSetInc
C/C++ Syntax:
int mcMpgSetInc(
		MINSTANCE mInst, 
		int mpg, 
		double inc);
LUA Syntax:
rc = mc.mcMpgSetInc(
		number mInst, 
		number mpg, 
		number inc);
Description:
Set the desired incremnt (.100, .010, .001, etc...) for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
inc
A double specifying the increment.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the increment to .001 for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetInc(mInst, 0, .001);



================================================================================
[288/904] mcMpgSetRate
Source: CATmcMpgSetRate.htm
================================================================================

mcMpgSetRate
mcMpgSetRate
C/C++ Syntax:
int mcMpgSetRate(
		MINSTANCE mInst, 
		int mpg, 
		double percentMaxVel);
LUA Syntax:
rc = mc.mcMpgSetRate(
		number mInst, 
		number mpg, 
		number percentMaxVel)
Description:
Set the percentage of the maximum velocity for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxVel
A double specifying the percentage of the maximum velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
The velocity percentage is based off of the maximum velocity value for the currently mapped axis.
The percentage is expressed as a whole percentage.  e.g. 20.5 for 20 and a half percent.
Usage:
// Set the rate for MPG 0 to 25.0%
MINSTANCE mInst = 0;
int rc = mcMpgSetRate(mInst, 0, 25.0);



================================================================================
[289/904] mcMpgSetReversed
Source: CATmcMpgSetReversed.htm
================================================================================

mcMpgSetReversed
mcMpgSetReversed
C/C++ Syntax:
int mcMpgSetReversed(
		MINSTANCE mInst, 
		int mpg, 
		BOOL reversed);
LUA Syntax:
rc = mc.mcMpgGetReversed(
		number mInst, 
		number mpg
		number reversed)
Description:
Set the reveresed status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
reversed
The MPG's reversed status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Get the reversed status of MPG 0.
MINSTANCE mInst = 0;
BOOL reversed = MC_FALSE;

int rc = mcMpgSetReversed(mInst, 0, reversed);
// MC_TRUE



================================================================================
[290/904] mcMpgSetShuttleMode
Source: CATmcMpgSetShuttleMode.htm
================================================================================

mcMpgSetShuttleMode
mcMpgSetShuttleMode
C/C++ Syntax:
int mcMpgSetShuttleMode(
		MINSTANCE mInst, 
		BOOL on);
LUA Syntax:
rc = mc.mcMpgSetShuttleMode(
		number mInst, 
		number on);
Description:
Set the state of MPG shuttle mode.
Parameters:
Parameter
Description
mInst
The controller instance.
on
A BOOL specifying the state of the MPG shuttle mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on MPG shuttle mode.
MINSTANCE mInst = 0;
int rc = mcMpgSetShuttleMode(mInst, MC_ON);



================================================================================
[291/904] mcMpgSetShuttlePercent
Source: CATmcMpgSetShuttlePercent.htm
================================================================================

mcMpgSetShuttlePercent
mcMpgSetShuttlePercent
C/C++ Syntax:
int mcMpgSetShuttlePercent(
		MINSTANCE mInst, 
		int mpg, 
		double percent);
LUA Syntax:
rc = mc.mcMpgGetShuttlePercent(
		number mInst, 
		number mpg
		number percent)
Description:
Set the shuttle mode rate percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percent
The desired shuttle rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentage
is out of range or
mpg
is out of range.
Notes:
None.
Usage:
// Set the shuttle percentage for MPG 0.
MINSTANCE mInst = 0;
double percent = 200.5;
int rc = mcMpgGetShuttlePercentage(mInst, 0, percent);



================================================================================
[292/904] mcPluginConfigure
Source: CATmcPluginConfigure.htm
================================================================================

mcPluginConfigure
mcPluginConfigure
C/C++ Syntax:
int mcPluginConfigure(
		MINSTANCE mInst, 
		int plugId);
LUA Syntax:
N/A
Description:
Display the plugin configuration dialog for the given plugin ID.
Parameters:
Parameter
Description
mInst
The controller instance.
plugId
An integer specifying the plugin ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
plugId
was not found.
Notes:
Plugins can contain multiple devices.  However, only one configuration dialog is used so plugins must have a dialog that is capable of configuring every device that belongs to it (if needed).
Usage:
MINSTANCE mInst = 0;
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc = mcPluginGetInfoStruct(hPlug, &pluginf);
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
// Call the configuration dialog.
rc =
mcPluginConfigure(mInst, pluginId);
;
	}
}



================================================================================
[293/904] mcPluginCoreLoad
Source: CATmcPluginCoreLoad.htm
================================================================================

mcPluginCoreLoad
mcPluginCoreLoad
C/C++ Syntax:
int mcPluginCoreLoad(
		const char *shortName);
LUA Syntax:
N/A
Description:
Load a plugin into the core.
Parameters:
Parameter
Description
shortName
A string buffer specifying the base name of the plugin.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
shortName
was not found.
Notes:
Normally, all plugins are found and loaded by the core at stratup.  This function provides a means to load a plugin after startup.  For instance, if the plugin was installed after startup.  The function uses the base name of the plugin to locate it by appending the platform specific extension (
m4pw
for Windows,
m4pl
for Linux, and
m4pm
for Mac).
Usage:
// Load the mcGalil plugin.
int rc = mcPluginCoreLoad("mcGalil");



================================================================================
[294/904] mcPluginCoreUnload
Source: CATmcPluginCoreUnload.htm
================================================================================

mcPluginCoreUnload
mcPluginCoreUnload
C/C++ Syntax:
int mcPluginCoreUnload(
		const char *shortName);
LUA Syntax:
N/A
Description:
Unload a plugin from the core.
Parameters:
Parameter
Description
shortName
A string buffer specifying the base name of the plugin.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
shortName
was not found.
Notes:
About the only reason to unload a plugin from the core is if it is being uninstalled.  Plugins should be tested during their development to ensure that they can be unloaded safely without causing crashes or other abnormal behavior.
Usage:
// Unload the mcGalil plugin.
int rc = mcPluginCoreUnload("mcGalil");



================================================================================
[295/904] mcPluginDiagnostic
Source: CATmcPluginDiagnostic.htm
================================================================================

mcPluginDiagnostic
mcPluginDiagnostic
C/C++ Syntax:
int mcPluginDiagnostic(
		MINSTANCE mInst, 
		int pluginId);
LUA Syntax:
N/A
Description:
Display the plugin diagnostic dialog for the given plugin ID.
Parameters:
Parameter
Description
mInst
The controller instance.
plugId
An integer specifying the plugin ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
plugId
was not found.
Notes:
Plugins can contain multiple devices.  However, only one diagnostic dialog is used so plugins must have a dialog that is capable of diagnosing every device that belongs to it (if needed).
Usage:
MINSTANCE mInst = 0;
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins looking for plugins
// that have diagnostic dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_DIAG, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc = mcPluginGetInfoStruct(hPlug, &pluginf);
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
// Call the diagnostics dialog.
rc =
mcPluginDiagnostic(mInst, pluginId);
;
	}
}



================================================================================
[296/904] mcPluginEnable
Source: CATmcPluginEnable.htm
================================================================================

mcPluginEnable
mcPluginEnable
C/C++ Syntax:
int mcPluginEnable(
		HMCPLUG hPlug, 
		BOOL enable);
LUA Syntax:
N/A
Description:
Enable a plugin.
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
enable
A BOOL specifying the plugin enable state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
Notes:
None.
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// Enable the plugin.
rc =
mcPluginEnable(hPlug, TRUE)
;
}



================================================================================
[297/904] mcPluginGetEnabled
Source: CATmcPluginGetEnabled.htm
================================================================================

mcPluginGetEnabled
mcPluginGetEnabled
C/C++ Syntax:
int mcPluginGetEnabled(
		HMCPLUG hPlug, 
		BOOL *enabled);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
enabled
The address of a BOOL to receive plugin enable state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_INVALID_ARG
enabled
is NULL.
Notes:
Usage:
HMCPLUG hPlug = 0;
BOOL enabled = FALSE;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// See if the plugin is enabled..
rc =
mcPluginGetEnabled(hPlug, &enabled)
;
	if (rc == MERROR_NOERROR) {
		if (enabled == TRUE) {
// The plugin is enabled!!!
} else {
// The plugin is not enabled!!!
}
	}
}



================================================================================
[298/904] mcPluginGetInfoStruct
Source: CATmcPluginGetInfoStruct.htm
================================================================================

mcPluginGetInfoStruct
mcPluginGetInfoStruct
C/C++ Syntax:
mcPluginGetInfoStruct(HMCPLUG hPlug, pluginfo_t *pluginf);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
pluginf
The address of a pluginfo_t struct to receive the plugin information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_INVALID_ARG
pluginf
is NULL.
Notes:
Usage:
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc =
mcPluginGetInfoStruct(hPlug, &pluginf)
;
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
		...
	}
}



================================================================================
[299/904] mcPluginGetLicenseFeature
Source: CATmcPluginGetLicenseFeature.htm
================================================================================

mcPluginGetLicenseFeature
mcPluginGetLicenseFeature
C/C++ Syntax:
int mcPluginGetLicenseFeature(
		HMCPLUG hPlug, 
		int index, 
		char *buf, 
		int bufSize, 
		BOOL *status);
LUA Syntax:
N/A
Description:
Get the plugin licensed features by the given index and return their status (licensed or not).
Parameters:
Parameter
Description
mInst
The controller instance.
index
An integer specifying the index of the license feature to retrieve.
buf
A string buffer to receive the license feature name.
bufSize
The length of the string buffer.
status
The address of a BOOL to receive the license status of the feature (TRUE/FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hPlug
is zero,
buf
or
status
is NULL,
bufSize
is <= 0.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_NODATA
No more licensed features can be found.
Notes:
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Get all of the plugin license features
int index = 0;
	char buf[80];
	BOOL licensed = FALSE;
	while (
mcPluginGetLicenseFeature(hPlug, index, buf, sizeof(buf), &licensed)
== MERROR_NOERROR) {
		printf("license feature %s is %s.\n", buf, licensed == TRUE ? "licensed" : "not licensed");
		index++;
	}
}



================================================================================
[300/904] mcPluginGetNextHandle
Source: CATmcPluginGetNextHandle.htm
================================================================================

mcPluginGetNextHandle
mcPluginGetNextHandle
C/C++ Syntax:
int mcPluginGetNextHandle(
		int plugType, 
		HMCPLUG startPlug, 
		HMCPLUG *hPlug);
LUA Syntax:
N/A
Description:
Provides a means of looping through all or only plugins with specific attributes.
Parameters:
Parameter
Description
plugType
An integer specifying the plugin attributes. (PLUG_TYPE_NONE, PLUG_TYPE_MOTION, PLUG_TYPE_IO, PLUG_TYPE_SCRIPT, PLUG_TYPE_CONFIG, PLUG_TYPE_DIAG, PLUG_TYPE_REG, PLUG_TYPE_JOG, PLUG_TYPE_ALL)
startPlug
The starting HMCPLUG handle with which to retrieve the next handle in the list. (Must be 0 to retrieve the first handle in the list)
hPlug
The address of a HMCPLUG to receive the next plugin handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_NODATA
No more plugins with the specified attributes can be found.
Notes:
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs and privide I/O.
int attr = PLUG_TYPE_CONFIG | PLUG_TYPE_IO;
while (
mcPluginGetNextHandle(attr, hPlug, &hPlug)
== MERROR_NOERROR) {
// Enable the plugin.
rc = mcPluginEnable(hPlug, TRUE);
}



================================================================================
[301/904] mcPluginGetValid
Source: CATmcPluginGetValid.htm
================================================================================

mcPluginGetValid
mcPluginGetValid
C/C++ Syntax:
int mcPluginGetValid(
		HMCPLUG hPlug, 
		BOOL *valid);
LUA Syntax:
N/A
Description:
Check to see if the plugin is valid.
Parameters:
Parameter
Description
hPlug
A HMCPLUG specifying the plugin handle.
valid
The address of a BOOL to receive the plugins validity status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hPlug
is 0 or
valid
is NULL
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
cannot be found.
Notes:
Plugin validity is a function of the plugin signature resolving to a certified Mach developer.  If no signature file is provided with the plugin or it is invalid, the plugin will not function.
Plugin signatures are generated with a developer key.  Developer keys can be requested by contacting Newfangled Solutions, LLC.
Usage:
HMCPLUG hPlug = 0;
BOOL valid = FALSE;
// Loop through all of the plugins checking to see if they are valid.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Check the plugin validity.
rc =
mcPluginGetValid(hPlug, &valid)
;
	if (rc == MERROR_NOERROR) {
		if (valid == TRUE) {
// The plugin is valid and will function.
} else {
// The plugin is invalid and will not function.
}
	}
}



================================================================================
[302/904] mcPluginInstall
Source: CATmcPluginInstall.htm
================================================================================

mcPluginInstall
mcPluginInstall
C/C++ Syntax:
int mcPluginInstall(
		const char *m4plug);
LUA Syntax:
N/A
Description:
Provides a means of installing a plugin from a plugin archive.
Parameters:
Parameter
Description
m4Plug
A string buffer specifying the plugin archive to install.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin archive specified by
m4Plug
is not valid.
Notes:
Plugin archive name extentions vary by the plafrom.
m4plugw
for Windows,
m4plugl
for Linux,
m4plugm
for Mac.  If one were to try and install a windows plugin archive on a Linux machine, then MERROR_PLUGIN_NOT_FOUND would be returned.
Usage:
// Install the Windows mcGalil plugin from an installation archive.
int rc = mcPluginInstall("mcGalil.m4Plugw");
if (rc == MERROR_NOERROR) {
//The plugin installed successfully.
}



================================================================================
[303/904] mcPluginRegister
Source: CATmcPluginRegister.htm
================================================================================

mcPluginRegister
mcPluginRegister
C/C++ Syntax:
int mcPluginRegister(
		HMCPLUG hPlug, 
		const char *DeveloperId, 
		const char *Desc, 
		const char *Version, 
		int Type);
LUA Syntax:
N/A
Description:
Registers the plugin to the core.
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle (generated and provided by the core) that defines the current plugin.
DeveloperId
A string buffer specifying the developer ID.
Desc
A string buffer specifying the plugins description.
Version
A string buffer specifying the plugins version.
Type
A integer specifying the plugins attributes (or capabilities).  It can be the logical
OR
combination of PLUG_TYPE_MOTION, PLUG_TYPE_IO, PLUG_TYPE_SCRIPT, PLUG_TYPE_CONFIG, PLUG_TYPE_DIAG, PLUG_TYPE_REG, and PLUG_TYPE_JOG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
is not valid.
Notes:
Once a plugin is found by the core, the core loads the plugin and calls its mcPluginLoad() entry point function.  The plugin should then register itself with the core at this time.
Usage:
// This function gets called (only once) when the Plugin is loaded by Mach Core.
MCP_API int MCP_APIENTRY mcPluginLoad(HMCPLUG id)
{
	...
mcPluginRegister(id, "Newfangled", 
		"Simulator - Newfangled Solutions", MC_VERSION_STR, 
		PLUG_TYPE_MOTION | PLUG_TYPE_IO  | PLUG_TYPE_REG | PLUG_TYPE_CONFIG | PLUG_TYPE_DIAG)
;
	return(MERROR_NOERROR);
}



================================================================================
[304/904] mcPluginRemove
Source: CATmcPluginRemove.htm
================================================================================

mcPluginRemove
mcPluginRemove
C/C++ Syntax:
int mcPluginRemove(const char *shortName);
LUA Syntax:
N/A
Description:
Unloads a plugin and then rmoves the plugin from the core's Plugins directory.
Parameters:
Parameter
Description
shortName
A string buffer specifying the short name (base name).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the plugin sepcified by
shortName
was installed using a plugin archive, then all of the files installed by said archive are removed.  Otherwise, only the plugin itself is removed from the Plugins directory.
Usage:
// Remove the mcGalil plugin.
MINSTANCE mInst = 0;
int rc = mcPluginRemove("mcGalil");



================================================================================
[305/904] mcProfileDeleteKey
Source: CATmcProfileDeleteKey.htm
================================================================================

mcProfileDeleteKey
mcProfileDeleteKey
C/C++ Syntax:
int mcProfileDeleteKey(
		MINSTANCE mInst, 
		const char *section, 
		const char *key);
LUA Syntax:
rc = mc.mcProfileDeleteKey(
		number mInst, 
		string section, 
		string key)
Description:
Delete key from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A pointer to a char buffer with section string.
key
A pointer to a char buffer with key string.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
mcProfileDeleteKey(mInst , "P_Port", "Frequency");



================================================================================
[306/904] mcProfileDeleteSection
Source: CATmcProfileDeleteSection.htm
================================================================================

mcProfileDeleteSection
mcProfileDeleteSection
C/C++ Syntax:
int mcProfileDeleteSection(
		MINSTANCE mInst, 
		const char *section);
LUA Syntax:
rc = mc.mcProfileDeleteSection(
		number mInst, 
		string section)
Description:
Delete the specified section from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer buffer specifying the section.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
mcProfileDeleteKey(mInst , "P_Port");



================================================================================
[307/904] mcProfileExists
Source: CATmcProfileExists.htm
================================================================================

mcProfileExists
mcProfileExists
C/C++ Syntax:
int mcProfileExists(
		MINSTANCE mInst, 
		const char *section, 
		const char *key);
LUA Syntax:
rc = mc.mcProfileExists(
		number mInst, 
		string section, 
		string key)
Description:
Determine if the section or section and key are in the profiles INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
Returns:
Return Code
Description
MC_TRUE
The item pecified by
section
and
key
was found in INI file.
MC_FALSE
The item pecified by
section
and
key
was not found in INI file.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
section
cannot be NULL.
Notes:
If you wish to check only for the existence of a section, use NULL for the value of
key
.
Usage:
MINSTANCE mInst = 0;
mcProfileWriteInt(mInst, "P_Port", "Frequency");



================================================================================
[308/904] mcProfileFlush
Source: CATmcProfileFlush.htm
================================================================================

mcProfileFlush
mcProfileFlush
C/C++ Syntax:
int mcProfileFlush(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileFlush(
		number mInst)
Description:
Forces the core to commit any profile changes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This can be used after writing profile entries to make them "stick" immediately instead of lazily being written.
Usage:
MINSTANCE mInst = 0;
mcProfileFlush(mInst);
// Flush changes to the INI file.



================================================================================
[309/904] mcProfileGetDouble
Source: CATmcProfileGetDouble.htm
================================================================================

mcProfileGetDouble
mcProfileGetDouble
C/C++ Syntax:
mcProfileGetDouble(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		double *retval, 
		double defval);
LUA Syntax:
retval, rc = mc.mcProfileGetDouble(
		number mInst, 
		string section, 
		string key, 
		number defval)
Description:
Read a double value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
retval
The address of a double to receive the value from the section and key location.
defval
The default value if the item is not found.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
double rval=0;
MINSTANCE mInst = 0;
mcProfileGetDouble(mInst , "P_Port", "Frequency", &rval, 25.34);



================================================================================
[310/904] mcProfileGetInt
Source: CATmcProfileGetInt.htm
================================================================================

mcProfileGetInt
mcProfileGetInt
C/C++ Syntax:
int mcProfileGetInt(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		long *retval, 
		long defval);
LUA Syntax:
retval, rc = mc.mcProfileGetInt(
		number mInst, 
		string section, 
		string key, 
		number defval)
Description:
Read a long value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
retval
The address of a long to receive the value from the section and key location.
defval
The default value if the item is not found.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
long rval=0;
int mInst=0;
mcProfileGetInt(mInst , "P_Port", "Frequency", &rval, 25000);



================================================================================
[311/904] mcProfileGetName
Source: CATmcProfileGetName.htm
================================================================================

mcProfileGetName
mcProfileGetName
C/C++ Syntax:
int mcProfileGetName(
		MINSTANCE mInst, 
		char *buff, 
		size_t bufsize);
LUA Syntax:
name, rc = mc.mcProfileGetName(
		number mInst)
Description:
Retrieve the current profile name.
Parameters:
Parameter
Description
mInst
The controller instance.
buff
A string buffer to receive the profile's name.
buffsize
The length of the buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None
Usage:
MINSTANCE mInst = 0;
char buff[80];
memset(buff, 0, 80);
mcProfileGetName(mInst, buff, 80);



================================================================================
[312/904] mcProfileGetString
Source: CATmcProfileGetString.htm
================================================================================

mcProfileGetString
mcProfileGetString
C/C++ Syntax:
int mcProfileGetString(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		char *buff, 
		long buffsize, 
		const char *defval);
LUA Syntax:
buff, rc = mc.mcProfileGetString(
		MINSTANCE mInst, 
		string section, 
		string key, 
		string defval);
Description:
Read a string value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
buff
A string buffer to receive the string from the section and key location.
buffsize
The length of the buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
MINSTANCE m_inst = 0;
char *key = "BufferedTime";
char buff[80];
memset(buff, 0, 80);
mcProfileGetString(mInst , "SomeSection", key, buff, 80, "0.100");



================================================================================
[313/904] mcProfileReload
Source: CATmcProfileReload.htm
================================================================================

mcProfileReload
mcProfileReload
C/C++ Syntax:
int mcProfileReload(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileReload(
		number mInst)
Description:
Forces the core to reload the current profile.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Reloading the profile forces the core to pickup external changes.  It must only be called in the idle state.
Usage:
MINSTANCE mInst = 0;
mcProfileReload(mInst);
// Reload the settings from the INI file.



================================================================================
[314/904] mcProfileSave
Source: CATmcProfileSave.htm
================================================================================

mcProfileSave
mcProfileSave
C/C++ Syntax:
int mcProfileSave(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileSave(
		number mInst)
Description:
Save the profile's settings to the INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Saving the profile will write the settings to the profile's INI file. This will ensure that a power failue will not result in lost settings.  The settings that are saved are the core settings.  Plugin and GUI settings fall under the responsability of the GUI or plugin programmer.
Usage:
MINSTANCE mInst = 0;
mcProfileSave(mInst);
// Flush the settings to the INI file.



================================================================================
[315/904] mcProfileWriteDouble
Source: CATmcProfileWriteDouble.htm
================================================================================

mcProfileWriteDouble
mcProfileWriteDouble
C/C++ Syntax:
int mcProfileWriteDouble(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		double val);
LUA Syntax:
rc = mc.mcProfileWriteDouble(
		number mInst, 
		string section, 
		string key, 
		double val)
Description:
Write a double value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A double specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE mInst=0;
mcProfileWriteDouble(m_cid , "P_Port", "Frequency", 45000);



================================================================================
[316/904] mcProfileWriteInt
Source: CATmcProfileWriteInt.htm
================================================================================

mcProfileWriteInt
mcProfileWriteInt
C/C++ Syntax:
int mcProfileWriteInt(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		long val);
LUA Syntax:
int mcProfileWriteInt(
		number mInst, 
		string section, 
		string key, 
		number val)
Description:
Write a long value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A long specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE mInst = 0;
mcProfileWriteInt(m_cid , "P_Port", "Frequency", 45000);



================================================================================
[317/904] mcProfileWriteString
Source: CATmcProfileWriteString.htm
================================================================================

mcProfileWriteString
mcProfileWriteString
C/C++ Syntax:
int mcProfileWriteString(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		const char *val);
LUA Syntax:
rc = mc.mcProfileWriteString(
		number mInst, 
		string section, 
		string key, 
		string val)
Description:
Write a string value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A string buffer specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE m_inst = 0;
char *key = "BufferedTime"
double BuffTime = .250;
char val[80];
sprintf(val, "%.4f", BuffTime);
mcProfileWriteString(mInst, "Darwin", key, val);



================================================================================
[318/904] mcRegGetCommand
Source: CATmcRegGetCommand.htm
================================================================================

mcRegGetCommand
mcRegGetCommand
C/C++ Syntax:
int mcRegGetCommand(
		HMCREG hReg, 
		char *cmd, 
		size_t cmdLen)
LUA Syntax:
N/A
Description:
Retrieve a command from the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
cmd
A string buffer to receive the command.
cmdLen
The sized of the command buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
cmd
is NULL.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
Notes:
The function will not return a command larger than 1024 bytes.
See Also:
mcRegSendCommand
and
mcRegSetResponse
Usage:
// Retrieve the register command.
int simControl::ProcessMsg(long msg, long param1, long param2)
{
	HMCREG hReg = (HMCREG)param1;
	long RegVal;
	switch (msg) {
	case MSG_REG_COMMAND:
		mcRegGetValueLong(hReg, &RegVal);
		if (hReg = m_RegCommand) {
// Is this our command register?
char command[1024];
			mcRegGetCommand(hReg, command, sizeof(command));
			wxString cmd(command);
			cmd.MakeUpper();
			if (cmd == wxT("THC ON")) {
				m_thc = true;
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC OFF")) {
				m_thc = false;
				mcMotionSync(m_cid);
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC STATUS")) {
				if (m_thc) {
					mcRegSetResponse(hReg, "1");
				} else {
					mcRegSetResponse(hReg, "0");
				}
			}
		}
		break;
	default:
		;
	}
	return(MERROR_NOERROR);
}



================================================================================
[319/904] mcRegGetHandle
Source: CATmcRegGetHandle.htm
================================================================================

mcRegGetHandle
mcRegGetHandle
C/C++ Syntax:
int mcRegGetHandle(
		MINSTANCE mInst, 
		const char *path, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcRegGetHandle(
		number mInst, 
		string path)
Description:
Retrieve a handle to a register give its path.
Parameters:
Parameter
Description
mInst
The controller instance.
path
A string buffer specifying the register path.
hReg
The address of a HMCREG to receive the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
path
or
hReg
is NULL.
Notes:
None.
Usage:
// Get the register handle.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
double value;
if (
mcRegGetHandle(mInst, "core/global/Version", &hReg)
== MERROR_NOERROR) {
	rc = mcRegGetValue(hReg, &value);
}



================================================================================
[320/904] mcRegGetInfo
Source: CATmcRegGetInfo.htm
================================================================================

mcRegGetInfo
mcRegGetInfo
C/C++ Syntax:
int mcRegGetInfo(
		HMCREG hReg, 
		char *nameBuf, 
		size_t nameBuflen, 
		char *descBuf, 
		size_t descBuflen, 
		int *type, 
		HMCDEV *hDev);
LUA Syntax:
nameBuf, descBuf, type, hDev, rc = mc.mcRegGetInfo(
		number hReg)
Description:
Return infromation about a register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
nameBuf
A string buffer to receive the name of the register.
nameBuflen
The length of the name buffer.
descBuf
A string buffer to receive the description of the register.
descBuflen
The length of the description buffer.
type
The address of an integer to receive the register type.
hDev
The address of an integer to receive the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
nameBuf
,
descBuf
,
type
, or
hDev
can be NULL depending on the amout of information required.
Usage:
HMCREG hReg = 0;
char name[80];
char desc[80];
int type;
HMCDEV hDev;

while (mcSignalGetNextHandle(hDev, hReg, &hReg) == MERROR_NOERROR) {
	if (hSig != 0) {
// Get the info on the register.
mcRegGetInfo(hReg, name, sizeof(name), desc, sizeof(desc), &type, &hDev));
	} else {
		break;
	}
}



================================================================================
[321/904] mcRegGetInfoStruct
Source: CATmcRegGetInfoStruct.htm
================================================================================

mcRegGetInfoStruct
mcRegGetInfoStruct
C/C++ Syntax:
int mcRegGetInfoStruct(
		HMCREG hReg, 
		reginfo_t *reginf);
LUA Syntax:
reginf, rc = mc.mcRegGetInfoStruct(
		number hReg)
Description:
Return infromation about a register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
reginf
The adress of a reginfo struct to receive the register information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
reginf
is NULL
Notes:
The hReg parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct reginfo {
	char regName[80];
	char regDesc[80];
	int  regType;
	HMCDEV regDev;
	void *regUserData;
	int regInput;
};
typedef struct reginfo reginfo_t;
Usage:
HMCREG hReg = 0;
reginfo_t reginf;

while (mcSignalGetNextHandle(hDev, hReg, &hReg) == MERROR_NOERROR) {
	if (hSig != 0) {
// Get the info on the register.
mcRegGetInfoStruct(hReg, ®inf);
	} else {
		break;
	}
}



================================================================================
[322/904] mcRegGetNextHandle
Source: CATmcRegGetNextHandle.htm
================================================================================

mcRegGetNextHandle
mcRegGetNextHandle
C/C++ Syntax:
int mcRegGetNextHandle(
		HMCDEV hDev, 
		HMCREG startReg, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcRegGetNextHandle(
		number hDev, 
		number startReg)
Description:
Provides a means of looping through the available registers.
Parameters:
Parameter
Description
hDev
the register's parent device handle.
startReg
The starting register handle.
hReg
The address of a hMCREG to receive the next register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_INVALID_ARG
hReg
is NULL.
MERROR_NODATA
No more register handles can be found.
Notes:
To start, call mcRegGetNextHandle() with startReg = 0. hDev MUST be valid or the application can crash.
Usage:
HMCSIG hReg = 0;
HMCDEV hDev;
mcDeviceGetHandle(0, 0,&hDev);
while (
mcRegisterGetNextHandle(hDev, hReg, &hReg)
== MERROR_NOERROR) {
	if (hSig != 0) {
// do something with hReg.
} else {
		break;
	}
}



================================================================================
[323/904] mcRegGetUserData
Source: CATmcRegGetUserData.htm
================================================================================

mcRegGetUserData
mcRegGetUserData
C/C++ Syntax:
int mcRegGetUserData(
		HMCREG hReg, 
		void **data);
LUA Syntax:
N/A
Description:
Retrieve the user data pointer for the hReg.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
data
The address of a void pointer receive the user data pointer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
data
is NULL.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function allows the programmer to retreive a pointer to asscoiated private data that is local to the register's parent plugin/device.
Usage:
struct myDataStruct {
	int myInt;
	char myString[80];
	...
};

HMCREG hReg;
int mInst=0;
myDataStruct *data = NULL;
void *dataPtr;
// Get the handle to holding register 1 on SIM0.
if (mcRegGetHandle(mInst, "SIM0/HoldingReg1", &hReg) == MERROR_NOERROR) {
	mcRegGetUserData(hReg, &dataPtr);
	data = (myDataStruct *) dataPtr;
}



================================================================================
[324/904] mcRegGetValue
Source: CATmcRegGetValue.htm
================================================================================

mcRegGetValue
mcRegGetValue
C/C++ Syntax:
int mcRegGetValue(
		HMCREG hReg, 
		double *value);
LUA Syntax:
value, rc = mcRegGetValue(
		number hReg)
Description:
Retrieve a register's double value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
The address of a double to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
double value;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValue(hReg, &value);
}



================================================================================
[325/904] mcRegGetValueLong
Source: CATmcRegGetValueLong.htm
================================================================================

mcRegGetValueLong
mcRegGetValueLong
C/C++ Syntax:
int mcRegGetValueLong(
		HMCREG hReg, 
		double *value);
LUA Syntax:
value, rc = mcRegGetValueLong(
		number hReg)
Description:
Retrieve a register's long value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
The address of a long to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
long value;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueLong(hReg, &value);
}



================================================================================
[326/904] mcRegGetValueString
Source: CATmcRegGetValueString.htm
================================================================================

mcRegGetValueString
mcRegGetValueString
C/C++ Syntax:
int mcRegGetValueString(
		HMCREG hReg, 
		char *buf,
		size_t bufSize);
LUA Syntax:
buf, rc = mcRegGetValueString(
		number hReg)
Description:
Retrieve a register's string value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
buf
A string buffer to receive the value.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
char value[80];
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueString(hReg, &value, sizeof(value));
}



================================================================================
[327/904] mcRegGetValueStringClear
Source: CATmcRegGetValueStringClear.htm
================================================================================

mcRegGetValueStringClear
mcRegGetValueStringClear
C/C++ Syntax:
int mcRegGetValueStringClear(
		HMCREG hReg, 
		char *buf,
		size_t bufSize);
LUA Syntax:
buf, rc = mcRegGetValueString(
		number hReg)
Description:
Retrieve a register's string value and then clear the register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
buf
A string buffer to receive the value.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
None.
Usage:
// Get the register value and clear it.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
char value[80];
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueStringClear(hReg, &value, sizeof(value));
}



================================================================================
[328/904] mcRegRegister
Source: CATmcRegRegister.htm
================================================================================

mcRegRegister
mcRegRegister
C/C++ Syntax:
int mcRegRegister(
		HMCDEV hDev, 
		const char *regName, 
		const char *regDesc, 
		int regType, 
		HMCREG *hReg);
LUA Syntax:
N/A
Description:
Adds a register to the core.
Parameters:
Parameter
Description
hDev
The handle of the register's parent device.
regName
A string buffer specifying the name of the register.
regDesc
A string buffer specifying the description of the register.
regType
REG_TYPE_NONE, REG_TYPE_INPUT, REG_TYPE_OUTPUT, REG_TYPE_HOLDING, REG_TYPE_COMMAND, REG_TYPE_ENCODER.
hReg
The address of a HMCREG that receives the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_INVALID_ARG
regName
,
regDesc
, or
hReg
is NULL.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Registers can contain data of any type, even string data.  The maximum string length is 4096 bytes for registers other than
REG_TYPE_COMMAND
type registers and 1024 bytes for the
REG_TYPE_COMMAND
type registers.
REG_TYPE_NONE
specifies a register that is not typed.  This kind of register is basically just a data container that will not notify any process if the data it stores changes.
REG_TYPE_INPUT
specifies a register that can be mapped to a Mach input signal.  Mach and any GUI front end is notified if the data in this type of register is changed with a
MSG_REG_CHANGED
message.  This type of register usually contains boolean data.
REG_TYPE_OUTPUT
specifies a register that can be mapped to a Mach output signal.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.
REG_TYPE_HOLDING
specifies a general purpose register that cannot be mapped to either an input or output signal.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.  This type of register usually contains boolean data.
REG_TYPE_COMMAND
specifies a special purpose register that can be used to implement a simple command/response communication mechanism.  Only the plugin that owns the register is notified with a
MSG_REG_COMMAND
synchronous message.  It works with
mcRegSendCommand
on the client side of the communication and
mcRegGetCommand
and
mcRegSetResponse
on the plguin side.
REG_TYPE_ENCODER
specifies a register that can be mapped to a MPG or used to display the encoder counts in the GUI.  Only Mach and the GUI are notified with a
MSG_REG_CHANGED
synchronous message.
Usage:
HMCREG m_hReg;
HMCDEV m_hDev;
// Contains the device handle from the device registration.
int rc =
mcRegRegister(m_hDev, "HoldingReg1", "HoldingReg1", REG_TYPE_HOLDING, &hReg)
;



================================================================================
[329/904] mcRegSendCommand
Source: CATmcRegSendCommand.htm
================================================================================

mcRegSendCommand
mcRegSendCommand
C/C++ Syntax:
int mcRegSendCommand(
		HMCREG hReg, 
		const char *command, 
		char *response, 
		size_t responseLen);
LUA Syntax:
response, rc = mc.mcRegSendCommand(
		hReg, 
		command)
Description:
Sends a text command to a plugin register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
command
A string buffer specifying the command to be sent.
response
A string buffer that receives the response.
responseLen
The length of the response buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
command
or
response
is NULL.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
This function would primarily be used in scripts to control device features or provide a direct communication mechanism to the device.
The buffer pointed to by cmd cannot exceed 1024 bytes.
See Also:
mcRegGetCommand
and
mcRegSetResponse
Usage:
// Send a command via a register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "Sim0/SimCommand", &hReg) == MERROR_NOERROR) {
	char response[1024];
	rc =
mcRegSendCommand(hReg, "THC ON", response, sizeof(response))
;
	if (rc == MERROR_NOERROR) {
// check response.
}
}



================================================================================
[330/904] mcRegSetDesc
Source: CATmcRegSetDesc.htm
================================================================================

mcRegSetDesc
mcRegSetDesc
C/C++ Syntax:
int mcRegSetDesc(
		HMCREG hReg, 
		const char *desc);
LUA Syntax:
rc = mc.mcRegSetDesc(
		number hReg, 
		string desc)
Description:
Sets the description of the given ragister.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
desc
A string buffer specifying the register description.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
desc
is NULL.
Notes:
None.
Usage:
// Set/change the description of the register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetDesc(hReg, "Core Version")
;
}



================================================================================
[331/904] mcRegSetName
Source: CATmcRegSetName.htm
================================================================================

mcRegSetName
mcRegSetName
C/C++ Syntax:
int mcRegSetName(
		HMCREG hReg, 
		const char *name);
LUA Syntax:
rc = mc.mcRegSetName(
		number hReg, 
		string name)
Description:
Set the name of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
name
A string buffer specifying the name of the register.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
name
is NULL.
Notes:
None.
Usage:
// Set/change the name of the register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetName(hReg, "Version2")
;
// The register path is now "core/global/Version2"
}



================================================================================
[332/904] mcRegSetResponse
Source: CATmcRegSetResponse.htm
================================================================================

mcRegSetResponse
mcRegSetResponse
C/C++ Syntax:
int mcRegSetResponse(
		HMCREG hReg, 
		char *response);
LUA Syntax:
N/A
Description:
Set the reponse to the command register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
response
A string buffer that specifies the response to the command.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
See Also:
mcRegSendCommand
and
mcRegGetCommand
Usage:
// Set the response to a register command.
int simControl::ProcessMsg(long msg, long param1, long param2)
{
	HMCREG hReg = (HMCREG)param1;
	long RegVal;
	switch (msg) {
	case MSG_REG_COMMAND:
		mcRegGetValueLong(hReg, &RegVal);
		if (hReg = m_RegCommand) {
// Is this our command register?
char command[1024];
			mcRegGetCommand(hReg, command, sizeof(command));
			wxString cmd(command);
			cmd.MakeUpper();
			if (cmd == wxT("THC ON")) {
				m_thc = true;
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC OFF")) {
				m_thc = false;
				mcMotionSync(m_cid);
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC STATUS")) {
				if (m_thc) {
					mcRegSetResponse(hReg, "1");
				} else {
					mcRegSetResponse(hReg, "0");
				}
			}
		}
		break;
	default:
		;
	}
	return(MERROR_NOERROR);
}



================================================================================
[333/904] mcRegSetType
Source: CATmcRegSetType.htm
================================================================================

mcRegSetType
mcRegSetType
C/C++ Syntax:
int mcRegSetType(
		HMCREG hReg, 
		int regType);
LUA Syntax:
rc = mc.mcRegSetType(
		number hReg, 
		number regType)
Description:
Set the type of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
regType
An integer specifying the register type. (REG_TYPE_NONE, IO_TYPE_REG_INPUT, REG_TYPE_OUTPUT, REG_TYPE_HOLDING, REG_TYPE_COMMAND, REG_TYPE_ENCODER)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
regType
is out of range.
Notes:
None.
Usage:
// Set the register type.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetType(hReg, REG_TYPE_HOLDING)
;
}



================================================================================
[334/904] mcRegSetUserData
Source: CATmcRegSetUserData.htm
================================================================================

mcRegSetUserData
mcRegSetUserData
C/C++ Syntax:
mcRegSetUserData(
		HMCREG hReg, 
		void *data);
Description:
Set the user pointer for hReg.
Parameters:
Parameter
Description
hReg
The IO handle.
value
The address of a void pointer so user can have there own data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
The hReg parameter was 0.
Notes:
The hReg parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
This function can be used to save a pointer to your own data.
Usage:
MSG_REG_CHANGED

HMCREG hReg;
int mInst=0;
RegisterStruct RegStruct;
//User data is set to where the data struct is saved.
// Get the handle to holding register 1 on SIM0.
mcRegGetHandle(mInst, "SIM0/HoldingReg1", &hReg);
mcRegSetUserData(hReg, (void *)&RegStruct);



================================================================================
[335/904] mcRegSetValue
Source: CATmcRegSetValue.htm
================================================================================

mcRegSetValue
mcRegSetValue
C/C++ Syntax:
int mcRegSetValue(
		HMCREG hReg, 
		double value);
LUA Syntax:
rc = mc.mcRegSetValue(
		number hReg, 
		number value)
Description:
Sets the double value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A double specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValue(hReg, 4.0)
;
}



================================================================================
[336/904] mcRegSetValueLong
Source: CATmcRegSetValueLong.htm
================================================================================

mcRegSetValueLong
mcRegSetValueLong
C/C++ Syntax:
int mcRegSetValueLong(
		HMCREG hReg, 
		double value);
LUA Syntax:
rc = mc.mcRegSetValueLong(
		number hReg, 
		number value)
Description:
Sets the long value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A long specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValueLong(hReg, 4)
;
}



================================================================================
[337/904] mcRegSetValueString
Source: CATmcRegSetValueString.htm
================================================================================

mcRegSetValueString
mcRegSetValueString
C/C++ Syntax:
int mcRegSetValueString(
		HMCREG hReg, 
		const char *value);
LUA Syntax:
rc = mc.mcRegSetValueString(
		number hReg, 
		string value)
Description:
Sets the string value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A string buffer specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValueString(hReg, "4.0")
;
}



================================================================================
[338/904] mcRegUnregister
Source: CATmcRegUnregister.htm
================================================================================

mcRegUnregister
mcRegUnregister
C/C++ Syntax:
int mcRegUnregister(
		HMCDEV hDev, 
		HMCREG hReg);
LUA Syntax:
N/A
Description:
Remove a register from the core.
Parameters:
Parameter
Description
hDev
A HMCDEV specifying the register's parent device.
hReg
A HMCREG specifying the register to remove.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
When register is removed all data in that register will be lost.
Usage:
MINSTANCE mInst = 0; 
HMCREG hReg
char *path = "Sim0/Register1";

mcRegGetHandle(mInst, path, &hReg);
mcRegUnregister(m_hDev, hReg);



================================================================================
[339/904] mcScriptDebug
Source: CATmcScriptDebug.htm
================================================================================

mcScriptDebug
mcScriptDebug
C/C++ Syntax:
int mcScriptDebug(
		MINSTANCE mInst, 
		const char *filename);
LUA Syntax:
N/A
Description:
Debug a script.
Parameters:
Parameter
Description
mInst
The controller instance.
(filename, A string buffer specifying the script file to debug.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
There was no registered script plugin for the given script's extension.
Notes:
Script debugging is a function of script plugins.  Script plugins register file extensions to identify what script can be used.
Usage:
// Debug the M6 macro
MINSTANCE mInst = 0;
int rc = mcScriptDebug(mInst, "m6.mcs");



================================================================================
[340/904] mcScriptEngineRegister
Source: CATmcScriptEngineRegister.htm
================================================================================

mcScriptEngineRegister
mcScriptEngineRegister
C/C++ Syntax:
int mcScriptEngineRegister(
		MINSTANCE mInst, 
		HMCPLUG plugid, 
		const char *EngineName, 
		const char *EngineDesc, 
		const char *FileExtensions);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
plugid
A HMCPLUG handle specifying the plugin.
EngineName
A string buffer specifying the script engine name.
EngineDesc
A string buffer specifying the script engine description.
FileExtensions
A string buffer specifying the file extenstions that the script engine uses.  Each extension is separated with the pipe symbol "|".
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
plugid
is invalid.
Notes:
Script plugins register file extensions to identify what script can be used.
Usage:
// Register the LUA script engine.
MINSTANCE mInst = 0;
HMCPLUG id;
// From mcPluginInit()
;
int rc = mcScriptEngineRegister(mInst, id, "wxLua", "wxLua script engine", "mcs|lua|wx.lua");



================================================================================
[341/904] mcScriptExecute
Source: CATmcScriptExecute.htm
================================================================================

mcScriptExecute
mcScriptExecute
C/C++ Syntax:
int mcScriptExecute(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecute(
		number mInst, 
		string filename, 
		number async)
Description:
Execute a script in the global script context.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute the M6 script and wait on it to complete.
MINSTANCE mInst = 0;
rc = mcScriptExecute(mInst, "m6.mcs", FALSE);



================================================================================
[342/904] mcScriptExecuteIfExists
Source: CATmcScriptExecuteIfExists.htm
================================================================================

mcScriptExecuteIfExists
mcScriptExecuteIfExists
C/C++ Syntax:
int mcScriptExecuteIfExists(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecuteIfExists(
		number mInst, 
		string filename, 
		number async)
Description:
Execute a script in the global script context if the specified script exists in the filesystem.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time, this error may be returned which would be an indication of a script syntax error.
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute the M6 script and wait on it to complete.
MINSTANCE mInst = 0;
rc = mcScriptExecute(mInst, "m6.mcs", FALSE);



================================================================================
[343/904] mcScriptExecutePrivate
Source: CATmcScriptExecutePrivate.htm
================================================================================

mcScriptExecutePrivate
mcScriptExecutePrivate
C/C++ Syntax:
int mcScriptExecutePrivate(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecutePrivate(
		number mInst, 
		string filename, 
		BOOL async)
Description:
Execute a script in the private script context.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time, this error may be returned which would be an indication of a script syntax error.
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute myScript.mcs asynchronously in it's own private environment.
MINSTANCE mInst = 0;
int rc = mcScriptExecutePrivate(mInst, "myScript.mcs", TRUE);



================================================================================
[344/904] mcScriptGetExtensions
Source: CATmcScriptGetExtensions.htm
================================================================================

mcScriptGetExtensions
mcScriptGetExtensions
C/C++ Syntax:
int mcScriptGetExtensions(MINSTANCE mInst, 
		char *buf, 
		long bufsize);
LUA Syntax:
N/A
Description:
Retrieves all registered script engine file name extensions.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the script file name extensions.
bufsize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufsize
is <= 0.
Notes:
All returned extensions are delimited by pipe symbols ("|").
Usage:
// Retrieve all of the registered script extensions.
MINSTANCE mInst = 0;
mcScriptGetExtensions(MINSTANCE mInst, char *buf, long bufsize);



================================================================================
[345/904] mcSignalEnable
Source: CATmcSignalEnable.htm
================================================================================

mcSignalEnable
mcSignalEnable
C/C++ Syntax:
int mcSignalEnable(
	HMCSIG hSig, 
	BOOL enabled);
LUA Syntax:
rc = mc.mcSignalEnable(
	number hSig, 
	number enabled)
Description:
Enable or disable a signal mapping.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
enabled
TRUE to enable, FALSE to disable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Signals have to be mapped to an IO handle before they can be enabled.  It is important to note that the signal itself is always enabled.  What is enabled it the signal mapping.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (mcSignalGetHandle(m_cid, ISIG_INPUT1, int sigid, &hSig) == MERROR_NOERROR) {
		if (mcSignalMap(hSig, m_Input0) == MERROR_NOERROR) {
// Signal mapped successfuly
mcSignalEnable(hSig, TRUE);
// Enable the signal.
}
	}
}



================================================================================
[346/904] mcSignalGetHandle
Source: CATmcSignalGetHandle.htm
================================================================================

mcSignalGetHandle
mcSignalGetHandle
C/C++ Syntax:
int mcSignalGetHandle(
		MINSTANCE mInst, 
		int sigid, 
		HMCSIG *hSig);
LUA Syntax:
hSig, rc = mc.mcSignalGetHandle(
		number mInst, 
		number sigid)
Description:
Register the IO device in Mach4Core so it can be mapped by the user and other plugins
Parameters:
Parameter
Description
mInst
The controller instance.
sigid
The integer ID of the desired signal.
hSig
A pointer to a HMCSIG to receive the sginal handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SIGNAL_NOT_FOUND
The signal identified by sigid was not found.
Notes:
None.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (
mcSignalGetHandle(m_cid, ISIG_INPUT1, &hSig)
== MERROR_NOERROR) {
		if (mcSignalMap(hSig, m_Input0) == MERROR_NOERROR) {
// Signal mapped successfuly.
mcSignalEnable(hSig, true);
// Enable the signal.
}
	}
}



================================================================================
[347/904] mcSignalGetInfo
Source: CATmcSignalGetInfo.htm
================================================================================

mcSignalGetInfo
mcSignalGetInfo
C/C++ Syntax:
int mcSignalGetInfo(
		HMCSIG hSig, 
		int *enabled, 
		char *name, 
		size_t namelen,
		char *desc, 
		size_t desclen, 
		int *activelow);
LUA Syntax:
enabled, name, desc, activelow, rc = mc.mcSignalGetInfo(number hSig)
Description:
Return infromation about a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
enabled
The address of an integer to receive the enabled status of the signal.
name
A buffer to receive the name of the signal.
namelen
A value specifiying the length of the name buffer.
desc
A buffer to receive the description of the signal.
desclen
A value specifiying the length of the description buffer.
activelow
The address of an integer to receive the active low status of the signal.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
int enabled = 0;
int nameLen = 20
char nameBuf[nameLen];
int descLen = 40;
char descBuf[descLen];
int activeLow = 0;

while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalGetInfo(hSig, &enabled, nameBuf, nameLen, descBuf, descLen, &activeLow)
;
	} else {
		break;
	}
}



================================================================================
[348/904] mcSignalGetInfoStruct
Source: CATmcSignalGetInfoStruct.htm
================================================================================

mcSignalGetInfoStruct
mcSignalGetInfoStruct
C/C++ Syntax:
int mcSignalGetInfoStruct(
		HMCSIG hSig, 
		siginfo_t *siginf);
LUA Syntax:
siginf, rc = mc.mcSignalGetInfoStruct(
		number hSig)
Description:
Return infromation about a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
siginf
The adress of a siginfo struct to receive the signal information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct siginfo {
	char sigName[80];
	char sigDesc[80];
	int  sigEnabled;
	int  sigActiveLow;
	HMCIO sigMappedIoHandle;
};
typedef struct siginfo siginfo_t;
Usage:
HMCSIG hSig = 0;
siginfo_t siginf;

while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalGetInfoStruct(hSig, &siginf);
} else {
		break;
	}
}



================================================================================
[349/904] mcSignalGetNextHandle
Source: CATmcSignalGetNextHandle.htm
================================================================================

mcSignalGetNextHandle
mcSignalGetNextHandle
C/C++ Syntax:
int mcSignalGetNextHandle(
		MINSTANCE mInst, 
		int sigtype, 
		HMCSIG startSig, 
		HMCSIG *hSig);
LUA Syntax:
hSig, rc = mc.mcSignalGetNextHandle(
	number mInst, 
	number sigtype, 
	number startSig)
Description:
Provides a means of looping through the available signals.
Parameters:
Parameter
Description
mInst
The controller instance.
sigtype
The signal type for which to look (SIG_TYPE_INPUT or SIG_TYPE_OUTPUT).
startSig
The current signal handle.
hSig
A pointer to a HMCSIG to receive the signal handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sigtype was not SIG_TYPE_INPUT or SIG_TYPE_OUTPUT.
MERROR_NODATA
No more signals can be found.
Notes:
To start, call mcSignalGetNextHandle() with startSig = 0.
Usage:
HMCSIG hSig = 0;

while (
mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig)
== MERROR_NOERROR) {
    if (hSig != 0) {
// Do something with hSig.
} else {
        break;
    }
}



================================================================================
[350/904] mcSignalGetState
Source: CATmcSignalGetState.htm
================================================================================

mcSignalGetState
mcSignalGetState
C/C++ Syntax:
int mcSignalGetState(
		HMCSIG hSig, 
		BOOL *state)
LUA Syntax:
state, rc = mc.mcSignalGetState(
		number hSig)
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
state
Defines the desired state of the signal. TRUE is active
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0 or invalid.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
BOOL sigState = FALSE;
// Get the state of all input signals.
while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
    if (hSig != 0) {
mcSignalGetState(hSig, &sigState);
} else {
        break;
    }
}



================================================================================
[351/904] mcSignalHandleWait
Source: CATmcSignalHandleWait.htm
================================================================================

mcSignalHandleWait
mcSignalHandleWait
C/C++ Syntax:
int mcSignalHandleWait(
		HMCSIG hSig, 
		int waitMode, 
		double timeoutSecs);
LUA Syntax:
rc = mc.mcSignalHandleWait(
		number hSig, 
		number waitMode, 
		number timeoutSecs);
Description:
Wait on a signal to change state.
Parameters:
Parameter
Description
hSig
The handle for the signal.
waitMode
An integer specifying whether to wait on the signal to go high (WAIT_MODE_HIGH) or low (WAIT_MODE_LOW).
timeoutSecs
A double specifying a timeout period.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hSig
or
wiatMode
is out of range or
timeoutSecs
is negative.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_TIMED_OUT
The timeout period was reached without a change of state.
Notes:
Specifying 0 for
timeoutSecs
will wait indefinitely until the signal changes state. Decimals are allowed.  e.g. .5 is half of a second.)
If the control is diabled while waiting on a signal to change state, the function stops waiting and returns MERROR_NOT_ENABLED.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;
int rc;
rc = mcSignalGetHandle(mInst, ISIG_INPUT1 &hSig);
if (rc == MERROR_NOERROR) {
	rc =
mcSignalHandleWait(hSig, WAIT_MODE_HIGH, .5)
;
	switch (rc) {
	case MERROR_NOERROR:
// Signal changed state from low to high
break;
	case MERROR_TIMED_OUT:
// The signal didn't change state in the alotted time.
break;
	case MERROR_NOT_ENABLED:
// The control was not enabled at the time of the 
		function call or the control was disabled during the function call.
break;
	}
}



================================================================================
[352/904] mcSignalMap
Source: CATmcSignalMap.htm
================================================================================

mcSignalMap
mcSignalMap
C/C++ Syntax:
int mcSignalMap(
		HMCSIG hSig, 
		HMCIO hIo);
LUA Syntax:
rc = mc.mcSignalMap(
		number hSig, 
		number hIo)
Description:
Map a core signal to a registered I/O handle.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
hIo
A registered IO handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0.
Notes:
The hSig and hIo parameters
MUST
be a valid handles.  Otherwise, the function will crash.
Mapping an input IO handle to an output signal handle or an output IO handle to an input signal handle is a programming error.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (mcSignalGetHandle(m_cid, ISIG_INPUT1, &hSig) == MERROR_NOERROR) {
		if (
mcSignalMap(hSig, m_Input0)
== MERROR_NOERROR) {
// Signal mapped successfuly
}
	}
}



================================================================================
[353/904] mcSignalSetActiveLow
Source: CATmcSignalSetActiveLow.htm
================================================================================

mcSignalSetActiveLow
mcSignalSetActiveLow
C/C++ Syntax:
int mcSignalSetActiveLow(
		HMCSIG hSig, 
		BOOL activelow);
LUA Syntax:
rc = mc.mcSignalSetActiveLow(
		number hSig, 
		number activelow)
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
activelow
TRUE to set the signal as negated.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0 or invalid.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
BOOL activeLow = TRUE;
// Set all input signals active low.
while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalSetActiveLow(hSig, activeLow);
} else {
		break;
	}
}



================================================================================
[354/904] mcSignalSetState
Source: CATmcSignalSetState.htm
================================================================================

mcSignalSetState
mcSignalSetState
C/C++ Syntax:
int mcSignalSetState(
		HMCSIG hSig, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcSignalSetState(
		number hSig, 
		number enabled)
mcSignalSetState(
	HMCSIG hSig, 
	bool enabled);
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
enabled
TRUE is active
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
// Set all output signals inactive.
while (mcSignalGetNextHandle(0, SIG_TYPE_OUTPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalSetState(hSig, FALSE);
} else {
		break;
	}
}



================================================================================
[355/904] mcSignalUnmap
Source: CATmcSignalUnmap.htm
================================================================================

mcSignalUnmap
mcSignalUnmap
C/C++ Syntax:
int mcSignalUnmap(
		HMCSIG hSig);
LUA Syntax:
rc = mc.mcSignalUnmap(
		number hSig)
Description:
Unmap any I/O objects from the specified core signal.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0 or invalid.
Notes:
The hSig parameters
MUST
be a valid handle.  Otherwise, the function will crash.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;

if (mcSignalGetHandle(mInst, ISIG_INPUT1, &hSig) == MERROR_NOERROR) {
	if (
mcSignalUnmap(hSig)
== MERROR_NOERROR) {
// Signal now has no I/O mappings
}
}



================================================================================
[356/904] mcSignalWait
Source: CATmcSignalWait.htm
================================================================================

mcSignalWait
mcSignalWait
C/C++ Syntax:
int mcSignalWait(
		MINSTANCE mInst, 
		int sigId, 
		int waitMode, 
		double timeoutSecs);
LUA Syntax:
rc = mc.mcSignalWait(
		number mInst, 
		number sigId, 
		number waitMode, 
		number timeoutSecs);
Description:
Wait on a signal to change state.
Parameters:
Parameter
Description
mInst
The controller instance.
sigId
A valid signal ID. (
NOT a signal handle
)
waitMode
An integer specifying whether to wait on the signal to go high (WAIT_MODE_HIGH) or low (WAIT_MODE_LOW).
timeoutSecs
A double specifying a timeout period.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sigId
or
wiatMode
is out of range or
timeoutSecs
is negative.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_TIMED_OUT
The timeout period was reached without a change of state.
Notes:
Specifying 0 for
timeoutSecs
will wait indefinitely until the signal changes state. Decimals are allowed.  e.g. .5 is half of a second.)
If the control is diabled while waiting on a signal to change state, the function stops waiting and returns MERROR_NOT_ENABLED.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;
int rc;

rc =
mcSignalWait(mInst, ISIG_INPUT1, WAIT_MODE_HIGH, .5)
;
switch (rc) {
case MERROR_NOERROR:
// Signal changed state from low to high
break;
case MERROR_TIMED_OUT:
// The signal didn't change state in the alotted time.
break;
case MERROR_NOT_ENABLED:
// The control was not enabled at the time of the 
	  function call or the control was disabled during the function call.
break;
}



================================================================================
[357/904] mcSoftLimitGetState
Source: CATmcSoftLimitGetState.htm
================================================================================

mcSoftLimitGetState
mcSoftLimitGetState
C/C++ Syntax:
int mcSoftLimitGetState(
		MINSTANCE mInst, 
		int axis, 
		double *ison);
LUA Syntax:
ison, rc = mc.mcSoftLimitGetState(
		number mInst, 
		number axis)
Description:
Used to check if the Softlimit for an axis is on or off.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis from which to to get the Softlimit state.
ison
A pointer to a double to receive the status of Softlimit (on or off).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Can be used to display to the user what the status of the Softlimit for an axis is.
Usage:
int mInst = 0;
int axis = Z_AXIS;
dobule IsOn = 0;
// DO_OFF to turn off.
mcSoftLimitSetState(mInst, axis, &IsOn);
// Get the softlimit for the Z axis return will be 1 or 0 1==on.



================================================================================
[358/904] mcSoftLimitSetState
Source: CATmcSoftLimitSetState.htm
================================================================================

mcSoftLimitSetState
mcSoftLimitSetState
C/C++ Syntax:
int mcSoftLimitSetState(
		MINSTANCE mInst, 
		int axis, 
		int on);
LUA Syntax:
rc = mc.mcSoftLimitSetState(
		number mInst, 
		number axis, 
		number on)
Description:
Set softlimits to be on or off for an axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis to set the softlimit to be on or off.
on
Set the softlimit to be on or off ( MC_ON, MC_OFF ).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Can be used at any time. If you enable the softlimits when  you are out of bounds any jog will move it back to the softlimit.
Usage:
int mInst=0;
int axis = Z_AXIS;
int TurnOn = MC_ON;
// MC_OFF to turn off.
mcSoftLimitSetState(mInst, axis, TurnOn);
// Set the softlimit forthe Z axis to be ON.



================================================================================
[359/904] mcSpindleCalcCSSToRPM
Source: CATmcSpindleCalcCSSToRPM.htm
================================================================================

mcSpindleCalcCSSToRPM
mcSpindleCalcCSSToRPM
C/C++ Syntax:
int mcSpindleCalcCSSToRPM(
		MINSTANCE mInst, 
		double DiaOfCut, 
		BOOL Inch);
LUA Syntax:
rc = mc.mcSpindleCalcCSSToRPM(
		number mInst, 
		number DiaOfCut, 
		number Inch);
Description:
A utility function to implement Constant Surface Speed (CSS) for lathe operation.
Parameters:
Parameter
Description
mInst
The controller instance.
DiaOfCut
A double specifying the diameter of the next cut.
inch
A BOOL specifying if the diameter is in inches (TRUE) or millimiters (FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The spindle is not in CSS mode.
Notes:
None.
Usage:
// make the spindle speed calc the correct RPM for a .550" inch cut.
MINSTANCE mInst = 0;
int rc = mcSpindleCalcCSSToRPM(mInst, .550, TRUE);



================================================================================
[360/904] mcSpindleGetAccelTime
Source: CATmcSpindleGetAccelTime.htm
================================================================================

mcSpindleGetAccelTime
mcSpindleGetAccelTime
C/C++ Syntax:
int mcSpindleGetAccelTime(
		MINSTANCE mInst, 
		int Range, 
		double *Sec);
LUA Syntax:
Sec, rc = mc.mcSpindleGetAccelTime(
		number mInst, 
		number Range)
Description:
Retrieve the spindle acceleration time in seconds for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
The address to a double to receive the acceleration time.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Sec
cannot be NULL.
Notes:
None.
Usage:
// Get the accel time for spindle range 2.
MINSTANCE mInst = 0;
double sec = 0;
int rc = mcSpindleGetAccelTime(mInst, 2, &sec);



================================================================================
[361/904] mcSpindleGetCommandRPM
Source: CATmcSpindleGetCommandRPM.htm
================================================================================

mcSpindleGetCommandRPM
mcSpindleGetCommandRPM
C/C++ Syntax:
int mcSpindleGetCommandRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetCommandRPM(
		number mInst)
Description:
Retrieve the commanded RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the commanded RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
None.
Usage:
// Get the current commanded RPM
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetCommandRPM(mInst, &rpm);



================================================================================
[362/904] mcSpindleGetCurrentRange
Source: CATmcSpindleGetCurrentRange.htm
================================================================================

mcSpindleGetCurrentRange
mcSpindleGetCurrentRange
C/C++ Syntax:
int mcSpindleGetCurrentRange(
		MINSTANCE mInst, 
		int *Range);
LUA Syntax:
Range, rc = mc.mcSpindleGetCurrentRange(
		number mInst)
Description:
Retrieve the current spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
The address of an integer to receive the current spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
Range
cannot be NULL.
Notes:
None.
Usage:
// Get the current spindle range.
MINSTANCE mInst = 0;
int range = 0;
int rc = mcSpindleGetCurrentRange(mInst, ⦥);



================================================================================
[363/904] mcSpindleGetDecelTime
Source: CATmcSpindleGetDecelTime.htm
================================================================================

mcSpindleGetDecelTime
mcSpindleGetDecelTime
C/C++ Syntax:
int mcSpindleGetDecelTime(
		MINSTANCE mInst, 
		int Range, 
		double *Sec);
LUA Syntax:
Sec, rc = mc.mcSpindleGetDecelTime(
		number mInst, 
		number Range)
Description:
Retrieve the decel. time in seconds for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
The address of a double to receive the decel. time.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Sec
cannot be NULL.
Notes:
None.
Usage:
// Get the decel. time for spindle range 3
MINSTANCE mInst = 0;
double sec = 0.0;
int rc = mcSpindleGetDecelTime(mInst, 3, &ec);



================================================================================
[364/904] mcSpindleGetDirection
Source: CATmcSpindleGetDirection.htm
================================================================================

mcSpindleGetDirection
mcSpindleGetDirection
C/C++ Syntax:
int mcSpindleGetDirection(
		MINSTANCE mInst, 
		int *dir);
LUA Syntax:
dir, rc = mc.mcSpindleGetDirection(
		number mInst)
Description:
Retrieve the current spindle direction.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An address to an integer to receive the current spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
dir
cannot be NULL.
Notes:
None.
Usage:
// Get the current spindle direction.
MINSTANCE mInst = 0;
int dir = MC_SPINDLE_OFF;
int rc = mcSpindleGetDirection(mInst, &dir);



================================================================================
[365/904] mcSpindleGetFeedbackRatio
Source: CATmcSpindleGetFeedbackRatio.htm
================================================================================

mcSpindleGetFeedbackRatio
mcSpindleGetFeedbackRatio
C/C++ Syntax:
int mcSpindleGetFeedbackRatio(
		MINSTANCE mInst, 
		int Range, 
		double *Ratio);
LUA Syntax:
Ratio, rc = mc.mcSpindleGetFeedbackRatio(
		number mInst, 
		number Range)
Description:
Retrieve the spindle feedback ratio for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Ratio
The address of a double to receive the feedback ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Ratio
cannot be NULL.
Notes:
None.
Usage:
// Get the feedback ratio for spindle range 0.
MINSTANCE mInst = 0;
double ratio = 0.0;
int rc = mcSpindleGetFeedbackRatio(mInst, 0, ∶);



================================================================================
[366/904] mcSpindleGetMaxRPM
Source: CATmcSpindleGetMaxRPM.htm
================================================================================

mcSpindleGetMaxRPM
mcSpindleGetMaxRPM
C/C++ Syntax:
int mcSpindleGetMaxRPM(
		MINSTANCE mInst, 
		int Range, 
		double *MaxRPM);
LUA Syntax:
MaxRPM, rc = mc.mcSpindleGetMaxRPM(
		number mInst, 
		number Range)
Description:
Retrieve the maximum RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
MaxRPM
the address of a double to receive the maximum RPM for the given spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
MaxRPM
cannot be NULL.
Notes:
None.
Usage:
// Get the max RPM for range 0.
MINSTANCE mInst = 0;
double mrpm = 0.0
int rc = mcSpindleGetMaxRPM(mInst, 0, &mrpm);



================================================================================
[367/904] mcSpindleGetMinRPM
Source: CATmcSpindleGetMinRPM.htm
================================================================================

mcSpindleGetMinRPM
mcSpindleGetMinRPM
C/C++ Syntax:
int mcSpindleGetMinRPM(
		MINSTANCE mInst, 
		int Range, 
		double *MinRPM);
LUA Syntax:
MinRPM, rc = mc.mcSpindleGetMinRPM(
		number mInst, 
		number Range)
Description:
Retrieve the minimum RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
MaxRPM
the address of a double to receive the minimum RPM for the given spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
MinRPM
cannot be NULL.
Notes:
None.
Usage:
// Get the min RPM for range 0.
MINSTANCE mInst = 0;
double mrpm = 0.0
int rc = mcSpindleGetMinRPM(mInst, 0, &mrpm);



================================================================================
[368/904] mcSpindleGetMotorAccel
Source: CATmcSpindleGetMotorAccel.htm
================================================================================

mcSpindleGetMotorAccel
mcSpindleGetMotorAccel
C/C++ Syntax:
int mcSpindleGetMotorAccel(
		MINSTANCE mInst, 
		int Range, 
		double *Accel);
LUA Syntax:
Accel, rc = mc.mcSpindleGetMotorAccel(
		number mInst, 
		number Range)
Description:
Retrieve the spindle motor acceleration value.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Accel
The address to a deouble to receive the spindle acceleration for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Accel
cannot be NULL.
Notes:
None.
Usage:
// Get the spindle acceleration for range 1.
MINSTANCE mInst = 0;
double accel = 0.0;
int rc = mcSpindleGetMotorAccel(mInst, 1, &accel);



================================================================================
[369/904] mcSpindleGetMotorMaxRPM
Source: CATmcSpindleGetMotorMaxRPM.htm
================================================================================

mcSpindleGetMotorMaxRPM
mcSpindleGetMotorMaxRPM
C/C++ Syntax:
int mcSpindleGetMotorMaxRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetMotorMaxRPM(
		number mInst)
Description:
Retrieve the maximum defined RPM for the spindle motor.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
None.
Usage:
// Get the maximum spindle motor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetMotorMaxRPM(mInst, &rpm);



================================================================================
[370/904] mcSpindleGetMotorRPM
Source: CATmcSpindleGetMotorRPM.htm
================================================================================

mcSpindleGetMotorRPM
mcSpindleGetMotorRPM
C/C++ Syntax:
int mcSpindleGetMotorRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
rpm, rc = mc.mcSpindleGetMotorRPM(
		number mInst)
Description:
Retrieve the current motor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address to a double to receive the motor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
This is not the spidnle RPM!!!  It is the motor RPM without any ratios for ranges (pulleys), etc...
Usage:
// Get the current motor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetMotorRPM(mInst, &rpm);



================================================================================
[371/904] mcSpindleGetOverride
Source: CATmcSpindleGetOverride.htm
================================================================================

mcSpindleGetOverride
mcSpindleGetOverride
C/C++ Syntax:
int mcSpindleGetOverride(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mcSpindleGetOverride(
		number mInst)
Description:
Retrieve the current spindle override value as a percentage of the commanded RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address to a double to receive the override decimal percentage.
;
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the spindle override. .5 == 50%
MINSTANCE mInst = 0;
double percent = 0.0;
int rc = mcSpindleGetOverride(mInst, &percent);



================================================================================
[372/904] mcSpindleGetOverrideEnable
Source: CATmcSpindleGetOverrideEnable.htm
================================================================================

mcSpindleGetOverrideEnable
mcSpindleGetOverrideEnable
C/C++ Syntax:
int mcSpindleGetOverrideEnable(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mcSpindleGetOverrideEnable(
		number mInst)
Description:
Retrieve the current spindle override status.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the override status.
;
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the spindle override status.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcSpindleGetOverrideEnable(mInst, &enabled);



================================================================================
[373/904] mcSpindleGetReverse
Source: CATmcSpindleGetReverse.htm
================================================================================

mcSpindleGetReverse
mcSpindleGetReverse
C/C++ Syntax:
int mcSpindleGetReverse(
		MINSTANCE mInst, 
		int Range, 
		BOOL *Reversed);
LUA Syntax:
Rreversed, rc = mc.mcSpindleGetReverse(
		number mInst, 
		number Range)
Description:
Retrieve whether the spindle is reversed for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Reversed
The address of a BOOL to receive if the spindle is reversed for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Reversed
cannot be NULL.
Notes:
None.
Usage:
// See if the spindle is reversed in range 1
MINSTANCE mInst = 0;
BOOL reversed = FALSE;
int mcSpindleGetReverse(mInst, 1, &reversed);



================================================================================
[374/904] mcSpindleGetSensorRPM
Source: CATmcSpindleGetSensorRPM.htm
================================================================================

mcSpindleGetSensorRPM
mcSpindleGetSensorRPM
C/C++ Syntax:
int mcSpindleGetSensorRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetSensorRPM(
		number mInst)
Description:
Retrieve the RPM at the spindle sensor.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
This API function will report RPM of the spindle at the spindle sensor and does not include any feedback ratio.
Usage:
// Get the spindle sensor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetSensorRPM(mInst, &rpm);



================================================================================
[375/904] mcSpindleGetSpeedCheckEnable
Source: CATmcSpindleGetSpeedCheckEnable.htm
================================================================================

mcSpindleGetSpeedCheckEnable
mcSpindleGetSpeedCheckEnable
C/C++ Syntax:
int mcSpindleGetSpeedCheckEnable(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcSpindleGetSpeedCheckEnable(
		number mInst)
Description:
Determine if spindle speed check is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL that receives the spindle speed check status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
cannot be NULL.
Notes:
None.
Usage:
// Check the staus of spindle speed check.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcSpindleGetSpeedCheckEnable(mInst, &enabled);



================================================================================
[376/904] mcSpindleGetSpeedCheckPercent
Source: CATmcSpindleGetSpeedCheckPercent.htm
================================================================================

mcSpindleGetSpeedCheckPercent
mcSpindleGetSpeedCheckPercent
C/C++ Syntax:
int mcSpindleGetSpeedCheckPercent(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcSpindleGetSpeedCheckPercent(
		number mInst)
Description:
Retrieve the spindle speed check percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a double to receive the speed check percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percent
cannot be NULL.
Notes:
None.
Usage:
// Get the speed check percentage.
MINSTANCE mInst = 0;
double percent = 0.0;
int rc = mcSpindleGetSpeedCheckPercent(mInst, &percent);



================================================================================
[377/904] mcSpindleGetTrueRPM
Source: CATmcSpindleGetTrueRPM.htm
================================================================================

mcSpindleGetTrueRPM
mcSpindleGetTrueRPM
C/C++ Syntax:
int mcSpindleGetTrueRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetTrueRPM(
		number mInst)
Description:
Retrieve the true RPM of the spindle, includeing any feedback ratio.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the true RPM of the spindle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
Calling this API function includes any feedback ratio.
Usage:
// Get the true spindle RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetTrueRPM(mInst, &rpm);



================================================================================
[378/904] mcSpindleSetAccelTime
Source: CATmcSpindleSetAccelTime.htm
================================================================================

mcSpindleSetAccelTime
mcSpindleSetAccelTime
C/C++ Syntax:
int mcSpindleSetAccelTime(
		MINSTANCE mInst, 
		int Range, 
		double Sec);
LUA Syntax:
rc = mc.mcSpindleSetAccelTime(
		number mInst, 
		number Range, 
		number Sec);
Description:
Sets the spindle accel. time for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
A double specifying the time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the accel. time for spindle range 0.
MINSTANCE mInst = 0;
int rc = mcSpindleSetAccelTime(mInst, 0, 5.0);



================================================================================
[379/904] mcSpindleSetCommandRPM
Source: CATmcSpindleSetCommandRPM.htm
================================================================================

mcSpindleSetCommandRPM
mcSpindleSetCommandRPM
C/C++ Syntax:
int mcSpindleSetCommandRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetCommandRPM(
		number mInst, 
		number RPM)
Description:
Set the commanded RPM for the spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the spindle RPM to 5000.
MINSTANCE mInst = 0;
int rc = mcSpindleSetCommandRPM(mInst, 5000);



================================================================================
[380/904] mcSpindleSetDecelTime
Source: CATmcSpindleSetDecelTime.htm
================================================================================

mcSpindleSetDecelTime
mcSpindleSetDecelTime
C/C++ Syntax:
int mcSpindleSetDecelTime(
		MINSTANCE mInst, 
		int Range, 
		double Sec);
LUA Syntax:
rc = mc.mcSpindleSetDecelTime(
		number mInst, 
		number Range, 
		number Sec)
Description:
Set the decel. time for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
A double specifying the time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the decel. time for spindle range 0.
MINSTANCE mInst = 0;
in rc = mcSpindleSetDecelTime(mInst, 0, 5);



================================================================================
[381/904] mcSpindleSetDirection
Source: CATmcSpindleSetDirection.htm
================================================================================

mcSpindleSetDirection
mcSpindleSetDirection
C/C++ Syntax:
int mcSpindleSetDirection(
		MINSTANCE mInst, 
		int dir);
LUA Syntax:
rc = mc.mcSpindleSetDirection(
		number mInst, 
		number dir)
Description:
Set the desired spindle direction.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An integer specifying the spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
An attempt was made to set the direction to MC_SPINDLE_FWD or MC_SPINDLE_REV when the control is disabled.
MERROR_INVALID_ARG
dir
is out of range.
Notes:
None.
Usage:
// Set the spindle direction to FWD
MINSTANCE mInst = 0;
int rc = mcSpindleSetDirection(mInst, MC_SPINDLE_FWD);



================================================================================
[382/904] mcSpindleSetDirectionWait
Source: CATmcSpindleSetDirectionWait.htm
================================================================================

mcSpindleSetDirectionWait
mcSpindleSetDirectionWait
C/C++ Syntax:
int mcSpindleSetDirectionWait(
		MINSTANCE mInst, 
		int dir);
LUA Syntax:
rc = mc.mcSpindleSetDirectionWait(
		number mInst, 
		number dir)
Description:
Set the desired spindle direction and wait for the spindle to come to speed.  The function will wait for up to 20 seconds before returning MERROR_TIMED_OUT.
The type of spindle wait is determined by the system configuration.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An integer specifying the spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_TIMED_OUT
The wait timed out.
MERROR_NOT_NOW
An attempt was made to set the direction to MC_SPINDLE_FWD or MC_SPINDLE_REV when the control is disabled.
MERROR_INVALID_ARG
dir
is out of range.
Notes:
None.
Usage:
// Set the spindle direction to FWD and wait
MINSTANCE mInst = 0;
int rc = mcSpindleSetDirectionWait(mInst, MC_SPINDLE_FWD);



================================================================================
[383/904] mcSpindleSetFeedbackRatio
Source: CATmcSpindleSetFeedbackRatio.htm
================================================================================

mcSpindleSetFeedbackRatio
mcSpindleSetFeedbackRatio
C/C++ Syntax:
int mcSpindleSetFeedbackRatio(
		MINSTANCE mInst, 
		int Range, 
		double Ratio);
LUA Syntax:
rc = mc.mcSpindleSetFeedbackRatio(
		number mInst, 
		number Range, 
		number Ratio)
Description:
Set the feedback ratio for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Ratio
A double specifying the feedback ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the feedback ratio for spindle range 0.
MINSTANCE mInst = 0;
int mcSpindleSetFeedbackRatio(mInst, 0, 1.2);
// 1.2 : 1



================================================================================
[384/904] mcSpindleSetMaxRPM
Source: CATmcSpindleSetMaxRPM.htm
================================================================================

mcSpindleSetMaxRPM
mcSpindleSetMaxRPM
C/C++ Syntax:
int mcSpindleSetMaxRPM(
		MINSTANCE mInst, 
		int Range, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMaxRPM(
		number mInst, 
		number Range, 
		number RPM);
Description:
Set the max RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
RPM
A double specifying the maximum RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the max RPM for spindle range 0 to 5000
MINSTANCE mInst = 0;
int mcSpindleSetMaxRPM(mInst, 0, 5000);



================================================================================
[385/904] mcSpindleSetMinRPM
Source: CATmcSpindleSetMinRPM.htm
================================================================================

mcSpindleSetMinRPM
mcSpindleSetMinRPM
C/C++ Syntax:
int mcSpindleSetMinRPM(
		MINSTANCE mInst, 
		int Range, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMinRPM(
		number mInst, 
		number Range, 
		number RPM);
Description:
Set the min RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
RPM
A double specifying the minimum RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the min RPM for spindle range 0 to 60
MINSTANCE mInst = 0;
int mcSpindleSetMinRPM(mInst, 0, 60);



================================================================================
[386/904] mcSpindleSetMotorAccel
Source: CATmcSpindleSetMotorAccel.htm
================================================================================

mcSpindleSetMotorAccel
mcSpindleSetMotorAccel
C/C++ Syntax:
int mcSpindleSetMotorAccel(
		MINSTANCE mInst, 
		int Range, 
		double Accel);
LUA Syntax:
rc = mc.mcSpindleSetMotorAccel(
		number mInst, 
		number Range, 
		number Accel);
Description:
Set the spindle motor acceleration for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Accel
A double sepcifying the acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the acceleration for the spindle motor for range 0
MINSTANCE mInst = 0;
int rc = mcSpindleSetMotorAccel(mInst, 0, 10000);



================================================================================
[387/904] mcSpindleSetMotorMaxRPM
Source: CATmcSpindleSetMotorMaxRPM.htm
================================================================================

mcSpindleSetMotorMaxRPM
mcSpindleSetMotorMaxRPM
C/C++ Syntax:
int mcSpindleSetMotorMaxRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMotorMaxRPM(
		number mInst, 
		number RPM)
Description:
Set the maximum spindle motor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the maximum spindle motor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Cap the spindle motor RPM to 6000.
MINSTANCE mInst = 0;
int rc = mcSpindleSetMotorMaxRPM(mInst, 6000);



================================================================================
[388/904] mcSpindleSetOverride
Source: CATmcSpindleSetOverride.htm
================================================================================

mcSpindleSetOverride
mcSpindleSetOverride
C/C++ Syntax:
int mcSpindleSetOverride(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcSpindleSetOverride(
		number mInst, 
		number percent)
Description:
Set the spindle override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the decimal percentage of spindle override.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the spindle override to 50% (.5 == 50%)
MINSTANCE mInst = 0;
int rc = mcSpindleSetOverride(mInst, 0.5);



================================================================================
[389/904] mcSpindleSetOverrideEnable
Source: CATmcSpindleSetOverrideEnable.htm
================================================================================

mcSpindleSetOverrideEnable
mcSpindleSetOverrideEnable
C/C++ Syntax:
int mcSpindleSetOverrideEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcSpindleSetOverrideEnable(
		number mInst, 
		number enable)
Description:
Set the spindle override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the desired spindle override status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Enable spindle override.
MINSTANCE mInst = 0;
int rc = mcSpindleSetOverrideEnable(mInst, TRUE);



================================================================================
[390/904] mcSpindleSetRange
Source: CATmcSpindleSetRange.htm
================================================================================

mcSpindleSetRange
mcSpindleSetRange
C/C++ Syntax:
int mcSpindleSetRange(
		MINSTANCE mInst, 
		int Range);
LUA Syntax:
rc = mc.mcSpindleSetRange(
		number mInst, 
		number Range)
Description:
Set the current spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the current spindle range to the first range (0).
MINSTANCE mInst = 0;
mcSpindleSetRange(mInst, 0);



================================================================================
[391/904] mcSpindleSetReverse
Source: CATmcSpindleSetReverse.htm
================================================================================

mcSpindleSetReverse
mcSpindleSetReverse
C/C++ Syntax:
int mcSpindleSetReverse(
		MINSTANCE mInst, 
		int Range, 
		BOOL Reversed);
LUA Syntax:
rc = mc.mcSpindleSetReverse(
		number mInst, 
		number Range, 
		number Reversed)
Description:
Set the spindle as being reversed for the given spindle range.  e.g back gear.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Reversed
A BOOL specifying whether the spindle is reversed for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set spindle range 1 as being reversed.
MINSTANCE mInst = 0;
int rc = mcSpindleSetReverse(mInst, 1, TRUE);



================================================================================
[392/904] mcSpindleSetSensorRPM
Source: CATmcSpindleSetSensorRPM.htm
================================================================================

mcSpindleSetSensorRPM
mcSpindleSetSensorRPM
C/C++ Syntax:
int mcSpindleSetSensorRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetSensorRPM(
		number mInst, 
		number RPM)
Description:
Set the spindle sensor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the spindle sensor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is what spindle control plugins should use to report the spindle speed.
Usage:
// Set the spindle sensor RPM to 1000
MINSTANCE mInst = 0;
int rc = mcSpindleSetSensorRPM(mInst, 1000);



================================================================================
[393/904] mcSpindleSetSpeedCheckEnable
Source: CATmcSpindleSetSpeedCheckEnable.htm
================================================================================

mcSpindleSetSpeedCheckEnable
mcSpindleSetSpeedCheckEnable
C/C++ Syntax:
int mcSpindleSetSpeedCheckEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcSpindleSetSpeedCheckEnable(
		number mInst, 
		number enable)
Description:
Enable or disable the spindle speed check before feed moves.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of spindle speed check.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Spindle speed check is used to make sure the spindle is at an acceptable speed before a feed move.
See also:
mcSpindleSetSpeedCheckPercent() and mcSpindleGetSpeedCheckPercent().
Usage:
// Enable spindle speed checking.
MINSTANCE mInst = 0;
int rc = mcSpindleSetSpeedCheckEnable(mInst, TRUE);



================================================================================
[394/904] mcSpindleSetSpeedCheckPercent
Source: CATmcSpindleSetSpeedCheckPercent.htm
================================================================================

mcSpindleSetSpeedCheckPercent
mcSpindleSetSpeedCheckPercent
C/C++ Syntax:
int mcSpindleSetSpeedCheckPercent(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcSpindleSetSpeedCheckPercent(
		number mInst, 
		number percent)
Description:
Set the allowable percentage tha the spindle speed can fluctuate.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the speed check percentage to 5%.  100 == 100%
MINSTANCE mInst = 0;
int rc = mcSpindleSetSpeedCheckPercent(mInst, 5);



================================================================================
[395/904] mcSpindleSpeedCheck
Source: CATmcSpindleSpeedCheck.htm
================================================================================

mcSpindleSpeedCheck
mcSpindleSpeedCheck
C/C++ Syntax:
int mcSpindleSpeedCheck(
		MINSTANCE mInst, 
		int *SpeedOk);
LUA Syntax:
SpeedOk, rc = mc.mcSpindleSpeedCheck(
		number mInst)
Description:
Check if the spindle speed is withing the allowable range.
Parameters:
Parameter
Description
mInst
The controller instance.
SpeedOk
The address of a BOOL to receive the spindle speed check status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The spindle is currently off.
Notes:
None.
Usage:
// Check to see if the spidnle speed is in the allowed range.
MINSTANCE mInst = 0;
BOOL speedOk;
int rc = mcSpindleSpeedCheck(mInst, &speedOk);



================================================================================
[396/904] mcToolGetCurrent
Source: CATmcToolGetCurrent.htm
================================================================================

mcToolGetCurrent
mcToolGetCurrent
C/C++ Syntax:
int mcToolGetCurrent(
		MINSTANCE mInst, 
		int *toolnum);
LUA Syntax:
toolnum, rc = mc.mcToolGetCurrent(
		number mInst)
Description:
Retrieve the current tool number.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
The address of an integer to receive the current tool number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Tool numbers start at 1 (base 1).
Usage:
// Get the current tool.
MINSTANCE mInst = 0;
int toolnum = 0;
int rc = mcToolGetCurrent(mInst, &toolnum);



================================================================================
[397/904] mcToolGetData
Source: CATmcToolGetData.htm
================================================================================

mcToolGetData
mcToolGetData
C/C++ Syntax:
int mcToolGetData(
		MINSTANCE mInst, 
		int type, 
		int toolNumber, 
		double *value);
LUA Syntax:
value, rc = mc.mcToolGetData(
		number mInst, 
		number type, 
		number toolNumber)
Description:
Retrieve the offset values for mill and turn tools.
Parameters:
Parameter
Description
mInst
The controller instance.
type
MTOOL_MILL_X, MTOOL_MILL_X_W, MTOOL_MILL_Y, MTOOL_MILL_Y_W, MTOOL_MILL_HEIGHT, MTOOL_MILL_HEIGHT_W, MTOOL_MILL_RAD, MTOOL_MILL_RAD_W, MTOOL_MILL_POCKET, MTOOL_LATHE_X, MTOOL_LATHE_X_W, MTOOL_LATHE_Y, MTOOL_LATHE_Y_W, MTOOL_LATHE_Z, MTOOL_LATHE_Z_W, MTOOL_LATHE_POCKET, MTOOL_LATHE_TIPRAD, MTOOL_MILL_RAD, MTOOL_LATHE_TIPDIR, MTOOL_MILL_RAD_W, MTOOL_LATHE_TOOLSLIDE, MTOOL_TYPE
toolNumber
Specifies the tool number.
value
The address of a double to receive the value for the specified offset type and the specified tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the offset of a tool and can be used at anytime.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Get the tool height offset for tool number 5.
int rc = mcToolGetData(mInst, MTOOL_MILL_HEIGHT, toolnum, &val);



================================================================================
[398/904] mcToolGetDataExDbl
Source: CATmcToolGetDataExDbl.htm
================================================================================

mcToolGetDataExDbl
mcToolGetDataExDbl
C/C++ Syntax:
int mcToolGetDataExDbl(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		double *value);
LUA Syntax:
value, rc = mc.mcToolGetDataExDbl(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of a double with witch to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExDbl(mInst, toolnum, "MyUserField", &val);



================================================================================
[399/904] mcToolGetDataExInt
Source: CATmcToolGetDataExInt.htm
================================================================================

mcToolGetDataExInt
mcToolGetDataExInt
C/C++ Syntax:
int mcToolGetDataExInt(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		int *value);
LUA Syntax:
value, rc = mc.mcToolGetDataExInt(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of an integer with witch to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
int val = 0;
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExInt(mInst, toolnum, "MyUserField", &val);



================================================================================
[400/904] mcToolGetDataExStr
Source: CATmcToolGetDataExStr.htm
================================================================================

mcToolGetDataExStr
mcToolGetDataExStr
C/C++ Syntax:
int mcToolGetDataExStr(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		char *value, 
		size_t valueLen);
LUA Syntax:
value, rc = mc.mcToolGetDataExStr(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of a char buffer with which to receive the string value.
valueLen
The size of the char buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
char val[128];
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExStr(mInst, toolnum, "MyUserField", val, sizeof(val));



================================================================================
[401/904] mcToolGetDesc
Source: CATmcToolGetDesc.htm
================================================================================

mcToolGetDesc
mcToolGetDesc
C/C++ Syntax:
int mcToolGetDesc(
		MINSTANCE mInst, 
		int toolnum, 
		char *buff, 
		size_t bufsize);
LUA Syntax:
buff, rc = mc.mcToolGetDesc(
		number mInst, 
		number toolnum)
Description:
Get the text string to describe the tool
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
An integer specifying the tool number for which to get the description.
buff
The address of a string buffer to receive the tool description.
bufsize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnum
is out of range.
Notes:
Used to get the tool description for the tool table or run screen.
Usage:
MINSTANCE mInst = 0;
char desc[128];
int toolnum = 5;
// Get the description of tool number 5 for controller 0.
int rc = mcToolGetDesc(mInst, toolnum, desc, sizeof(desc));



================================================================================
[402/904] mcToolGetSelected
Source: CATmcToolGetSelected.htm
================================================================================

mcToolGetSelected
mcToolGetSelected
C/C++ Syntax:
int mcToolGetSelected(
		MINSTANCE mInst, 
		int *toolnum);
LUA Syntax:
toolnum, rc = mc.mcToolGetSelected(
		number mInst)
Description:
Retrieve the selected (next) tool number.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
The address of an integer to receive the selected tool number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the selected tool number.
MINSTANCE mInst = 0;
int toolnum = 0;
int rc = mcToolGetSelected(mInst, &toolnum);



================================================================================
[403/904] mcToolLoadFile
Source: CATmcToolLoadFile.htm
================================================================================

mcToolLoadFile
mcToolLoadFile
C/C++ Syntax:
int mcToolLoadFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcToolLoadFile(
		number mInst, 
		string FileToLoad)
Description:
Load a tool table into the core.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer specifying the tool table file to load.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_EMPTY
The specified tool table file was empty.
Notes:
Used to load a tool table file on a per profile basis.
Usage:
// Load a tool table.
MINSTANCE mInst = 0;
int rc = mcToolLoadFile(mInst, "tooltable.tls");



================================================================================
[404/904] mcToolPathCreate
Source: CATmcToolPathCreate.htm
================================================================================

mcToolPathCreate
mcToolPathCreate
C/C++ Syntax:
int mcToolPathCreate(
		MINSTANCE mInst, 
		void *window);
LUA Syntax:
N/A
Description:
Create an OpenGL window to display the tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
window
The parent window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
Passing the window handle is all that is needed to draw the toolpath.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
wxPanel* m_tpTP;

MINSTANCE mInst = 0;
m_tpTP = new wxPanel(itemPanel129, ID_TOOLPATH_PANEL, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
rc = m_tpTP->Show();
// Pass the handle of the tool path.
mcToolPathCreate(mInst, m_tpTP->GetHWND());



================================================================================
[405/904] mcToolPathDelete
Source: CATmcToolPathDelete.htm
================================================================================

mcToolPathDelete
mcToolPathDelete
C/C++ Syntax:
int mcToolPathDelete(
		MINSTANCE mInst, 
		void *parent);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The handle of the tool paths parent window.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
// Delete an existing tool path.
MINSTANCE mInst = 0;
HWND parent;
// A previously valid window handle.
int rc = mcToolPathDelete(mInst, parent);



================================================================================
[406/904] mcToolPathGenerate
Source: CATmcToolPathGenerate.htm
================================================================================

mcToolPathGenerate
mcToolPathGenerate
C/C++ Syntax:
int mcToolPathGenerate(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcToolPathGenerate(
		number mInst)
Description:
Generates the toolpath to refresh any changes that may have been done (like cutter comp or fixure offset changes).
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Generation of the tool path should only be done with the Gocd file is not running.
Usage:
MINSTANCE mInst = 0;
// Regenerate the toolpaths for controller instance 0
int rc = mcToolPathGenerate(mInst);



================================================================================
[407/904] mcToolPathGenerateAbort
Source: CATmcToolPathGenerateAbort.htm
================================================================================

mcToolPathGenerateAbort
mcToolPathGenerateAbort
C/C++ Syntax:
int mcToolPathGenerateAbort(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcToolPathGenerateAbort(
		number mInst);
Description:
Abort tool path generation.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used if there is an endless loop in the Gcode or if a file regen needs to be stopped.
Usage:
MINSTANCE mInst = 0;
// Abort the regeneration of the toolpath for controller 0.
int rc = mcToolPathGenerateAbort(mInst);



================================================================================
[408/904] mcToolPathGeneratedPercent
Source: CATmcToolPathGeneratedPercent.htm
================================================================================

mcToolPathGeneratedPercent
mcToolPathGeneratedPercent
C/C++ Syntax:
int mcToolPathGeneratedPercent(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcToolPathGeneratedPercent(
		number mInst)
Description:
Retrieve the tool path generation percentage completed.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a double to receive the tool path completion percentage. (0 to 100)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is to be used to show the path generation progress in a progress dialog when a regen has been initiated.
Usage:
MINSTANCE mInst = 0; 
double pdone = 0;

while (pdone != 100) {
// Get the percent of the file that is loaded.
mcToolPathGeneratedPercent(mInst, &pdone);
// Post the pdone to some dialog.
Sleep(250);
}



================================================================================
[409/904] mcToolPathGetAAxisPosition
Source: CATmcToolPathGetAAxisPosition.htm
================================================================================

mcToolPathGetAAxisPosition
mcToolPathGetAAxisPosition
C/C++ Syntax:
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);
LUA Syntax:
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);



================================================================================
[410/904] mcToolPathGetARotationAxis
Source: CATmcToolPathGetARotationAxis.htm
================================================================================

mcToolPathGetARotationAxis
mcToolPathGetARotationAxis
C/C++ Syntax:
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);
LUA Syntax:
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);



================================================================================
[411/904] mcToolPathGetAxisColor
Source: CATmcToolPathGetAxisColor.htm
================================================================================

mcToolPathGetAxisColor
mcToolPathGetAxisColor
C/C++ Syntax:
int mcToolPathGetAxisColor(
		MINSTANCE mInst, 
		unsigned long *axiscolor, 
		unsigned long *limitcolor);
LUA Syntax:
axiscolor, limitcolor, rc = mc.mcToolPathGetAxisColor(
		number mInst)
Description:
Retrieve the current axis and limit tool path colors.
Parameters:
Parameter
Description
mInst
The controller instance.
axiscolor
The address of an unsigned long to receive the axis color.
limitcolor
The address of an unsigned long to receive the sof limit color.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
// Get the axis and limit colors.
MINSTANCE mInst = 0;
int rc = mcToolPathGetAxisColor(MINSTANCE mInst, unsigned long *axiscolor, unsigned long *limitcolor);



================================================================================
[412/904] mcToolPathGetBackColor
Source: CATmcToolPathGetBackColor.htm
================================================================================

mcToolPathGetBackColor
mcToolPathGetBackColor
C/C++ Syntax:
int mcToolPathGetBackColor(
		MINSTANCE mInst, 
		unsigned long *topcolor, 
		unsigned long *botcolor);
LUA Syntax:
topcolor, botcolor, rc = mc.mcToolPathGetBackColor(
		number mInst)
Description:
Get the background  top and bottom colors.
Parameters:
Parameter
Description
mInst
The controller instance.
topcolor
The address of an unsigned long that receives the top color of the background.
botcolor
The address of an unsigned long that receives the bottom color of the background.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
MINSTANCE mInst = 0;
unsigned long topcol, botcol;
// Get the tool background top and bottom colors
int rc = mcToolPathGetBackColor(m_inst, &topcol, &botcol);



================================================================================
[413/904] mcToolPathGetDrawLimits
Source: CATmcToolPathGetDrawLimits.htm
================================================================================

mcToolPathGetDrawLimits
mcToolPathGetDrawLimits
C/C++ Syntax:
int mcToolPathGetDrawLimits(
		MINSTANCE mInst, 
		BOOL *drawlimits);
LUA Syntax:
drawlimits, rc = mcToolPathGetDrawLimits(
		number mInst)
Description:
Retrieve the status of the soft limit display.
Parameters:
Parameter
Description
mInst
The controller instance.
drawlimits
The address of a BOOL to receives the state of soft limit display.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
BOOL drawlimits = FALSE;
// See if the soft limits bounding box is beeing shown in the toolpath.
int rc = mcToolPathGetDrawLimits(mInst, &drawlimits);



================================================================================
[414/904] mcToolPathGetExecution
Source: CATmcToolPathGetExecution.htm
================================================================================

mcToolPathGetExecution
mcToolPathGetExecution
C/C++ Syntax:
int mcToolPathGetExecution(
		MINSTANCE mInst, 
		unsigned long exNum, 
		void **data, 
		unsigned long *len);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
exNum
An unsigned long specifying the execution number.
data
The address of a void pointer to receive the move execution info structure.
len
The address of an unsigned long the receive the length of the move execution infomation.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This structure is not in the MachAPI.h header file.  And it is subject to change without notice.  Any new items will be added onto the end of the structure thus it is important to use this API call correctly and not rely on the length of the structure given below.
struct Executions
{
	bool linear : 1;	//Is this a linear move?
	bool rapid : 1;		//Is it a Rapid move?
	bool inc : 1;		//Is this an inc move?
	bool comp : 1;	
	bool rotation : 1;      //arc direction
	bool UsedAxis0 : 1;	
	bool UsedAxis1 : 1;	
	bool UsedAxis2 : 1;	
	bool UsedAxis3 : 1;	
	bool UsedAxis4 : 1;	
	bool UsedAxis5 : 1;	
	bool UsedAxis6 : 1;	
	bool UsedAxis7 : 1;	
	bool UsedAxis8 : 1;	
	bool UsedAxis9 : 1;	
	bool UsedAxis10 : 1;		
	float end[6];
	float center[3];
	float normal[3];
	unsigned int LineNumber;	// Line number in the file... 
	unsigned int ExecutionID;	// Number of the move from the Gcode interperter
	float FeedRate;			// Feedrate of the move
	unsigned char ToolNumber;	// Tool number of the move used to show offsets.. 
	unsigned char Fixture;		// The fixture.
};
Usage:
//
MINSTANCE mInst = 0;
unsigned long exNum = 0;
unsigned long len;
void *data;
int rc;
struct Executions *ex;
// Get the length of the move execution structure first.
while (mcToolPathGetExecution(mInst, exNum, NULL, &len) == MERROR_NOERROR) {
// Allocate some mem to receive the data.
data = malloc(len);
	if (data != NULL) {
// Get the data.
if (mcToolPathGetExecution(mInst, exNum, &data, &len) == MERROR_NOERROR) {
// cast the void pointer to the current structure.
ex = (struct Executions *)data;
			...
			free(data);
		}
	}
}



================================================================================
[415/904] mcToolPathGetFollowMode
Source: CATmcToolPathGetFollowMode.htm
================================================================================

mcToolPathGetFollowMode
mcToolPathGetFollowMode
C/C++ Syntax:
int mcToolPathGetFollowMode(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcToolPathGetFollowMode(
		number mInst)
Description:
Retrieve the status of the tool path jog follow mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the jog follow mode state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// See if jog follow is enabled.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcToolPathGetFollowMode(mInst, &enabled);



================================================================================
[416/904] mcToolPathGetGenerating
Source: CATmcToolPathGetGenerating.htm
================================================================================

mcToolPathGetGenerating
mcToolPathGetGenerating
C/C++ Syntax:
int mcToolPathGetGenerating(
		MINSTANCE mInst, 
		int *pathGenerating);
LUA Syntax:
pathGenerating, rc = mc.mcToolPathGetGenerating(
		number mInst)
Description:
Retrieve the state of the tool path generation.
Parameters:
Parameter
Description
mInst
The controller instance.
pathGenerating
The address A pointer to an int to receive the path generation state (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
pathGenerating
is NULL.
Notes:
This function is used after a file load, or regen to keep the user from using any controles as the machine is loading.
Usage:
MINSTANCE mInst = 0;
BOOL IsGen = FALSE;
// See if the tool path is generating.
int rc = mcGetPathGenerating(mInst, &IsGen);



================================================================================
[417/904] mcToolPathGetLeftMouseDn
Source: CATmcToolPathGetLeftMouseDn.htm
================================================================================

mcToolPathGetLeftMouseDn
mcToolPathGetLeftMouseDn
C/C++ Syntax:
int mcToolPathGetLeftMouseDn(
		MINSTANCE mInst, 
		double *x, 
		double *y, 
		double *z);
LUA Syntax:
x, y, z, rc = mc.mcToolPathGetLeftMouseDn(
		number mInst)
Description:
Retrieve the xyz coordinates of the mouse in the tool path when the left button goes down.
Parameters:
Parameter
Description
mInst
The controller instance.
x
The address to a double to revceive the x coordinate.
y
The address to a double to revceive the y coordinate.
z
The address to a double to revceive the z coordinate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mouse coordinates in the tool path.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcToolPathGetLeftMouseDn(MINSTANCE mInst, double *x, double *y, double *z);



================================================================================
[418/904] mcToolPathGetLeftMouseUp
Source: CATmcToolPathGetLeftMouseUp.htm
================================================================================

mcToolPathGetLeftMouseUp
mcToolPathGetLeftMouseUp
C/C++ Syntax:
int mcToolPathGetLeftMouseUp(
		MINSTANCE mInst, 
		double *x, 
		double *y, 
		double *z);
LUA Syntax:
x, y, z, rc = mc.mcToolPathGetLeftMouseUp(
		number mInst)
Description:
Retrieve the xyz coordinates of the mouse in the tool path when the left button comes up.
Parameters:
Parameter
Description
mInst
The controller instance.
x
The address to a double to revceive the x coordinate.
y
The address to a double to revceive the y coordinate.
z
The address to a double to revceive the z coordinate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mouse coordinates in the tool path.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcToolPathGetLeftMouseUp(MINSTANCE mInst, double *x, double *y, double *z);



================================================================================
[419/904] mcToolPathGetPathColor
Source: CATmcToolPathGetPathColor.htm
================================================================================

mcToolPathGetPathColor
mcToolPathGetPathColor
C/C++ Syntax:
int mcToolPathGetPathColor(
		MINSTANCE mInst, 
		unsigned long *rapidcolor, 
		unsigned long *linecolor, 
		unsigned long *arccolor, 
		unsigned long *highlightcolor);
LUA Syntax:
rapidcolor, linecolor, arccolor, highlightcolor, rc = mcToolPathGetPathColor(
		number mInst)
Description:
Retrieve the tool path display colors.
Parameters:
Parameter
Description
mInst
The controller instance.
rapidcolor
The address of an unsigned long that receives the rapid (G00) color of the toolpath.
linecolor
The address of an unsigned long that receives the line (G01) color of the toolpath.
arccolor
The address of an unsigned long that receives the arc (G02/G03) color of the toolpath.
highlightcolor
The address of an unsigned long that receives the past moves color of the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
MINSTANCE mInst = 0;
unsigned long rapcol, lincol, arccol, highcol;
// Get the tool path colors
int rc = mcToolPathGetPathColor(m_inst, &rapcol, &lincol, &arccol, &highcol);



================================================================================
[420/904] mcToolPathIsSignalMouseClicks
Source: CATmcToolPathIsSignalMouseClicks.htm
================================================================================

mcToolPathIsSignalMouseClicks
mcToolPathIsSignalMouseClicks
C/C++ Syntax:
int mcToolPathIsSignalMouseClicks(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mcToolPathIsSignalMouseClicks(
		number mInst)
Description:
Determine if tool path mouse click events are signaled.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the state of the tool path mouse clicks.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// See if we are signaling mouse click events in the tool path.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcToolPathIsSignalMouseClicks(mInst, &enabled);



================================================================================
[421/904] mcToolPathSetAAxisPosition
Source: CATmcToolPathSetAAxisPosition.htm
================================================================================

mcToolPathSetAAxisPosition
mcToolPathSetAAxisPosition
C/C++ Syntax:
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);
LUA Syntax:
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);



================================================================================
[422/904] mcToolPathSetARotationAxis
Source: CATmcToolPathSetARotationAxis.htm
================================================================================

mcToolPathSetARotationAxis
mcToolPathSetARotationAxis
C/C++ Syntax:
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);
LUA Syntax:
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);



================================================================================
[423/904] mcToolPathSetAxisColor
Source: CATmcToolPathSetAxisColor.htm
================================================================================

mcToolPathSetAxisColor
mcToolPathSetAxisColor
C/C++ Syntax:
int mcToolPathSetAxisColor(
		MINSTANCE mInst, 
		unsigned long axiscolor, 
		unsigned long limitcolor);
LUA Syntax:
rc = mc.mcToolPathSetAxisColor(
		number mInst, 
		number axiscolor, 
		number limitcolor)
Description:
Set the tool path axis and limit colors.
Parameters:
Parameter
Description
mInst
The controller instance.
axiscolor
The color of the top of the axis lines in the toolpath.
limitcolor
The color of the softlimits color bounding box in the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned long.
Usage:
MINSTANCE mInst = 0;
unsigned long axiscolor;
unsigned long limitcolor;

//red
axiscolor =  (255<<0);//red
axiscolor += (0<<8);//green
axiscolor += (0<<16);//blue

//Yellow
limitcolor =  (255<<0);//red
limitcolor += (255<<8);//green 
limitcolor += (128<<16);//blue
// Set the axis and limit colors
int rc = mcToolPathSetAxisColor(mInst, axiscolor, limitcolor);



================================================================================
[424/904] mcToolPathSetBackColor
Source: CATmcToolPathSetBackColor.htm
================================================================================

mcToolPathSetBackColor
mcToolPathSetBackColor
C/C++ Syntax:
int mcToolPathSetBackColor(
		MINSTANCE mInst, 
		unsigned long topcolor, 
		unsigned long botcolor);
LUA Syntax:
rc = mc.mcToolPathSetBackColor(
		number mInst, 
		number topcolor, 
		number botcolor)
Description:
Set the tool path background color.
Parameters:
Parameter
Description
mInst
The controller instance.
topcolor
The color of the top of the background.
botcolor
The color of the bottom of the background.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to set the top and botom background color of toolpath. The colors are in RGB format converted into unsigned long.
Usage:
MINSTANCE mInst = 0;
unsigned long topcolor;
unsigned long botcolor

//Dark Blue Top
topcolor = (28<<0);
topcolor += (28<<8);
topcolor += (213<<16);
//Light Blue Bottom
botcolor = (164<<0);
botcolor += (156<<8);
botcolor += (228<<16);
// Set the background color
int rc = mcToolPathSetBackColor(mInst, topcolor, botcolor);



================================================================================
[425/904] mcToolPathSetDrawLimits
Source: CATmcToolPathSetDrawLimits.htm
================================================================================

mcToolPathSetDrawLimits
mcToolPathSetDrawLimits
C/C++ Syntax:
int mcToolPathSetDrawLimits(
		MINSTANCE mInst, 
		BOOL drawlimits);
LUA Syntax:
rc = mc.mcToolPathSetDrawLimits(
		number mInst, 
		number drawlimits)
Description:
Enable or disable the drawing of soft limits on the tool paths.
Parameters:
Parameter
Description
mInst
The controller instance.
(drawlimits, A BOOL specifying whether soft limits are drawn on the tool path.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on soft limits in the tool path.
MINSTANCE mInst = 0;
int rc = mcToolPathSetDrawLimits(mInst, TRUE);



================================================================================
[426/904] mcToolPathSetFollowMode
Source: CATmcToolPathSetFollowMode.htm
================================================================================

mcToolPathSetFollowMode
mcToolPathSetFollowMode
C/C++ Syntax:
int mcToolPathSetFollowMode(
		MINSTANCE mInst, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcToolPathSetFollowMode(
		number mInst, 
		number enabled)
Description:
Enable or disable tool path jog follow mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
A BOOL specifying the state of the tool path jog follow mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on tool path jog following.
MINSTANCE mInst = 0;
int rc = mcToolPathSetFollowMode(mInst, TRUE);



================================================================================
[427/904] mcToolPathSetPathColor
Source: CATmcToolPathSetPathColor.htm
================================================================================

mcToolPathSetPathColor
mcToolPathSetPathColor
C/C++ Syntax:
int mcToolPathSetPathColor(
		MINSTANCE mInst, 
		unsigned long rapidcolor, 
		unsigned long linecolor, 
		unsigned long arccolor, 
		unsigned long highlightcolor);
LUA Syntax:
rc = mc.mcToolPathSetPathColor(
		number mInst, 
		number rapidcolor, 
		number linecolor, 
		number arccolor, 
		number highlightcolor)
Description:
Set the tool path line display colors.
Parameters:
Parameter
Description
mInst
The controller instance.
rapidcolor
The color of the rapid (G00) moves in the toolpath.
linecolor
The color of the linear feed (G01) moves in the toolpath.
arccolor
The color of the arc (G03/G02) moves in the toolpath.
highlightcolor
The color of the moves that have been done in the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
// Set the tool path colors
MINSTANCE mInst = 0;
unsigned long rapidcolor;
unsigned long linecolor;
unsigned long arccolor;
unsigned long highlightcolor;

rapidcolor =  (254<<0);//Red
rapidcolor += (0<<8);//Green
rapidcolor += (0<<16);//Blue

linecolor =  (0<<0);//Red
linecolor += (254<<8);//Green
linecolor += (0<<16);//Blue

arccolor =  (0<<0);//Red
arccolor += (254<<8);//Green
arccolor += (0<<16);//Blue

highlightcolor =  (254<<0);//Red
highlightcolor += (254<<8);//Green
highlightcolor += (254<<16);//Blue

int rc = mcToolPathSetPathColor(mInst, rapidcolor, linecolor, arccolor, highlightcolor);



================================================================================
[428/904] mcToolPathSetSignalMouseClicks
Source: CATmcToolPathSetSignalMouseClicks.htm
================================================================================

mcToolPathSetSignalMouseClicks
mcToolPathSetSignalMouseClicks
C/C++ Syntax:
int mcToolPathSetSignalMouseClicks(
		MINSTANCE mInst, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcToolPathSetSignalMouseClicks(
		number mInst, 
		number enabled)
Description:
Enable or Disable the tool path mouse click events.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
A BOOL specifying the state of the tool path mouse click event signaling.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Turn on mouse click events in the tool path.
MINSTANCE mInst = 0;
int rc = mcToolPathSetSignalMouseClicks(mInst, TRUE);



================================================================================
[429/904] mcToolPathSetView
Source: CATmcToolPathSetView.htm
================================================================================

mcToolPathSetView
mcToolPathSetView
C/C++ Syntax:
int mcToolPathSetView(
		MINSTANCE mInst, 
		void *parent, 
		int view);
LUA Syntax:
N/A
Description:
Set the tool path view orientation.
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
view
An integer specifying the tool path view orientation. (MC_TPVIEW_TOP, MC_TPVIEW_BOTTOM, MC_TPVIEW_LEFT, MC_TPVIEW_RIGHT, or MC_TPVIEW_ISO)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
// Set the tool path orientation to the ISO view.
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int rc = mcToolPathSetView(mInst, parent, MCTPVIEW_ISO);



================================================================================
[430/904] mcToolPathSetZoom
Source: CATmcToolPathSetZoom.htm
================================================================================

mcToolPathSetZoom
mcToolPathSetZoom
C/C++ Syntax:
int mcToolPathSetZoom(
		MINSTANCE mInst, 
		void *parent, 
		double zoom);
LUA Syntax:
N/A
Description:
Set the zoom of the given tool path
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
zoom
A double specifying the zoom percentage as a decimal.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
zoom
should be a decimal percentage.  e.g. 1.5 == 150%.
Usage:
// Set the toop path zoom percentage to 150%
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int rc = mcToolPathSetZoom(mInst, parent, 1.5);



================================================================================
[431/904] mcToolPathUpdate
Source: CATmcToolPathUpdate.htm
================================================================================

mcToolPathUpdate
mcToolPathUpdate
C/C++ Syntax:
int mcToolPathUpdate(
		MINSTANCE mInst, 
		void *parent);
LUA Syntax:
N/A
Description:
Redraw/update the OpenGL tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
Updates need to be run at every .1 sec or faseter to have a smooth tool path.
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int mcToolPathUpdate(mInst, parent);



================================================================================
[432/904] mcToolSaveFile
Source: CATmcToolSaveFile.htm
================================================================================

mcToolSaveFile
mcToolSaveFile
C/C++ Syntax:
int mcToolSaveFile(
		MINSTANCE mInst);
LUA Syntax:
rc =  mcToolSaveFile(
		number mInst)
Description:
Save a previously loaded tool table file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_INVALID
No tool table fie was previously loaded.
Notes:
None.
Usage:
// Save the previously loaded tool table file.
MINSTANCE mInst = 0;
int rc = mcToolSaveFile(mInst);



================================================================================
[433/904] mcToolSetCurrent
Source: CATmcToolSetCurrent.htm
================================================================================

mcToolSetCurrent
mcToolSetCurrent
C/C++ Syntax:
int mcToolSetCurrent(
		MINSTANCE mInst, 
		int toolnum);
LUA Syntax:
rc = mc.mcToolSetCurrent(
		number mInst, 
		number toolnum)
Description:
Set the current tool to the specified tool.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
An integer specifying the tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnum
is out of range.
Notes:
None.
Usage:
// Set the current tool to tool #1.
MINSTANCE mInst = 0;
int rc = mcToolSetCurrent(mInst, 1);



================================================================================
[434/904] mcToolSetData
Source: CATmcToolSetData.htm
================================================================================

mcToolSetData
mcToolSetData
C/C++ Syntax:
int mcToolSetData(
		MINSTANCE mInst, 
		int Type, 	
		int Toolnumber, 
		double val);
LUA Syntax:
rc = mc.mcToolSetData(
		number mInst, 
		number Type, 	
		number Toolnumber, 
		number val);
Description:
Set the offset values for each tool.
Parameters:
Parameter
Description
mInst
The controller instance.
Type
MTOOL_MILL_X, MTOOL_MILL_X_W, MTOOL_MILL_Y, MTOOL_MILL_Y_W, MTOOL_MILL_HEIGHT, MTOOL_MILL_HEIGHT_W, MTOOL_MILL_RAD, MTOOL_MILL_RAD_W, MTOOL_MILL_POCKET, MTOOL_LATHE_X, MTOOL_LATHE_X_W, MTOOL_LATHE_Y, MTOOL_LATHE_Y_W, MTOOL_LATHE_Z, MTOOL_LATHE_Z_W, MTOOL_LATHE_POCKET, MTOOL_LATHE_TIPRAD, MTOOL_MILL_RAD, MTOOL_LATHE_TIPDIR
Toolnumber
Tool number to be set
val
Value to set the selected offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
Toolnumber
is out of range.
Notes:
Used to set the offest of a tool and shouldn't be changed as Gcode is running.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Set the tool height wear offset to zero.
int rc = mcToolSetData(mInst, MTOOL_MILL_HEIGHT_W, toolnum, val);



================================================================================
[435/904] mcToolSetDataExDbl
Source: CATmcToolSetDataExDbl.htm
================================================================================

mcToolSetDataExDbl
mcToolSetDataExDbl
C/C++ Syntax:
int mcToolSetDataExDbl(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		double value);
LUA Syntax:
rc = mc.mcToolSetDataExDbl(
		number mInst, 
		number toolNum, 
		string fieldName,
		number val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the double value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Set the user field "MyUserField" to zero.
int rc = mcToolSetDataExDbl(mInst, toolnum, "MyUserField", val);



================================================================================
[436/904] mcToolSetDataExInt
Source: CATmcToolSetDataExInt.htm
================================================================================

mcToolSetDataExInt
mcToolSetDataExInt
C/C++ Syntax:
int mcToolSetDataExInt(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		int value);
LUA Syntax:
rc = mc.mcToolSetDataExInt(
		number mInst, 
		number toolNum, 
		string fieldName,
		number val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the integer value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
int val = 0;
// Set the user field "MyUserField" to zero.
int rc = mcToolSetDataExInt(mInst, toolnum, "MyUserField", val);



================================================================================
[437/904] mcToolSetDataExStr
Source: CATmcToolSetDataExStr.htm
================================================================================

mcToolSetDataExStr
mcToolSetDataExStr
C/C++ Syntax:
int mcToolSetDataExStr(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		const char *value);
LUA Syntax:
rc = mc.mcToolSetDataExStr(
		number mInst, 
		number toolNum, 
		string fieldName,
		string val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the integer value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
char val[128];
// Set the user field "MyUserField" to zero.
strcpy(val, "0");
int rc = mcToolSetDataExStr(mInst, toolnum, "MyUserField", val);



================================================================================
[438/904] mcToolSetDesc
Source: CATmcToolSetDesc.htm
================================================================================

mcToolSetDesc
mcToolSetDesc
C/C++ Syntax:
int mcToolSetDesc(
		MINSTANCE mInst, 
		int toolnum, 
		const char *tdsc);
LUA Syntax:
rc = mc.mcToolSetDesc(
		number mInst, 
		number toolnum, 
		string tdsc);
Description:
Set the description for the specified tool in the tool table.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
Tool number to which to set the description.
tdsc
A string buffer that specifies the description of the tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnumber
is out of range.
Notes:
Used to set the description of a tool for the tool table or it can be used to allow the user to change it on the program run page.
Usage:
MINSTANCE mInst = 0;
char desc[128] = "My Best 1/2 inch endmill";
int toolnum = 5;
// Set the description of tool number 5.
int rc = mcToolSetDesc(mInst, toolnum, desc);



================================================================================
[439/904] Return Codes by Definition
Source: CodesByDefinition.htm
================================================================================

Return Codes by Definition
Return Codes by Definition
Error Definition
Error Number
Error Description
MERROR_NOERROR
0
No Error.
MERROR_INVALID_INSTANCE
-1
An invalid instance numer or handle was specified.
MERROR_INVALID_ARG
-2
An invalid argument was specified.
MERROR_INVALID_DIR
-3
An invalide directory was specified.
MERROR_INVALID_PROFILE
-4
An invlaid profile was specified.
MERROR_FILE_EXCEPTION
-5
An exception was encountered when processing the file.
MERROR_FILE_EMPTY
-6
An empty file was specified.
MERROR_FILE_SHARING
-7
A file sharing violation occurred.
MERROR_FILE_INVALID
-8
An invalid file was specified.
MERROR_FILE_BADSIZE
-9
The file specified it too large.
MERROR_REGEN_DONE
-10
The tool path regeneration is complete.
MERROR_NODATA
-11
The API function returned no data.
MERROR_GRID_ACTIVE
-12
The grid is active. (not used)
MERROR_NOT_IMPLEMENTED
-13
The function is not implemented in this version of the API.
MERROR_MOTOR_NOT_FOUND
-14
The specified motor was not found.
MERROR_INVALID_PARAM
-2
Same as MERROR_INVALID_ARG
MERROR_AXIS_NOT_FOUND
-16
The specified axis was not found.
MERROR_API_INIT
-17
The API failed to initialize properly.
MERROR_NOT_NOW
-18
The API function cannot be called at this time.
MERROR_NOT_CREATED
-19
The object was not created.
MERROR_SIGNAL_NOT_FOUND
-20
The specified signal was not found.
MERROR_IO_NOT_FOUND
-21
The specified input or output was not found.
MERROR_SPIN_RANGE_NOT_FOUND
-22
The specified spindle range was not found.
MERROR_PLUGIN_NOT_FOUND
-23
The specified plugin was not found.
MERROR_DEVICE_NOT_FOUND
-24
The specified device was not found.
MERROR_INVALID_STATE
-25
The state of the control is invalid for the API function.
MERROR_AXIS_NOT_ENABLED
-26
The specified axis is not enabled.
MERROR_REG_NOT_FOUND
-27
The specified register was not found.
MERROR_IPC_NOT_READY
-28
The Interprocess Communication subsystem is not ready.
MERROR_NO_ROOM_AVALABLE
-29
There are no more slots available for another override axis.
MERROR_NOT_COMPILED
-30
The macros did not compile correctly.
MERROR_NOT_ENABLED
-31
The control is not enabled.
MERROR_SCRIPT_KILLED
-32
The current running script has been killed.
MERROR_FILE_NOT_FOUND
-33
The specified file cannot be found.
MERROR_LIC_FEATURE_NOT_FOUND
-34
The specified license feature was not found.
MERROR_LIC_REQUIREMENT_NOT_FOUND
-35
The specified license requirement was not found.
MERROR_LIC_EXPIRED
-36
The license has expired.
MERROR_LIC_BAD_ID
-37
A bad ID was found in the license file.
MERROR_LIC_BAD_KEY
-38
A bad KEY was found in the license file.
MERROR_TOOLPATH_NOT_FOUND
-39
No tool paths exists. (informational and not indicative of an error)
MERROR_TIMED_OUT
-40
The operation timed out.
MERROR_SOFTLIMITS
-41
A machine soft limit was violated.
MERROR_FILE_BADFORMAT
-42
The format specifid is invalid.
MERROR_INVALID_TYPE
-43
The type specified is invalid.
MERROR_TLM_ALLOC_FAILED
-44
There is not enough memory available for the operation.
MERROR_TLM_TOOL_UNMANAGED
-45
The specified tool is unmanaged.
MERROR_TLM_GROUP_EXPIRED
-46
The specified tool group is expired.
MERROR_TLM_GROUP_NOT_FOUND
-47
The specified tool group was not found.
MERROR_TLM_GROUP_ADDED
-48
The specified tool group was added.
MERROR_TLM_GROUP_CHANGED
-49
The specified tool group was changed.
MERROR_TLM_TOOL_NOT_FOUND
-50
The specified tool was not found.
MERROR_TLM_TOOL_ADDED
-51
The specified tool was added.
MERROR_TLM_TOOL_CHANGED
-52
The specified tool was changed.
MERROR_TLM_TOOL_EXPIRED
-53
The specified tool has expired.
MERROR_WIN_NOT_FOUND
-54
The specified window was not found.



================================================================================
[440/904] Return Codes by Number
Source: CodesByNumber.htm
================================================================================

Return Codes by Number
Return Codes by Number
Error Number
Error Definition
Error Description
0
MERROR_NOERROR
No Error.
-1
MERROR_INVALID_INSTANCE
An invalid instance numer or handle was specified.
-2
MERROR_INVALID_ARG
An invalid argument was specified.
-3
MERROR_INVALID_DIR
An invalide directory was specified.
-4
MERROR_INVALID_PROFILE
An invlaid profile was specified.
-5
MERROR_FILE_EXCEPTION
An exception was encountered when processing the file.
-6
MERROR_FILE_EMPTY
An empty file was specified.
-7
MERROR_FILE_SHARING
A file sharing violation occurred.
-8
MERROR_FILE_INVALID
An invalid file was specified.
-9
MERROR_FILE_BADSIZE
The file specified it too large.
-10
MERROR_REGEN_DONE
The tool path regeneration is complete.
-11
MERROR_NODATA
The API function returned no data.
-12
MERROR_GRID_ACTIVE
The grid is active. (not used)
-13
MERROR_NOT_IMPLEMENTED
The function is not implemented in this version of the API.
-14
MERROR_MOTOR_NOT_FOUND
The specified motor was not found.
-2
MERROR_INVALID_PARAM
Same as MERROR_INVALID_ARG
-16
MERROR_AXIS_NOT_FOUND
The specified axis was not found.
-17
MERROR_API_INIT
The API failed to initialize properly.
-18
MERROR_NOT_NOW
The API function cannot be called at this time.
-19
MERROR_NOT_CREATED
The object was not created.
-20
MERROR_SIGNAL_NOT_FOUND
The specified signal was not found.
-21
MERROR_IO_NOT_FOUND
The specified input or output was not found.
-22
MERROR_SPIN_RANGE_NOT_FOUND
The specified spindle range was not found.
-23
MERROR_PLUGIN_NOT_FOUND
The specified plugin was not found.
-24
MERROR_DEVICE_NOT_FOUND
The specified device was not found.
-25
MERROR_INVALID_STATE
The state of the control is invalid for the API function.
-26
MERROR_AXIS_NOT_ENABLED
The specified axis is not enabled.
-27
MERROR_REG_NOT_FOUND
The specified register was not found.
-28
MERROR_IPC_NOT_READY
The Interprocess Communication subsystem is not ready.
-29
MERROR_NO_ROOM_AVALABLE
There are no more slots available for another override axis.
-30
MERROR_NOT_COMPILED
The macros did not compile correctly.
-31
MERROR_NOT_ENABLED
The control is not enabled.
-32
MERROR_SCRIPT_KILLED
The current running script has been killed.
-33
MERROR_FILE_NOT_FOUND
The specified file cannot be found.
-34
MERROR_LIC_FEATURE_NOT_FOUND
The specified license feature was not found.
-35
MERROR_LIC_REQUIREMENT_NOT_FOUND
The specified license requirement was not found.
-36
MERROR_LIC_EXPIRED
The license has expired.
-37
MERROR_LIC_BAD_ID
A bad ID was found in the license file.
-38
MERROR_LIC_BAD_KEY
A bad KEY was found in the license file.
-39
MERROR_TOOLPATH_NOT_FOUND
No tool paths exists. (informational and not indicative of an error)
-40
MERROR_TIMED_OUT
The operation timed out.
-41
MERROR_SOFTLIMITS
A machine soft limit was violated.
-42
MERROR_FILE_BADFORMAT
The format specifid is invalid.
-43
MERROR_INVALID_TYPE
The type specified is invalid.
-44
MERROR_TLM_ALLOC_FAILED
There is not enough memory available for the operation.
-45
MERROR_TLM_TOOL_UNMANAGED
The specified tool is unmanaged.
-46
MERROR_TLM_GROUP_EXPIRED
The specified tool group is expired.
-47
MERROR_TLM_GROUP_NOT_FOUND
The specified tool group was not found.
-48
MERROR_TLM_GROUP_ADDED
The specified tool group was added.
-49
MERROR_TLM_GROUP_CHANGED
The specified tool group was changed.
-50
MERROR_TLM_TOOL_NOT_FOUND
The specified tool was not found.
-51
MERROR_TLM_TOOL_ADDED
The specified tool was added.
-52
MERROR_TLM_TOOL_CHANGED
The specified tool was changed.
-53
MERROR_TLM_TOOL_EXPIRED
The specified tool has expired.
-54
MERROR_WIN_NOT_FOUND
The specified window was not found.



================================================================================
[441/904] Compiling
Source: Compiling.htm
================================================================================

Compiling
Compiling
Include the MachAPI.h file in your source files.
For the Windows Operationg System:
The dynamic C runtime should be used.  /MD and /MDd for Visual Studio.
There are a few environment variables that can be used:
MACHSDK
should point to the Mach SDK folder.  This environment variable can then be used in your projects to point to the inlude and lib directories in your project.  e.g $(MACHSDK)\include and $(MACHSDK)\lib.
M4HOBBY
or should point to the Mach installation directory.  Plugin projects can then use this environment variable to copy the resulting plugin the Plugins folder. e.g. In the post build event, add
copy "$(TargetPath)" "$(M4HOBBY)Plugins"
Several compile time definitions are required or can be useful:
Define
MACH_STATIC
in your project or define
MACH_STATIC
in your code before the MachAPI.h file is included.
This is required!
_ATL_XP_TARGETING
: If you are using VS2013, it will not compile an executable that runs on windows XP by default.  Defining
_ATL_XP_TARGETING
will correct this in conjuction with setting the linker minimum version to 5.01.
FAST_DEBUG
: A link library (MachAPIfd.lib) that uses the non debug version of the CRT (/MD) is provided for speed.  Your code should then also be compiled with /MD and define FAST_DEBUG but you should turn on symbol information and link with debugging info.  This keeps the debug CRT heap walking/memory checking routines from slowing things down in the debugger.  Of course, it is a good idea to check you project with full debug settings periodically to check for memory leaks and such.
_CRT_SECURE_NO_WARNINGS
:, if you use a lot of the old C style functions that are considered as insecure, this will reduce your warning messages.



================================================================================
[442/904] API Error Return Codes
Source: ErrorCodes.htm
================================================================================

API Error Return Codes
API Error Return Codes
Return Codes by Number
Return Codes by Definition



================================================================================
[443/904] Status Messages
Source: ErrorMessages.htm
================================================================================

Status Messages
Status Messages
mcCntlGetLastError
mcCntlGetLastLogMsg
mcCntlLog
mcCntlSetLastError
mcCntlSetLogging



================================================================================
[444/904] GUI
Source: GUI.htm
================================================================================

GUI
GUI
mcCntlCleanup
mcCntlInit
mcFixtureLoadFile
mcFixtureSaveFile
mcGuiGetWindowHandle
mcGuiSetFocus
mcGuiSetWindowHandle
mcToolPathCreate
mcToolPathDelete
mcToolPathGenerate
mcToolPathGenerateAbort
mcToolPathGeneratedPercent
mcToolPathGetAAxisPosition
mcToolPathGetARotationAxis
mcToolPathGetAxisColor
mcToolPathGetBackColor
mcToolPathGetDrawLimits
mcToolPathGetExecution
mcToolPathGetFollowMode
mcToolPathGetGenerating
mcToolPathGetLeftMouseDn
mcToolPathGetLeftMouseUp
mcToolPathGetPathColor
mcToolPathIsSignalMouseClicks
mcToolPathSetAAxisPosition
mcToolPathSetARotationAxis
mcToolPathSetAxisColor
mcToolPathSetBackColor
mcToolPathSetDrawLimits
mcToolPathSetFollowMode
mcToolPathSetPathColor
mcToolPathSetSignalMouseClicks
mcToolPathSetView
mcToolPathSetZoom
mcToolPathUpdate



================================================================================
[445/904] Gcode File
Source: GcodeFile.htm
================================================================================

Gcode File
Gcode File
mcCntlGetGcodeLine
mcCntlGetGcodeLineCount
mcCntlGetGcodeLineNbr
mcCntlRewindFile
mcCntlSetGcodeLineNbr
mcCntlLoadGcodeFile
mcCntlLoadGcodeString
mcCntlCloseGcodeFile
mcCntlGetGcodeFileName



================================================================================
[446/904] General
Source: General.htm
================================================================================

General
General
mcCntlConfigStart
mcCntlConfigStop
mcCntlCreateLocalVars
mcCntlEnable
mcCntlGcodeExecute
mcCntlGcodeExecuteWait
mcCntlGcodeInterpGetData
mcCntlGcodeInterpGetPos
mcCntlGetBuild
mcCntlGetComputerID
mcCntlGetCoolantDelay
mcCntlGetCwd
mcCntlGetDiaMode
mcCntlGetDistToGo
mcCntlGetInstanceHandle
mcCntlGetLocalComment
mcCntlGetLocalVar
mcCntlGetLocalVarFlag
mcCntlGetLogging
mcCntlGetMachDir
mcCntlGetMistDelay
mcCntlGetModalGroup
mcCntlGetMode
mcCntlGetOffset
mcCntlGetPoundVar
mcCntlGetRegister
mcCntlGetRunTime
mcCntlGetSpindleSpeed
mcCntlGetState
mcCntlGetStateName
mcCntlGetStats
mcCntlGetToolOffset
mcCntlGetUnitsCurrent
mcCntlGetUnitsDefault
mcCntlGetValue
mcCntlGetVersion
mcCntlIsStill
mcCntlMachineStateClear
mcCntlMachineStatePop
mcCntlMachineStatePush
mcCntlMacroAlarm
mcCntlMacroStop
mcCntlMdiExecute
mcCntlPluginConfig
mcCntlPluginDiag
mcCntlProbeFileClose
mcCntlProbeFileOpen
mcCntlProbeGetStrikeStatus
mcCntlSetCoolantDelay
mcCntlSetDiaMode
mcCntlSetMistDelay
mcCntlSetMode
mcCntlSetPoundVar
mcCntlSetStats
mcCntlSetValue
mcFileHoldAquire
mcFileHoldReason
mcFileHoldRelease



================================================================================
[447/904] General Plugin Design Suggestions
Source: GeneralDesign.htm
================================================================================

General Plugin Design Suggestions
General Plugin Design Suggestions
Registering I/O:
I/O should be registered in the mcPluginInit() plugin entry point.  It should not depend on the device actually working or in a "connected" state.  Instead, I/O sonfiguration should be done from the profile configuration.  A "fresh" config could just have a minimal amount of defaults that may be common to the different devices (if the plugin supports multiple devices).
Using this method assures that a device connection failure does not wipe the Core user mappings.  Of course you should have a message notifying the user of the connection failure and you should also prevent the plugin from trying to function in this state.
Configuration Dialogs:
Typical config dialogs really should do only two things which are reading and writing settings to the profile.  The plugin should read the settings from the profile upon startup and after a config change.  Meaning it is usually not a good idea to pass pointers to control structures or classes from the plugin and have the configuration dialog modify them.  It is much better to isolate the config dialog from the plugin in this manner.  You should create a plugin config dialog with the goal of it being able to work autonomously to the extent where the dialog could be used in a separate config executable.
Detecting signal, I/O, and register changes:
The Core uses a messaging system to keep the plugins informed of signal and register changes.  It is not necessary to poll signal states or registers at all.  If the Core changes an output signal, it sends a MSG_SIG_CHANGED message to the plugin.  All you have to do is watch for any given signal you are interested in.  The signal ID will be passed in param1 and the state passed in param2.  The same for registers except your plugin will only receive register changes for registers that your plugin created via the mcPluginMsg() (synchronous) callback.  The register handle will be passed in param 1.  You must then call mcRegisterGet*() functions to retrieve the new value of the register since they can contain any type of data like strings or double values that cannot be passed in param2.
It is also not necessary to poll the state of outputs that your plugin created.  If a user has mapped them to a Core signal, and the Core changes the state of the output via changing its mapped signal, then your plugin will get a MSG_IO_CHANGED message via the mcPluginMsg() callback.  The handle to the IO object will be passed in param1 and the state will be passed in param2.
Detecting configuration changes:
The Core sends a MSG_CONFIG_END to the plugins at startup when all of the device, axis, and motor information is available.  This is the point at which the Core has everything loaded and configured and is ready for operation.  If the user enters the Core configuration dialog, The Core will send a MSG_CONFIG_START.  It will also send a MSG_CONFIG_END when the user is finished the configuring process.  You can use the MSG_CONFIG_END message in your plugin to do any housekeeping that needs to be done after configuration changes.  If you see a MSG_CONFIG_START, you can put your device into a benign state, if you wish, but MSG_CONFIG_END  must take it out of this state.
Controlling the interoperability with other Core devices:
Every now and then, it may be desirable to have your plugin only work if other devices are present.  Similarly, you may wish to disable other devices that you deem necessary.  As an example, if you wanted the Core to only run with your plugin, then in your plugin, you can loop through all of the Core devices and disable any other motion device (DEV_TYPE_MOTION flag) it finds.  You might want to leave Sim operational though.



================================================================================
[448/904] Getting Started
Source: GettingStarted.htm
================================================================================

Getting Started
Getting Started
Supported Platforms
Compiling
Linking



================================================================================
[449/904] Input Signals
Source: Input_Signals.htm
================================================================================

Input Signals
Input Signals
Signal
Description
ISIG_PROBE
Probe
ISIG_PROBE1
Probe1
ISIG_PROBE2
Probe2
ISIG_PROBE3
Probe3
ISIG_INDEX
Index
ISIG_INPUT0
Input #0
ISIG_INPUT1
Input #1
ISIG_INPUT2
Input #2
ISIG_INPUT3
Input #3
ISIG_INPUT4
Input #4
ISIG_INPUT5
Input #5
ISIG_INPUT6
Input #6
ISIG_INPUT7
Input #7
ISIG_INPUT8
Input #8
ISIG_INPUT9
Input #9
ISIG_INPUT10
Input #10
ISIG_INPUT11
Input #11
ISIG_INPUT12
Input #12
ISIG_INPUT13
Input #13
ISIG_INPUT14
Input #14
ISIG_INPUT15
Input #15
ISIG_INPUT16
Input #16
ISIG_INPUT17
Input #17
ISIG_INPUT18
Input #18
ISIG_INPUT19
Input #19
ISIG_INPUT20
Input #20
ISIG_INPUT21
Input #21
ISIG_INPUT22
Input #22
ISIG_INPUT23
Input #23
ISIG_INPUT24
Input #24
ISIG_INPUT25
Input #25
ISIG_INPUT26
Input #26
ISIG_INPUT27
Input #27
ISIG_INPUT28
Input #28
ISIG_INPUT29
Input #29
ISIG_INPUT30
Input #30
ISIG_INPUT31
Input #31
ISIG_INPUT32
Input #32
ISIG_INPUT33
Input #33
ISIG_INPUT34
Input #34
ISIG_INPUT35
Input #35
ISIG_INPUT36
Input #36
ISIG_INPUT37
Input #37
ISIG_INPUT38
Input #38
ISIG_INPUT39
Input #39
ISIG_INPUT40
Input #40
ISIG_INPUT41
Input #41
ISIG_INPUT42
Input #42
ISIG_INPUT43
Input #43
ISIG_INPUT44
Input #44
ISIG_INPUT45
Input #45
ISIG_INPUT46
Input #46
ISIG_INPUT47
Input #47
ISIG_INPUT48
Input #48
ISIG_INPUT49
Input #49
ISIG_INPUT50
Input #50
ISIG_INPUT51
Input #51
ISIG_INPUT52
Input #52
ISIG_INPUT53
Input #53
ISIG_INPUT54
Input #54
ISIG_INPUT55
Input #55
ISIG_INPUT56
Input #56
ISIG_INPUT57
Input #57
ISIG_INPUT58
Input #58
ISIG_INPUT59
Input #59
ISIG_INPUT60
Input #60
ISIG_INPUT61
Input #61
ISIG_INPUT62
Input #62
ISIG_INPUT63
Input #63
ISIG_LIMITOVER
Limit Override
ISIG_EMERGENCY
E-Stop
ISIG_THCON
THC On
ISIG_THCUP
THC Up
ISIG_THCDOWN
THC Down
ISIG_TIMING
Timing
ISIG_JOGXP
Jog X+
ISIG_JOGXN
Jog X-
ISIG_JOGYP
Jog Y+
ISIG_JOGYN
Jog Y-
ISIG_JOGZP
Jog Z+
ISIG_JOGZN
Jog Z-
ISIG_JOGAP
Jog A+
ISIG_JOGAN
Jog A-
ISIG_JOGBP
Jog B+
ISIG_JOGBN
Jog B-
ISIG_JOGCP
Jog C+
ISIG_JOGCN
Jog C-
ISIG_SPINDLE_AT_SPEED
Spindle At Speed
ISIG_SPINDLE_AT_ZERO
Spindle At Zero
ISIG_MOTOR0_HOME
Motor 0 Home
ISIG_MOTOR0_PLUS
Motor 0 ++
ISIG_MOTOR0_MINUS
Motor 0 --
ISIG_MOTOR1_HOME
Motor 1 Home
ISIG_MOTOR1_PLUS
Motor 1 ++
ISIG_MOTOR1_MINUS
Motor 1 --
ISIG_MOTOR2_HOME
Motor 2 Home
ISIG_MOTOR2_PLUS
Motor 2 ++
ISIG_MOTOR2_MINUS
Motor 2 --
ISIG_MOTOR3_HOME
Motor 3 Home
ISIG_MOTOR3_PLUS
Motor 3 ++
ISIG_MOTOR3_MINUS
Motor 3 --
ISIG_MOTOR4_HOME
Motor 4 Home
ISIG_MOTOR4_PLUS
Motor 4 ++
ISIG_MOTOR4_MINUS
Motor 4 --
ISIG_MOTOR5_HOME
Motor 5 Home
ISIG_MOTOR5_PLUS
Motor 5 ++
ISIG_MOTOR5_MINUS
Motor 5 --
ISIG_MOTOR6_HOME
Motor 6 Home
ISIG_MOTOR6_PLUS
Motor 6 ++
ISIG_MOTOR6_MINUS
Motor 6 --
ISIG_MOTOR7_HOME
Motor 7 Home
ISIG_MOTOR7_PLUS
Motor 7 ++
ISIG_MOTOR7_MINUS
Motor 7 --
ISIG_MOTOR8_HOME
Motor 8 Home
ISIG_MOTOR8_PLUS
Motor 8 ++
ISIG_MOTOR8_MINUS
Motor 8 --
ISIG_MOTOR9_HOME
Motor 9 Home
ISIG_MOTOR9_PLUS
Motor 9 ++
ISIG_MOTOR9_MINUS
Motor 9 --
ISIG_MOTOR10_HOME
Motor 10 Home
ISIG_MOTOR10_PLUS
Motor 10 ++
ISIG_MOTOR10_MINUS
Motor 10 --
ISIG_MOTOR11_HOME
Motor 11 Home
ISIG_MOTOR11_PLUS
Motor 11 ++
ISIG_MOTOR11_MINUS
Motor 11 --
ISIG_MOTOR12_HOME
Motor 12 Home
ISIG_MOTOR12_PLUS
Motor 12 ++
ISIG_MOTOR12_MINUS
Motor 12 --
ISIG_MOTOR13_HOME
Motor 13 Home
ISIG_MOTOR13_PLUS
Motor 13 ++
ISIG_MOTOR13_MINUS
Motor 13 --
ISIG_MOTOR14_HOME
Motor 14 Home
ISIG_MOTOR14_PLUS
Motor 14 ++
ISIG_MOTOR14_MINUS
Motor 14 --
ISIG_MOTOR15_HOME
Motor 15 Home
ISIG_MOTOR15_PLUS
Motor 15 ++
ISIG_MOTOR15_MINUS
Motor 15 --
ISIG_MOTOR16_HOME
Motor 16 Home
ISIG_MOTOR16_PLUS
Motor 16 ++
ISIG_MOTOR16_MINUS
Motor 16 --
ISIG_MOTOR17_HOME
Motor 17 Home
ISIG_MOTOR17_PLUS
Motor 17 ++
ISIG_MOTOR17_MINUS
Motor 17 --
ISIG_MOTOR18_HOME
Motor 18 Home
ISIG_MOTOR18_PLUS
Motor 18 ++
ISIG_MOTOR18_MINUS
Motor 18 --
ISIG_MOTOR19_HOME
Motor 19 Home
ISIG_MOTOR19_PLUS
Motor 19 ++
ISIG_MOTOR19_MINUS
Motor 19 --
ISIG_MOTOR20_HOME
Motor 20 Home
ISIG_MOTOR20_PLUS
Motor 20 ++
ISIG_MOTOR20_MINUS
Motor 20 --
ISIG_MOTOR21_HOME
Motor 21 Home
ISIG_MOTOR21_PLUS
Motor 21 ++
ISIG_MOTOR21_MINUS
Motor 21 --
ISIG_MOTOR22_HOME
Motor 22 Home
ISIG_MOTOR22_PLUS
Motor 22 ++
ISIG_MOTOR22_MINUS
Motor 22 --
ISIG_MOTOR23_HOME
Motor 23 Home
ISIG_MOTOR23_PLUS
Motor 23 ++
ISIG_MOTOR23_MINUS
Motor 23 --
ISIG_MOTOR24_HOME
Motor 24 Home
ISIG_MOTOR24_PLUS
Motor 24 ++
ISIG_MOTOR24_MINUS
Motor 24 --
ISIG_MOTOR25_HOME
Motor 25 Home
ISIG_MOTOR25_PLUS
Motor 25 ++
ISIG_MOTOR25_MINUS
Motor 25 --
ISIG_MOTOR26_HOME
Motor 26 Home
ISIG_MOTOR26_PLUS
Motor 26 ++
ISIG_MOTOR26_MINUS
Motor 26 --
ISIG_MOTOR27_HOME
Motor 27 Home
ISIG_MOTOR27_PLUS
Motor 27 ++
ISIG_MOTOR27_MINUS
Motor 27 --
ISIG_MOTOR28_HOME
Motor 28 Home
ISIG_MOTOR28_PLUS
Motor 28 ++
ISIG_MOTOR28_MINUS
Motor 28 --
ISIG_MOTOR29_HOME
Motor 29 Home
ISIG_MOTOR29_PLUS
Motor 29 ++
ISIG_MOTOR29_MINUS
Motor 29 --
ISIG_MOTOR30_HOME
Motor 30 Home
ISIG_MOTOR30_PLUS
Motor 30 ++
ISIG_MOTOR30_MINUS
Motor 30 --
ISIG_MOTOR31_HOME
Motor 31 Home
ISIG_MOTOR31_PLUS
Motor 31 ++
ISIG_MOTOR31_MINUS
Motor 31 --



================================================================================
[450/904] Jogging
Source: Jogging.htm
================================================================================

Jogging
Jogging
mcJogAbsStart
mcJogAbsStop
mcJogGetAccel
mcJogGetFeedRate
mcJogGetFollowMode
mcJogGetInc
mcJogGetRate
mcJogGetUnitsMode
mcJogGetVelocity
mcJogIncStart
mcJogIncStop
mcJogIsJogging
mcJogIsStopping
mcJogSetAccel
mcJogSetFeedRate
mcJogSetFollowMode
mcJogSetInc
mcJogSetRate
mcJogSetTraceEnable
mcJogSetType
mcJogSetUnitsMode
mcJogVelocityStart
mcJogVelocityStop



================================================================================
[451/904] License
Source: License.htm
================================================================================

License
License
mcCntlCheckLicenseFeature
mcCntlGetLicenseData
mcCntlGetLicenseDataLen
mcCntlGetLicenseModules



================================================================================
[452/904] Linking
Source: Linking.htm
================================================================================

Linking
Linking
For the Windows Operationg System:
For a Relase target, add MachAPI.lib to your library list.
For a FastDebug target, add MachAPIfd.lib to your library list.
For a Debug target, add MachAPId.lib to your library list.



================================================================================
[453/904] MPGs
Source: MPGs.htm
================================================================================

MPGs
MPGs
mcMpgGetAccel
mcMpgGetAxis
mcMpgGetCountsPerDetent
mcMpgGetEnable
mcMpgGetEncoderReg
mcMpgGetInc
mcMpgGetReversed
mcMpgGetRate
mcMpgGetShuttleMode
mcMpgGetShuttlePercent
mcMpgMoveCounts
mcMpgSetAccel
mcMpgSetAxis
mcMpgSetCountsPerDetent
mcMpgSetEnable
mcMpgSetEncoderReg
mcMpgSetInc
mcMpgSetReversed
mcMpgSetRate
mcMpgSetShuttleMode
mcMpgSetShuttlePercent



================================================================================
[454/904] Motion
Source: Motion.htm
================================================================================

Motion
Motion
mcMotionClearPlanner
mcMotionCyclePlanner
mcMotionCyclePlannerEx
mcMotionGetAbsPos
mcMotionGetAbsPosFract
mcMotionGetBacklashAbs
mcMotionGetBacklashInc
mcMotionGetIncPos
mcMotionGetMoveID
mcMotionGetPos
mcMotionGetProbeParams
mcMotionGetRigidTapParams
mcMotionGetSyncOutput
mcMotionGetThreadParams
mcMotionGetThreadingRate
mcMotionGetVel
mcMotionSetCycleTime
mcMotionSetMoveID
mcMotionSetPos
mcMotionSetProbeComplete
mcMotionSetProbePos
mcMotionSetStill
mcMotionSetThreadingRate
mcMotionSetVel
mcMotionSync
mcMotionThreadComplete



================================================================================
[455/904] Motors
Source: Motors.htm
================================================================================

Motors
Motors
mcMotorGetAxis
mcMotorGetCountsPerUnit
mcMotorGetInfoStruct
mcMotorGetMaxAccel
mcMotorGetMaxVel
mcMotorGetPos
mcMotorGetVel
mcMotorIsHomed
mcMotorIsStill
mcMotorRegister
mcMotorSetHomePos
mcMotorSetInfoStruct
mcMotorSetMaxAccel
mcMotorSetMaxVel
mcMotorUnregister



================================================================================
[456/904] Operation
Source: Operation.htm
================================================================================

Operation
Operation
mcCntlCycleStart
mcCntlCycleStop
mcCntlDryRunToLine
mcCntlEStop
mcCntlFeedHold
mcCntlFeedHoldState
mcCntlGetBlockDelete
mcCntlGetEnableFRO
mcCntlGetFRO
mcCntlGetOptionalStop
mcCntlGetRRO
mcCntlGetSingleBlock
mcCntlGotoZero
mcCntlIsInCycle
mcCntlReset
mcCntlSetBlockDelete
mcCntlSetEnableFRO
mcCntlSetFRO
mcCntlSetOptionalStop
mcCntlSetRRO
mcCntlSetResetCodes
mcCntlSetSingleBlock
mcCntlStartMotionDev
mcCntlStopMotionDev
mcCntlToolChangeManual
mcCntlWaitOnCycleStart



================================================================================
[457/904] Output Signals
Source: Output_Signals.htm
================================================================================

Output Signals
Output Signals
Signal
Description
OSIG_DIGTRIGGER
Digitize Trigger
OSIG_SPINDLEON
Spindle On
OSIG_SPINDLEFWD
Spindle Fwd
OSIG_SPINDLEREV
Spindle Rev
OSIG_COOLANTON
Coolant On
OSIG_MISTON
Mist On
OSIG_CHARGE
Charge Pump #1
OSIG_CHARGE2
Charge Pump #2
OSIG_CURRENTHILOW
Current Hi/Low
OSIG_ENABLE0
Enable #0
OSIG_ENABLE1
Enable #1
OSIG_ENABLE2
Enable #2
OSIG_ENABLE3
Enable #3
OSIG_ENABLE4
Enable #4
OSIG_ENABLE5
Enable #5
OSIG_ENABLE6
Enable #6
OSIG_ENABLE7
Enable #7
OSIG_ENABLE8
Enable #8
OSIG_ENABLE9
Enable #9
OSIG_ENABLE10
Enable #10
OSIG_ENABLE11
Enable #11
OSIG_ENABLE12
Enable #12
OSIG_ENABLE13
Enable #13
OSIG_ENABLE14
Enable #14
OSIG_ENABLE15
Enable #15
OSIG_ENABLE16
Enable #16
OSIG_ENABLE17
Enable #17
OSIG_ENABLE18
Enable #18
OSIG_ENABLE19
Enable #19
OSIG_ENABLE20
Enable #20
OSIG_ENABLE21
Enable #21
OSIG_ENABLE22
Enable #22
OSIG_ENABLE23
Enable #23
OSIG_ENABLE24
Enable #24
OSIG_ENABLE25
Enable #25
OSIG_ENABLE26
Enable #26
OSIG_ENABLE27
Enable #27
OSIG_ENABLE28
Enable #28
OSIG_ENABLE29
Enable #29
OSIG_ENABLE30
Enable #30
OSIG_ENABLE31
Enable #31
OSIG_XLIMITPLUS
X ++
OSIG_XLIMITMINUS
X --
OSIG_XHOME
X Home
OSIG_YLIMITPLUS
Y ++
OSIG_YLIMITMINUS
Y --
OSIG_YHOME
Y Home
OSIG_ZLIMITPLUS
Z ++
OSIG_ZLIMITMINUS
Z --
OSIG_ZHOME
Z Home
OSIG_ALIMITPLUS
A ++
OSIG_ALIMITMINUS
A --
OSIG_AHOME
A Home
OSIG_BLIMITPLUS
B ++
OSIG_BLIMITMINUS
B --
OSIG_BHOME
B Home
OSIG_CLIMITPLUS
C ++
OSIG_CLIMITMINUS
C --
OSIG_CHOME
C Home
OSIG_OUTPUT0
Output #0
OSIG_OUTPUT1
Output #1
OSIG_OUTPUT2
Output #2
OSIG_OUTPUT3
Output #3
OSIG_OUTPUT4
Output #4
OSIG_OUTPUT5
Output #5
OSIG_OUTPUT6
Output #6
OSIG_OUTPUT7
Output #7
OSIG_OUTPUT8
Output #8
OSIG_OUTPUT9
Output #9
OSIG_OUTPUT10
Output #10
OSIG_OUTPUT11
Output #11
OSIG_OUTPUT12
Output #12
OSIG_OUTPUT13
Output #13
OSIG_OUTPUT14
Output #14
OSIG_OUTPUT15
Output #15
OSIG_OUTPUT16
Output #16
OSIG_OUTPUT17
Output #17
OSIG_OUTPUT18
Output #18
OSIG_OUTPUT19
Output #19
OSIG_OUTPUT20
Output #20
OSIG_OUTPUT21
Output #21
OSIG_OUTPUT22
Output #22
OSIG_OUTPUT23
Output #23
OSIG_OUTPUT24
Output #24
OSIG_OUTPUT25
Output #25
OSIG_OUTPUT26
Output #26
OSIG_OUTPUT27
Output #27
OSIG_OUTPUT28
Output #28
OSIG_OUTPUT29
Output #29
OSIG_OUTPUT30
Output #30
OSIG_OUTPUT31
Output #31
OSIG_OUTPUT32
Output #32
OSIG_OUTPUT33
Output #33
OSIG_OUTPUT34
Output #34
OSIG_OUTPUT35
Output #35
OSIG_OUTPUT36
Output #36
OSIG_OUTPUT37
Output #37
OSIG_OUTPUT38
Output #38
OSIG_OUTPUT39
Output #39
OSIG_OUTPUT40
Output #40
OSIG_OUTPUT41
Output #41
OSIG_OUTPUT42
Output #42
OSIG_OUTPUT43
Output #43
OSIG_OUTPUT44
Output #44
OSIG_OUTPUT45
Output #45
OSIG_OUTPUT46
Output #46
OSIG_OUTPUT47
Output #47
OSIG_OUTPUT48
Output #48
OSIG_OUTPUT49
Output #49
OSIG_OUTPUT50
Output #50
OSIG_OUTPUT51
Output #51
OSIG_OUTPUT52
Output #52
OSIG_OUTPUT53
Output #53
OSIG_OUTPUT54
Output #54
OSIG_OUTPUT55
Output #55
OSIG_OUTPUT56
Output #56
OSIG_OUTPUT57
Output #57
OSIG_OUTPUT58
Output #58
OSIG_OUTPUT59
Output #59
OSIG_OUTPUT60
Output #60
OSIG_OUTPUT61
Output #61
OSIG_OUTPUT62
Output #62
OSIG_OUTPUT63
Output #63
OSIG_RUNNING_GCODE
Gcode Running
OSIG_FEEDHOLD
Feed Hold
OSIG_BLOCK_DELETE
Block Delete
OSIG_SINGLE_BLOCK
Single Block
OSIG_REVERSE_RUN
Reverse Run
OSIG_OPT_STOP
Opt Stop
OSIG_MACHINE_ENABLED
Machine Enabled
OSIG_TOOL_CHANGE
Tool Change
OSIG_DIST_TOGO
Dist To Go
OSIG_MACHINE_CORD
Machine Coord
OSIG_SOFTLIMITS_ON
Softlimits On
OSIG_JOG_INC
Jog Inc
OSIG_JOG_CONT
Jog Cont
OSIG_JOG_ENABLED
Jog Enabled
OSIG_JOG_MPG
Jog MPG
OSIG_HOMED_X
X Homed
OSIG_HOMED_Y
Y Homed
OSIG_HOMED_Z
Z Homed
OSIG_HOMED_A
A Homed
OSIG_HOMED_B
B Homed
OSIG_HOMED_C
C Homed
OSIG_DWELL
Dwell
OSIG_TP_MOUSE_DN
Toolpath Mouse Down
OSIG_LIMITOVER
Limit Override
OSIG_ALARM
Alarm
OSIG_PRTSF
Parts Finished



================================================================================
[458/904] Plugin Development
Source: PluginDev.htm
================================================================================

Plugin Development
Plugin Development
The following topics will discuss things common to all plugins.
General Plugin Design Suggestions
The following topics will discuss some of the special function interfaces that are vaiable to a motion plugin.
Probing
Rigid Tapping
Threading



================================================================================
[459/904] Plugins and Devices
Source: PluginsDevices.htm
================================================================================

Plugins and Devices
Plugins and Devices
The Mach core uses loadable modules know as "plugins" that provide interfaces to devices and/or provides services.  When the core is initialized, the Plugins directory searched and each plugin found is loaded with the following sequence:
The mcPluginLoad() entry point is called.  The plugin should register itself with the core and provide its capabilites at this time.
The mcPluginInit() entry point is called for each Core instance.  Devices should be registered at this time as well as any I/O and registers that belong to the device.
mcDeviceGetHandle
mcDeviceGetInfo
mcDeviceGetInfoStruct
mcDeviceGetNextHandle
mcDeviceRegister
mcPluginConfigure
mcPluginCoreLoad
mcPluginCoreUnload
mcPluginDiagnostic
mcPluginEnable
mcPluginGetEnabled
mcPluginGetInfoStruct
mcPluginGetLicenseFeature
mcPluginGetNextHandle
mcPluginGetValid
mcPluginInstall
mcPluginRegister
mcPluginRemove



================================================================================
[460/904] Probing
Source: Probing.htm
================================================================================

Probing
Probing
Motion plugin probing procedure.
The probe moves are really just
G01
moves in exeact stop mode with the 
addition of being marked as
EX_PROBE
in the
execution_t
struct 
from
mcMotionCyclePlannerEx
().
When executing a
G31
, the core considers the move as an exact stop move 
and therefore will request a motor stop report.  It waits on one of two 
conditions:
A probe strike condition where the motion plugin calls
mcMotionSetProbeComplete
().
An end of move condition where the motion plugin reports the motors as being still.
Until either of these conditions are satisfied, the core will generate 
no more moves after the
EX_PROBE
marked moves.  In other words, all you 
will get out of
mcMotionCyclePlannerEx
() will be
EX_NONE
type data.  In 
the event of a probe strike, this makes it safe to clear the planner and
be sure that future moves are not removed by accident.
A motion plugin should implement probing in the following way:
Upon seeing the first move marked as
EX_PROBE
, the plugin should 
    arm position latches on the hardware.
Then consume the
EX_PROBE
marked moves as normal.
If the probe stikes, the plugin should:
Cancel any motor stop report requests (retrieved from then execution_t::move_t::exMotors structure).  (see below. VERY important!)
Report the latched positions via
mcMotionSetProbePos
() for each motor.
Clear the hardware of any additional moves.
Call
mcMotionClearPlanner
() to clear the Mach planner of any unretrieved
EX_PROBE
moves.
Update Mach with the hardware's current position via
mcMotionSetPos
().
Call
mcMotionSetProbeComplete
().
If any motor stop report requests has been received, do not acknowledge them.
mcMotionSetProbeComplete
() does this for you and a position sync as well.
If no probe strike, then the move continues to it's end point as if it is a regular move.
The plugin should ack any motor stop report requests with
mcMotionSetStill
().
The positions latches should be disarmed (if needed) when a
MSG_PROBE_DONE
is seen.
In the event that the probe move is aborted, the plugin should:
Call
mcMotionClearPlanner
() to clear the Mach planner of any unretrieved
EX_PROBE
moves.
Call
mcMotorSetPos
() for each controlled motor.
Call
mcMotionSync
.
Call
mcMotionSetStill
() for each controlled motor.
Probe Operation Overview.
Upon executing G31, the core will mark those moves as
EX_PROBE
in the data stream.
If the probe strikes before the end of the G31 move, the plugin aborts the rest of 
    the probe moves as described above.  If a probe data file has been opened via
mcCntlProbeFileOpen
(), then the positions recorded by the motion plugin are inserted 
    into the probe data file in the specified format.
If the probe doesn't strike and the G31 move reaches its end point and a probe 
    data file has been opened via
mcCntlProbeFileOpen
(), then the end point positions 
    are inserted into the probe data file in the specified format.
Using the probe data file routines.
int mcCntlProbeFileOpen(MINSTANCE inst, const char *filename, const char *format);
The format argument is a printf style format with expanding macros for the axis 
values.
AXIS_X
,
AXIS_Y
,
AXIS_Z
,
AXIS_A
,
AXIS_B
,
AXIS_C
.  It is used in the 
following manner:
mcCntlProbeFileOpen(inst, "myProbeFile.csv", "%.4AXIS_X, %.4AXIS_Y, %.4AXIS_Z");
This will produce a probe file in CSV format like so:
1.0000, 2.0000, -1.4356
1.0100, 2.0000, -1.4343
1.0200, 2.0000, -1.4324
...
A format of
"X%.4AXIS_X, Y%.4AXIS_Y, Z%.4AXIS_Z"
would yield:
X1.0000, Y2.0000, Z-1.4356
X1.0100, Y2.0000, Z-1.4343
X1.0200, Y2.0000, Z-1.4324
...
A format of
"X%.4AXIS_X\tY%.4AXIS_Y\tZ%.4AXIS_Z"
would yield a tab delimited file:
X1.0000	Y2.0000	Z-1.4356
X1.0100	Y2.0000	Z-1.4343
X1.0200	Y2.0000	Z-1.4324
...
int mcCntlProbeFileClose(MINSTANCE inst);
Closes the probe data file.



================================================================================
[461/904] Mach I/O
Source: RegisteringAndSettingIO.htm
================================================================================

Mach I/O
Mach I/O
I/O is registered by devices that are registered by plugins.  The Mach core signals can then be mapped to the I/O. The mcIoGetHandle() function can be used to get a handle to an I/O object.  It takes a path in the form of "
device/ioName
".  Once a handle is obtained, the state can be checked or set depending if the I/O object is an input or an output.  Scripts can operate with I/O directly or through the signal interface, whichever is the most useful for a given task.
mcIoGetHandle
mcIoGetInfoStruct
mcIoGetNextHandle
mcIoGetState
mcIoGetType
mcIoGetUserData
mcIoIsEnabled
mcIoRegister
mcIoSetDesc
mcIoSetName
mcIoSetState
mcIoSetType
mcIoSetUserData
mcIoSyncSignal
mcIoUnregister



================================================================================
[462/904] Mach Registers
Source: Registers.htm
================================================================================

Mach Registers
Mach Registers
Mach registers are multi-purpose storage locations that can be defined (registered) by plugins.  The parent to a register is a plugin device.  Registers can contain data of any type, even string data.
Registers provide a uniquie storage location that is owned by the plugin that creates it.  This is in contrast to Mach 3 DROs and LEDs that could be overwritten if two plugins wrote to the same DRO number not knowing that the other plugin also used that same DRO number.  However, registers can be written and read from any script or plugin.  But the name of the register has to be known!
The maximum string length is 4096 bytes for registers other than
REG_TYPE_COMMAND
type registers and 1024 bytes for the
REG_TYPE_COMMAND
type registers.
When a register is registered to the system, you must specify the register type.  The different types are discussed below:
REG_TYPE_NONE
specifies a register that is not typed.  This kind of register is basically just a data container that will not notify any process if the data it stores changes.
REG_TYPE_INPUT
specifies a register that can be mapped to a Mach input signal or an analog object.  Mach and any GUI front end is notified if the data in this type of register is changed with a
MSG_REG_CHANGED
message.  This type of register usually contains boolean data if mapped to a signal or ADC values.
REG_TYPE_INPUT_NUMERIC
specifies a register that the same as
REG_TYPE_INPUT
but can
ONLY
contain numeric data.  Registers of this type typically can process faster than
REG_TYPE_INPUT
registers
REG_TYPE_OUTPUT
specifies a register that can be mapped to a Mach output signal or an analog object.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.
REG_TYPE_OUTPUT_NUMERIC
specifies a register that the same as
REG_TYPE_OUTPUT
but can
ONLY
contain numeric data.  Registers of this type typically can process faster than
REG_TYPE_OUTPUT
registers
REG_TYPE_HOLDING
specifies a general purpose register that cannot be mapped to either an input or output signal.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.  This type of register usually contains boolean data.
REG_TYPE_COMMAND
specifies a special purpose register that can be used to implement a simple command/response communication mechanism.  Only the plugin that owns the register is notified with a
MSG_REG_COMMAND
synchronous message.  It works with
mcRegSendCommand
on the client side of the communication and
mcRegGetCommand
and
mcRegSetResponse
on the plguin side.
REG_TYPE_ENCODER
specifies a register that can be mapped to a MPG or used to display the encoder counts in the GUI.  Only Mach and the GUI are notified with a
MSG_REG_CHANGED
synchronous message.
mcRegGetCommand
mcRegGetHandle
mcRegGetInfo
mcRegGetInfoStruct
mcRegGetNextHandle
mcRegGetUserData
mcRegGetValue
mcRegGetValueLong
mcRegGetValueString
mcRegGetValueStringClear
mcRegRegister
mcRegSendCommand
mcRegSetDesc
mcRegSetName
mcRegSetResponse
mcRegSetType
mcRegSetUserData
mcRegSetValue
mcRegSetValueLong
mcRegSetValueString
mcRegUnregister



================================================================================
[463/904] Rigid Tapping
Source: RigidTapping.htm
================================================================================

Rigid Tapping
Rigid Tapping
Motion plugin rigid tapping procedure.
A plugin must use either one of two rigid tapping interfaces.  (Or none is rigid tapping is not supported.)  This interface is defined when the motion plugin registers its motion device with
mcDeviceRegister
() using the
Type
parameter bitwise values of
DEV_TYPE_RTAP
or
DEV_TYPE_RTAP2
.
DEV_TYPE_RTAP
: This interface is defined if the motion controller is capable of precisely controlling the spindle speed with regard to the Z movement profile.  The core profiles the Z moves and they are output with
EX_RTAP
movement types in the
execution_t
struct from
mcMotionCyclePlannerEx
().
DEV_TYPE_RTAP2
: This interface is defined if the motion controller wants to handle the complete coordination of the rigid tap move.  With this interface, no Z move is profiled by the core.  Instead, the complete move points are provided in the
tap_t
structure.
Using the DEV_TYPE_RTAP2 interface
When
DEV_TYPE_RTAP2
is selected, the core will output one place holder move with
EX_RTAP
from
mcMotionCyclePlannerEx
().  When this is seen by the plugin, it should:
Retrieve the
tap_t
struct information with
mcMotionGetRigidTapParams
().
Profile the moves and synchronize the spindle according to the
tap_t
struct information
Acknowledge any
MSG_REPORT_MOTOR_STOP
messages with
mcMotionSetStill
().



================================================================================
[464/904] Screw Mapping
Source: ScrewMapping.htm
================================================================================

Screw Mapping
Screw Mapping
Screw mapping is performed with a "teach" API.  There are several functions that are simply redundant or allow for setting or retrieving parameters individually.  The prefered method for defining a map is as folows:
Call mcMotorMapSetDefinition() to define the map.
Call mcMotorMapSetPoint() for each defined measurement point.
The motor must be referenced (homed) before starting the mapping process.  Similarly, the motor must be homed for the map to be valid!  Home is assumed to start at count 0.  The length of the screw is defined in counts.  mcMotorMapSetPoint() sets the
error
, in counts, for the given point.
Example:
A mill with a 24 inch X axis is to be mapped.  Motor 0 is mapped to the X axis.  The counts per inch is 20000 and the table is to be measured along it's travel every half inch.
The length of the screw will be 24 x 20000 for a total of 480000 counts.
The number of points to be measured would be 48.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetDefinition(mInst, 
                                 0,
// Motor ID.
480000,
// Length or screw in counts.
48);
// Number of measured points.
Once the map is defined, the measurment process begins.  It is assumed that the table is in the home position (count 0).  Move the table to first measurement position moving in the direction
away
from the home switch.  A means of precisely measuring the table movement is required.  A glass scale or laser can be used.  Or by any other means available.  But it cannot be stressed enough that whatever method is used, it must be
PRECISE
.  Otherwise, the screw map may be less accurate than the error in the screw itself!
In this case, we are measuring the table at every one half inch.  Move the table to exactly one half inch and compare the actual motor counts to what the mathematical values should be.  In our example, the motor counts should be 10000 (.500" x 20000).  If the actual counts required to move the table to the desired position was actually 10004, then we would have an error of 4 counts (positive).
rc = mcMotorMapSetPoint(mInst, 
                             0,
// Our first measured point.
4);
// The error, in counts.
Repeat the same procedure for every point ending at point 23.  All points will need to be measured.
Measuring at random intervals is not supported.  The measuring points are evenly spread across the length of the srew.  The points in between the measuring points are interpolated to spread the error across the measurment distance.  There is no limit to the number of points a map can contain and increasing that number will not slow the system down.  About the only impact the number of measuring points will have is in the measurement process itself.  More measuring points will of course yield finer resoultion but the user may reach a point of dimisihing returns.
mcMotorMapGetDefinition
mcMotorMapGetLength
mcMotorMapGetPoint
mcMotorMapGetPointCount
mcMotorMapGetStart
mcMotorMapSetDefinition
mcMotorMapSetLength
mcMotorMapSetPoint
mcMotorMapSetPointCount
mcMotorMapSetStart



================================================================================
[465/904] Scripting
Source: Scripting.htm
================================================================================

Scripting
Scripting
mcScriptDebug
mcScriptEngineRegister
mcScriptExecute
mcScriptExecuteIfExists
mcScriptExecutePrivate
mcScriptGetExtensions



================================================================================
[466/904] Mach Signals
Source: Signals.htm
================================================================================

Mach Signals
Mach Signals
The Mach core communicates with the outside world via a signal mechanism.  All signals are "owned" by the core.  The core drives output signals and input signals direct the core.  This means that a user should never set an output signal and the core will never set an input signal.
It is important to note that signals are not I/O.  However, output signals can drive outputs and inputs can drive input signals if they are mapped to repective I/O objects.  This mapping is performed with mcSignalMap().  The I/O device has no need to know what signals to which any I/O may be mapped.  This allows for abstraction of the signal functions.
Signals operations use a handle that represents the signal object in the core.  This handle can be obtained via mcSignalGetHandle() by providing a signal ID.  Signal IDs are defined in the MachAPI.h header file.  Input signal ID definitions begin with
ISIG
and output signal ID definitions begin with
OSIG
.
The state of input and output signals can be retieved via mcSignalGetState().  The the state of input signals can be set via mcSignalSetState().
Signal information can be retireve via mcSignalGetInfo() and mcSignalGetInfoStruct().
Input Signals
Output Signals
mcSignalEnable
mcSignalGetHandle
mcSignalGetInfo
mcSignalGetInfoStruct
mcSignalGetNextHandle
mcSignalGetState
mcSignalHandleWait
mcSignalMap
mcSignalSetActiveLow
mcSignalSetState
mcSignalUnmap
mcSignalWait



================================================================================
[467/904] Soft Limits
Source: SoftLimits.htm
================================================================================

Soft Limits
Soft Limits
mcSoftLimitGetState
mcSoftLimitMaxMinsClear
mcSoftLimitSetState



================================================================================
[468/904] Spindle
Source: Spindle.htm
================================================================================

Spindle
Spindle
mcSpindleCalcCSSToRPM
mcSpindleGetAccelTime
mcSpindleGetCommandRPM
mcSpindleGetCurrentRange
mcSpindleGetDecelTime
mcSpindleGetDirection
mcSpindleGetFeedbackRatio
mcSpindleGetMaxRPM
mcSpindleGetMinRPM
mcSpindleGetMotorAccel
mcSpindleGetMotorMaxRPM
mcSpindleGetMotorRPM
mcSpindleGetOverride
mcSpindleGetOverrideEnable
mcSpindleGetReverse
mcSpindleGetSensorRPM
mcSpindleGetSpeedCheckEnable
mcSpindleGetSpeedCheckPercent
mcSpindleGetTrueRPM
mcSpindleSetAccelTime
mcSpindleSetCommandRPM
mcSpindleSetDecelTime
mcSpindleSetDirection
mcSpindleSetDirectionWait
mcSpindleSetFeedbackRatio
mcSpindleSetMaxRPM
mcSpindleSetMinRPM
mcSpindleSetMotorAccel
mcSpindleSetMotorMaxRPM
mcSpindleSetOverride
mcSpindleSetOverrideEnable
mcSpindleSetRange
mcSpindleSetReverse
mcSpindleSetSensorRPM
mcSpindleSetSpeedCheckEnable
mcSpindleSetSpeedCheckPercent
mcSpindleSpeedCheck



================================================================================
[469/904] Supported Platforms
Source: SupportedPlatforms.htm
================================================================================

Supported Platforms
Supported Platforms
At this time the only supported platforms are Windows, Linux, Mac. The only plugins that will be suported for both Windows, Linux and Mac will need to be programmed in C++ or C.
Windows:
Plugins can be writen in any language that supports interfacing to a flat C API interface. Tests have been done with C++, C# and VB. Other languges such as Action Script, Delphi, Python and etc could be supported but are not tested due to the limited use in the windows world.
Linux:
GUIs need to be written in C or C++ with wxWidgets if they are to have a toolpath display. No testing has been conducted to see if other languages (wyPython, wxPerl...) with wxWigets will work. Any language with wx should work but it is out of the scope of this help manual to assist with that process.
Mac:
More work needs to be done on this platform :)



================================================================================
[470/904] Threading
Source: Threading.htm
================================================================================

Threading
Threading
Motion plugin threading procedure.
A plugin must use either one of two threading interfaces.  (Or none if threading is not supported.)  This interface is defined when the motion plugin registers its motion device with
mcDeviceRegister
() using the
Type
parameter bitwise values of
DEV_TYPE_THREAD
or
DEV_TYPE_THREAD2
.
DEV_TYPE_THREAD
: This interface is defined if the motion controller is capable of shrinking or expanding the time of the way points in regard to the spindle speed.  The core profiles the moves and they are output with
EX_THREAD
movement types in the
execution_t
struct from
mcMotionCyclePlannerEx
().  Only the
G32
moves are marked with
EX_THREAD
.
The challenge is to to derive a ratio from the programmed spindle speed and the actual spindle speed.  If the speed is slow by 1%, then the way point timeslice time should be increase by 1%, etc...  The higher the frequency that the actual spindle speed can be read, the greater the thread accuracy.
The entry and exit moves from a
G76
are considered "normal" movement types and do not require any spindle synchronization.
DEV_TYPE_THREAD2
: This interface is defined if the motion controller wants to handle the complete coordination of the threading tap move.  With this interface, no moves are profiled by the core.  Instead, the complete move points are provided in the
tap_t
structure.
Using the DEV_TYPE_THREAD2 interface (Not implemented currently)
When
DEV_TYPE_THREAD2
is selected, the core will send a synchronous
MSG_THREAD_START
message.  When this is seen by the plugin, it should:
Retrieve the
thread_t
struct information with
mcMotionGetThreadParams
().
Profile the moves and synchronize the spindle according to the
thread_t
struct information
Acknowledge any
MSG_REPORT_MOTOR_STOP
messages with
mcMotionSetStill
().



================================================================================
[471/904] Tools
Source: ToolOffsets.htm
================================================================================

Tools
Tools
mcToolGetCurrent
mcToolGetData
mcToolGetDataExDbl
mcToolGetDataExInt
mcToolGetDataExStr
mcToolGetDesc
mcToolGetSelected
mcToolLoadFile
mcToolSaveFile
mcToolSetCurrent
mcToolSetData
mcToolSetDataExDbl
mcToolSetDataExInt
mcToolSetDataExStr
mcToolSetDesc



================================================================================
[472/904] Profile (INI) Settings
Source: WritingAndGettingIniSettings.htm
================================================================================

Profile (INI) Settings
Profile (INI) Settings
mcProfileDeleteKey
mcProfileDeleteSection
mcProfileExists
mcProfileFlush
mcProfileGetDouble
mcProfileGetInt
mcProfileGetName
mcProfileGetString
mcProfileReload
mcProfileSave
mcProfileWriteDouble
mcProfileWriteInt
mcProfileWriteString



================================================================================
[473/904] mcAnalogInputGetInfoStruct
Source: mcAnalogInputGetInfoStruct.htm
================================================================================

mcAnalogInputGetInfoStruct
mcAnalogInputGetInfoStruct
C/C++ Syntax:
int mcAnalogInputGetInfoStruct(
                MINSTANCE mInst, 
                int analogInputNum, 
                analoginfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAnalogInputGetInfoStruct(
                    number mInst, 
                    number analogInputNum)
Description:
Get the analog information for the specified analog input number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogInputNum
The analog input number.
ainf
A pointer to an analoginfo_t structure for which to receive the analog input information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
ainf
parameter cannot be NULL or there is no analog configuration for the specified input number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog input information for analog input #1.
analoginfo_t ainf;
int rc = mcAnalogInputGetInfoStruct(mInst, 1, &ainf);



================================================================================
[474/904] mcAnalogInputRead
Source: mcAnalogInputRead.htm
================================================================================

mcAnalogInputRead
mcAnalogInputRead
C/C++ Syntax:
int mcAnalogInputRead(
                MINSTANCE mInst, 
                int analogInputNum, 
                double *value);
LUA Syntax:
value, rc = mc.mcAnalogInputRead(
                    number mInst, 
                    number analogInputNum)
Description:
Get the analog value for the specified analog input number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogInputNum
The analog input number.
value
A pointer to a double for which to receive the analog input value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL or there is no analog configuration for the specified input number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog input value for analog input #1.
double value = 0;
int rc = mcAnalogInputRead(mInst, 1, &value);



================================================================================
[475/904] mcAnalogMap
Source: mcAnalogMap.htm
================================================================================

mcAnalogMap
mcAnalogMap
C/C++ Syntax:
int mcAnalogMap(
                MINSTANCE mInst, 
                int type, 
                int analogNum,
		const char *regPath,
		double numerator, 
		double denominator, 
		double offset);
LUA Syntax:
value, rc = mc.mcAnalogMap(
                        number mInst,
                        number type, 
                        number analogNum,
                        string regPath,
                        number numerator,
                        number denominator,
                        number offset)
Description:
Create a mapping relationship between a plugin provided ADC or DAC register and an analog object.
Parameters:
Parameter
Description
mInst
The controller instance.
type
The analog type. (MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT)
analogNum
The analog number.
regPath
The ADC or DAC register path.
numerator
The total voltage swing.  e.g. 0v to 10v is 10
denominator
Usually the max value of the register.  e.g. 1024 for a 10 bit DAC/ADC
offset
Used for bidirectional DAC/ADC devices
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
type
parameter isn't MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT, or the
analogNum
analog object number is out of range.
MERROR_REG_NOT_FOUND
The specified register path is invalid.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Map an analog object to a plugin provided ADC/DAC register.
double value = 0;
int rc =
MERROR_NOERROR
No Error.
;
// -10 to +10 14 bit ADC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_INPUT, 1, "MyDevADC1", 20, 16384, 8192);
// 0 to +10 12 bit ADC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_INPUT, 2, "MyDevADC2", 10, 4096, 0);
// -10 to +10 16 bit DAC.
rc = mcAnalogMap(mInst, MC_ANALOG_TYPE_OUTPUT, 1, "MyDevDAC1", 20, 16384, 8192);



================================================================================
[476/904] mcAnalogOutputGetInfoStruct
Source: mcAnalogOutputGetInfoStruct.htm
================================================================================

mcAnalogOutputGetInfoStruct
mcAnalogOutputGetInfoStruct
C/C++ Syntax:
int mcAnalogOutputGetInfoStruct(
                MINSTANCE mInst, 
                int analogOutputNum, 
                analoginfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAnalogOutputGetInfoStruct(
                    number mInst, 
                    number analogOutputNum)
Description:
Get the analog information for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogOutputNum
The analog output number.
ainf
A pointer to an analoginfo_t structure for which to receive the analog output information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
ainf
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog output information for analog output #1.
analoginfo_t ainf;
int rc = mcAnalogOutputGetInfoStruct(mInst, 1, &ainf);



================================================================================
[477/904] mcAnalogOutputRead
Source: mcAnalogOutputRead.htm
================================================================================

mcAnalogOutputRead
mcAnalogOutputRead
C/C++ Syntax:
int mcAnalogOutputRead(
                MINSTANCE mInst, 
                int analogOutputNum, 
                double *value);
LUA Syntax:
value, rc = mc.mcAnalogOutputRead(
                    number mInst, 
                    number analogOutputNum)
Description:
Get the analog value for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogOutputNum
The analog output number.
value
A pointer to a double for which to receive the analog output value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Get the analog output value for analog output #1.
double value = 0;
int rc = mcAnalogOutputRead(mInst, 1, &value);



================================================================================
[478/904] mcAnalogOutputWrite
Source: mcAnalogOutputWrite.htm
================================================================================

mcAnalogOutputWrite
mcAnalogOutputWrite
C/C++ Syntax:
int mcAnalogOutputWrite(
                MINSTANCE mInst, 
                int analogOutputNum, 
                double value);
LUA Syntax:
rc = mc.mcAnalogOutputWrite(
                    number mInst, 
                    number analogOutputNum,
                    number value)
Description:
Write the analog value for the specified analog output number.
Parameters:
Parameter
Description
mInst
The controller instance.
analogOutputNum
The analog output number.
value
The value to be writen to the analog output.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
vaule
parameter cannot be NULL or there is no analog configuration for the specified output number.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Write the analog output value for analog output #1.
int rc = mcAnalogOutputWrite(mInst, 1, 9.5);



================================================================================
[479/904] mcAnalogUnMap
Source: mcAnalogUnMap.htm
================================================================================

mcAnalogUnMap
mcAnalogUnMap
C/C++ Syntax:
int mcAnalogUnMap(
                MINSTANCE mInst, 
                int type, 
                int analogNum);
LUA Syntax:
rc = mc.mcAnalogMap(
                    number mInst,
                    number type, 
                    number analogNum)
Description:
Destroy the mapping relationship between a plugin provided ADC or DAC register and an analog object.
Parameters:
Parameter
Description
mInst
The controller instance.
type
The analog type. (MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT)
analogNum
The analog number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
type
parameter isn't MC_ANALOG_TYPE_INPUT or MC_ANALOG_TYPE_OUTPUT, or the
analogNum
analog object number is out of range.
Notes:
Since build 4439.
Usage:
int mInst = 0;
// Unmap analog object 1 from the plugin provided ADC/DAC register.
double value = 0;
int rc =
MERROR_NOERROR
No Error.
;
rc = mcAnalogUnMap(mInst, MC_ANALOG_TYPE_INPUT, 1);



================================================================================
[480/904] mcAxisDeref
Source: mcAxisDeref.htm
================================================================================

mcAxisDeref
mcAxisDeref
C/C++ Syntax:
int mcAxisDeref(
                MINSTANCE mInst, 
                int axisId);
LUA Syntax:
rc = mc.mcAxisDeref(
                    number mInst, 
                    number axisId)
Description:
Dereference the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID to be dereferenced.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_AXIS_NOT_ENABLED
The axis specified by
axis
is not enabled.
Notes:
The axis will be dereferenced allong with all child motors.
Usage:
int mInst = 0;
// Set AXIS0 to deref (could have used X_AXIS).
mcAxisDeref(mInst, AXIS0);



================================================================================
[481/904] mcAxisDerefAll
Source: mcAxisDerefAll.htm
================================================================================

mcAxisDerefAll
mcAxisDerefAll
C/C++ Syntax:
int mcAxisDerefAll(
                   MINSTANCE mInst);
LUA Syntax:
rc = mc.mcAxisDerefAll(
                       number mInst)
Description:
Dereference all axes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
All
ENABLED
axes will be dereferenced.
Usage:
int mInst = 0;
// Set all axis to deref.
mcAxisDerefAll(mInst);



================================================================================
[482/904] mcAxisEnable
Source: mcAxisEnable.htm
================================================================================

mcAxisEnable
mcAxisEnable
C/C++ Syntax:
int mcAxisEnable(
                 MINSTANCE mInst, 
                 int axisId, 
                 BOOL enabled);
LUA Syntax:
rc = mc.mcAxisEnable(
                     number mInst, 
                     number axisId, 
                     number enabled);
Description:
Enable or disable the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enabled
Send true to enable or false to disable axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Used to enable or disable axis. Disabling an axis will make motion for the axis impossible.
Usage:
int mInst = 0;
// Set Y_AXIS to be disabled.
mcAxisEnable(mInst, Y_AXIS, false);



================================================================================
[483/904] mcAxisGetHomeDir
Source: mcAxisGetHomeDir.htm
================================================================================

mcAxisGetHomeDir
mcAxisGetHomeDir
C/C++ Syntax:
int mcAxisGetHomeDir(
                     MINSTANCE mInst, 
                     int axisId, 
                     int *dir);
LUA Syntax:
dir, rc = mc.mcAxisGetHomeDir(
                              number mInst, 
                              number axisId)
Description:
Get the hominig direction for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
dir
Receives the homing direction.  A positive value is home POS.  A negative value is home NEG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home direction only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored direction information and use it.
Usage:
int mInst=0;
int dir = 0;
// Get Home offset of the X axis.
mcAxisGetHomeDir(mInst, X_AXIS, &dir);



================================================================================
[484/904] mcAxisGetHomeInPlace
Source: mcAxisGetHomeInPlace.htm
================================================================================

mcAxisGetHomeInPlace
mcAxisGetHomeInPlace
C/C++ Syntax:
int mcAxisGetHomeInPlace(
                         MINSTANCE mInst, 
                         int axisId,
                         BOOL *homeInPlace);
LUA Syntax:
homeInPlace, rc = mc.mcAxisGetHomeInPlace(
                                          number mInst,
                                          number axisId)
Description:
Determine if the Home In Place flage is set.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
homeInPlace
Receives the home in place flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home in place flag only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored flag and implement a means to home the axis and set machine coordinate 0 at its current location.
Usage:
// Get the Home In Place flag for the X axis.
MINSTANCE mInst = 0;
BOOL hip = FALSE;
mcAxisGetHomeInPlace(mInst, X_AXIS, &hip);



================================================================================
[485/904] mcAxisGetHomeOffset
Source: mcAxisGetHomeOffset.htm
================================================================================

mcAxisGetHomeOffset
mcAxisGetHomeOffset
C/C++ Syntax:
int mcAxisGetHomeOffset(
                        MINSTANCE mInst, 
                        int axisId, 
                        double *offset);
LUA Syntax:
offset, rc = mc.mcAxisGetHomeOffset(
                                    number mInst, 
                                    number axisId)
Description:
Get the home offset for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
offset
Receives the home offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home offset only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored offset and use it.
Usage:
int mInst=0;
int offset = 0;
// Get Home offset of the X axis.
mcAxisGetHomeOrder(mInst, X_AXIS, &offset);



================================================================================
[486/904] mcAxisGetHomeOrder
Source: mcAxisGetHomeOrder.htm
================================================================================

mcAxisGetHomeOrder
mcAxisGetHomeOrder
C/C++ Syntax:
int mcAxisGetHomeOrder(
                       MINSTANCE mInst, 
                       int axisId, 
                       int *order);
LUA Syntax:
order, rc = mc.mcAxisGetHomeOrder(
                                  number mInst, 
                                  number axisId)
Description:
Get the home order for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
order
Receives the axis home order number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the home order of the axis so all axis can be homed in the order the user would like.
All axes should be read and then homed in the order requested.
Usage:
int mInst=0;
double XAxisPos = 0;
int order = 0;
// Get Home order of the X axis.
mcAxisGetHomeOrder(mInst, X_AXIS, ℴ);



================================================================================
[487/904] mcAxisGetHomeSpeed
Source: mcAxisGetHomeSpeed.htm
================================================================================

mcAxisGetHomeSpeed
mcAxisGetHomeSpeed
C/C++ Syntax:
int mcAxisGetHomeSpeed(
                       MINSTANCE mInst,
                       int axisId,
                       double *percent);
LUA Syntax:
percent, rc = mc.mcAxisGetHomeSpeed(
                                    number mInst,
                                    number axisId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
percent
Receives the percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home speed percentage only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored speed percentage and use it.
Usage:
int mInst=0;
int rc = 0;
double XAxisPos = 0;
double percent = 0;
double maxVel = 0
double homeVel = 0;
// Get home speed percentage of the X axis.
mcAxisGetHomeSpeed(mInst, X_AXIS, &percent);
mcAxisGetVel(mInst, X_AXIS, &maxVel);
homeVel = maxVel * percent;



================================================================================
[488/904] mcAxisGetInfoStruct
Source: mcAxisGetInfoStruct.htm
================================================================================

mcAxisGetInfoStruct
mcAxisGetInfoStruct
C/C++ Syntax:
int mcAxisGetInfoStruct(
		MINSTANCE mInst, 
		int axisId, 
		axisinfo_t *ainf);
LUA Syntax:
ainf, rc = mc.mcAxisGetInfoStruct(number mInst, 
		number axisId)
Description:
Retrieve axis parameters in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis number to be dereffed.
ainf
The address of a axisinfo struct that receives the info for the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
mcAxisGetInfoStruct() is used for quickly retrieving all of the axis parameters.  The information is placed in the axisinfo structure.  This information can then be modified to update the axis parameters with mcAxisSetInfoStruct().  In LUA, this function returns a table with the axis information.
struct axisinfo {
	BOOL OutOfBandAxis;     // Is this an out of band axis?
	BOOL IsStill;           // Set high when the axis is not moving
	BOOL  Jogging;          // Used to tell to jog...
	BOOL  Homing;           // Used to tell the state of the home operation.
	int  Id;                // Axis Id
	BOOL IsSpindle;         // Does this axis control a spindle?
	BOOL Enabled;           // Is axis enabled?
	BOOL SoftlimitEnabled;  // Softlimits enabled?
	double SoftMaxLimit;    // Count for the max travel.
	double SoftMinLimit;    // Count for the m.
	BOOL VelocityMode;      // Used to make the axis move at a fixed speed
	BOOL BufferJog;         // Buffer all jogs?
	double Pos;             // Position in user units.
	double Mpos;            // Machine position in user units.
	int HomeOrder;          // The order in which to home the axis.
	int HomeDir;            // The direction the axis homes.
	double HomeOffset;      // The offset from the the limits switch.
	double HomeSpeedPercent;// The percentage of the max velocity at which to home.
	BOOL SoftlimitUsed;     // Use Softlimits?
	BOOL HomeInPlace;       // Zero the axis in place when Refed?
	int MotorId[MC_MAX_AXIS_MOTORS]; //child motor ID array.
};
typedef struct axisinfo axisinfo_t;
Usage:
int mInst = 0;
axisinfo_t ainf;
// Get Y_AXIS info structure.
mcAxisGetInfoStruct(mInst, Y_AXIS, &ainf);



================================================================================
[489/904] mcAxisGetMachinePos
Source: mcAxisGetMachinePos.htm
================================================================================

mcAxisGetMachinePos
mcAxisGetMachinePos
C/C++ Syntax:
int mcAxisGetMachinePos(
	MINSTANCE mInst, 
	int axisId, 
	double *val);
LUA Syntax:
val, rc = mc.mcAxisGetMachinePos(
	number mInst, 
	number axisId)
Description:
Get the machine positon of an axis in User units.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
val
Receives the axis machine position in User units.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the position of the axis in User units relitive to the home position.
Usage:
int mInst=0;
double XAxisMachinePos = 0;
int AxisNumber = X_AXIS;
mcAxisGetMachinePos(mInst, AxisNumber, &XAxisMachinePos);
// Get the position of the X axis in Machine Pos.



================================================================================
[490/904] mcAxisGetMotorId
Source: mcAxisGetMotorId.htm
================================================================================

mcAxisGetMotorId
mcAxisGetMotorId
C/C++ Syntax:
int mcAxisGetMotorId(
		MINSTANCE mInst, 
		int axis, 
		int childId, 
		int *motorId);
LUA Syntax:
motorId, rc = mc.mcAxisGetMotorId(
		number mInst, 
		number axis, 
		number childId)
Description:
Get the motor IDs of the motors used on the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID from which to get the position.
childId
The axis ID from which to get the position.
motorId
Receives the motor id of the child motor.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
The motor specified in
child_id
was not found.
Notes:
Get the motor ID of the child motor. The axis can have many child motors so to get all motors search until
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
or return is no longer
MERROR_NOERROR
No Error.
Usage:
int mInst=0;
int motorIds[]={-1,-1,-1,-1,-1}
int id;
// Get all the motor ID's for the X axis up to 5 motors.
for(int i = 0; i < 5; i++){
	if (mcAxisGetMotorId(mInst, X_AXIS, i, &id) ==
MERROR_NOERROR
No Error.
) {
		motorIds[i] = id;
	}
}



================================================================================
[491/904] mcAxisGetOverrideAxis
Source: mcAxisGetOverrideAxis.htm
================================================================================

mcAxisGetOverrideAxis
mcAxisGetOverrideAxis
C/C++ Syntax:
int mcAxisGetOverrideAxis(
		MINSTANCE mInst, 
		int axis, 
		int *axis1, 
		int *axis2, 
		int *axis3, 
		int *axis4);
LUA Syntax:
axis1, axis2, axis3, axis4, rc = mc.mcAxisGetOverrideAxis(
		number mInst, 
		number axis)
Description:
Get axis override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis id to apply override axis too.
axis1
Receives the override axis1 ID.
axis2
Receives the override axis2 ID.
axis3
Receives the override axis3 ID.
axis4
Receives the override axis4 ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the override axis ID for each override axis on the main axis. override_axis_id will return 0 if unused.
Usage:
int mInst = 0;
int ora[4];
// Get the override axis for the Z axis.
mcAxisGetOverrideAxis(mInst, ZAXIS, &ora[0], &ora[1], &ora[2], &ora[3]);



================================================================================
[492/904] mcAxisGetPos
Source: mcAxisGetPos.htm
================================================================================

mcAxisGetPos
mcAxisGetPos
C/C++ Syntax:
int mcAxisGetPos(
	MINSTANCE mInst, 
	int axisId, 
	double *val);
LUA Syntax:
val, rc = mc.mcAxisGetPos(
	number mInst, 
	number axisId)
Description:
Get the positon of an axis in user units.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID from which to get the position.
val
Receives the axis position in User units.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The axis position reported is in user units relative to the fixture and tool offsets that are active. This would be the typical value that the user would see in an axis DRO on the GUI of the controller.
Usage:
int mInst=0;
double XAxisPos = 0;
int AxisNumber = X_AXIS;
// Get the position of the X axis.
mcAxisGetPos(mInst, AxisNumber, &XAxisPos);



================================================================================
[493/904] mcAxisGetProbePos
Source: mcAxisGetProbePos.htm
================================================================================

mcAxisGetProbePos
mcAxisGetProbePos
C/C++ Syntax:
int mcAxisGetProbePos(
		MINSTANCE mInst, 
		int axisId, 
		BOOL machinePos, 
		double *val);
LUA Syntax:
val, rc = mc.mcAxisGetProbePos(
		number mInst, 
		number axisId,
		number machinePos)
Description:
Retrieves the position of the last probe strike for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
machinePos
TRUE for machine coordinates
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
The
val
pointer cannot be NULL.
Notes:
Usage:
// Get the last probe strike position for the X axis
MINSTANCE mInst = 0;
double xProbePos = 0;
mcAxisGetProbePos(mInst, X_AXIS, FALSE, &xProbPos);



================================================================================
[494/904] mcAxisGetProbePosAll
Source: mcAxisGetProbePosAll.htm
================================================================================

mcAxisGetProbePosAll
mcAxisGetProbePosAll
C/C++ Syntax:
int mcAxisGetProbePosAll(
		MINSTANCE mInst, 
		BOOL machinePos, 
		double *x, 
		double *y, 
		double *z, 
		double *a, 
		double *b, 
		double *c);
LUA Syntax:
x, y, z, a, b, c, rc = mc.mcAxisGetProbePosAll(
		number mInst, 
		number machinePos)
Description:
Retrieves the position of the last probe strike for all coordinated axes.
Parameters:
Parameter
Description
mInst
The controller instance.
machinePos
TRUE for machine coordinates
x
The X position.
y
The Y position.
z
The Z position.
a
The A position.
b
The B position.
c
The C position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
NULL can be specified for any of the parameters x, y, z, a, b, or c.
Usage:
// Get the last probe strike position for the X, Y, and Z axes.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcAxisGetProbePosAll(mInst, FALSE, &x, &y, &z, NULL, NULL, NULL);
if (rc == MERROR_NOERROR) {
	// Process probe positions...
}



================================================================================
[495/904] mcAxisGetScale
Source: mcAxisGetScale.htm
================================================================================

mcAxisGetScale
mcAxisGetScale
C/C++ Syntax:
int mcAxisGetScale(
		MINSTANCE mInst, 
		int axisId, 
		double *scaleVal);
LUA Syntax:
scaleVal, rc = mc.mcAxisGetProbePos(
		number mInst, 
		number axisId)
Description:
Retrieves the current scaling value for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
scaleVal
Receives the scale value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
The
scaleVal
pointer cannot be NULL
Notes:
Scale values that are negative produce mirror images.
Usage:
// Get the scale value for the X axis
MINSTANCE mInst = 0;
double scale = 0;
mcAxisGetScale(mInst, X_AXIS, &scale);



================================================================================
[496/904] mcAxisGetSoftlimitEnable
Source: mcAxisGetSoftlimitEnable.htm
================================================================================

mcAxisGetSoftlimitEnable
mcAxisGetSoftlimitEnable
C/C++ Syntax:
int mcAxisGetSoftlimitEnable(
		MINSTANCE mInst, 
		int axisId, 
		int *enable);
LUA Syntax:
enable, rc = mc.mcAxisGetSoftlimitEnable(
		number mInst, 
		number axisId)
Description:
Get the soft limit enable status.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enable
Receives the softlimit enable status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Soft limits can be enabled on a per axis basis.  This is the master soft limit enable for the axis.  It overrides the soft limit enable set by mcSoftLimitSetState().
Usage:
// Get master soft limit enable state for axis 0.
int mInst = 0;
int enable = 0;
mcAxisGetSoftlimitEnable(mInst, 0, &enable);



================================================================================
[497/904] mcAxisGetSoftlimitMax
Source: mcAxisGetSoftlimitMax.htm
================================================================================

mcAxisGetSoftlimitMax
mcAxisGetSoftlimitMax
C/C++ Syntax:
int mcAxisGetSoftlimitMax(
		MINSTANCE mInst, 
		int axisId, 
		double *max);
LUA Syntax:
max, rc = mc.mcAxisGetSoftlimitMin(
		number mInst, 
		number axisId)
Description:
Get the softlimit maximum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
max
Receives the maximum poisition of the axis in machine position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the maximum position of the axis based on the least common denominator of all the child motors used on the axis.
Usage:
int mInst=0;
int axis = Y_AXIS;
double min = 0;
mcAxisGetSoftlimitMax(mInst, axis, &min);
// Get the max distance of the softlimit for the Y axis.



================================================================================
[498/904] mcAxisGetSoftlimitMin
Source: mcAxisGetSoftlimitMin.htm
================================================================================

mcAxisGetSoftlimitMin
mcAxisGetSoftlimitMin
C/C++ Syntax:
int mcAxisGetSoftlimitMin(
		MINSTANCE mInst, 
		int axisId, 
		double *min);
LUA Syntax:
min, rc = mc.mcAxisGetSoftlimitMin(
		number mInst, 
		number axisId)
Description:
Get the softlimit minimum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
min
Receives the minimum poisition of the axis in machine position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the minimum position of the axis based on the least common denominator of all the child motors used on the axis.
Usage:
int mInst=0;
int axis = Y_AXIS;
double min = 0;
mcAxisGetSoftlimitMin(mInst, axis, &min);
// Get the min distance of the softlimit for the Y axis.



================================================================================
[499/904] mcAxisGetSpindle
Source: mcAxisGetSpindle.htm
================================================================================

mcAxisGetSpindle
mcAxisGetSpindle
C/C++ Syntax:
int mcAxisGetSpindle(
		MINSTANCE mInst,
		int axisId, 
		bool *spindle);
LUA Syntax:
spindle, rc = mcAxisGetSpindle(
		number mInst,
		number axisId)
Description:
Determine if the specified axis is an axis that controls a spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
spindle
Receives the spindle flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Only an out of band axis can control a spindle.
Usage:
// Find the spindle axis
int mInst = 0;
int axisId;
bool isSpindle = false;
for (axisId = MC_MAX_COORD_AXES; axisId < MC_MAX_AXES; axisId++) {
    mcAxisGetSpindle(mInst, axisId, &isSpindle);
    if (isSpindle) {
// Spindle found!
break;
    }
}



================================================================================
[500/904] mcAxisGetVel
Source: mcAxisGetVel.htm
================================================================================

mcAxisGetVel
mcAxisGetVel
C/C++ Syntax:
int mcAxisGetVel(
	MINSTANCE mInst, 
	int axisId, 
	double *velocity);
LUA Syntax:
velocity, rc = mc.mcAxisGetVel(
	number mInst, 
	number axisId)
Description:
Get the velocity of an axis in user units per min.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
velocity
Receives the velocity of the axis in user units per min.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
To get the blended velocity sum the velocity vectors:
blendVel = sqrt(vX*vX + vY*vY + vZ*vZ)
Usage:
int mInst=0;
int axis = Y_AXIS;
double CurrentVel = 0;
mcAxisGetVel(mInst, axis, &CurrentVel);
// Get the current speed of the Y axis.



================================================================================
[501/904] mcAxisHome
Source: mcAxisHome.htm
================================================================================

mcAxisHome
mcAxisHome
C/C++ Syntax:
int mcAxisHome(
	MINSTANCE mInst, 
	int axisId);
LUA Syntax:
rc = mc.mcAxisHome(
	number mInst, 
	number axisId)
Description:
Used to start an axis homing.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of which to set the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Home the axis, all motors will be homed that are child of the axis.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Set the X axis to home.
mcAxisSetPos(mInst, AxisNumber);



================================================================================
[502/904] mcAxisHomeAll
Source: mcAxisHomeAll.htm
================================================================================

mcAxisHomeAll
mcAxisHomeAll
C/C++ Syntax:
int mcAxisHomeAll(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcAxisHomeAll(
	number mInst)
Description:
Used to start an axis homing.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Home the all the axes.  Only the coordinated axes will be homed.
Usage:
int mInst=0;
// Home all coordinated axes.
mcAxisHomeAll(mInst);



================================================================================
[503/904] mcAxisHomeComplete
Source: mcAxisHomeComplete.htm
================================================================================

mcAxisHomeComplete
mcAxisHomeComplete
C/C++ Syntax:
int mcAxisHomeComplete(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisHomeComplete(
		number mInst, 
		number axisId);
Description:
Report that the axis is finished homing.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID which is finished homing.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports that the axis is finished homming. This is done by the motion plugin to report when it is finished the homing operation. The motors should be at their home positions and marked as still before this call is made.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Mark the X axis home operation as complete.
mcAxisHomeComplete(mInst, AxisNumber);



================================================================================
[504/904] mcAxisHomeCompleteWithStatus
Source: mcAxisHomeCompleteWithStatus.htm
================================================================================

mcAxisHomeCompleteWithStatus
mcAxisHomeCompleteWithStatus
C/C++ Syntax:
int mcAxisHomeCompleteWithStatus(
		MINSTANCE mInst, 
		int axisId
		BOOL success);
LUA Syntax:
rc = mc.mcAxisHomeCompleteWithStatus(
		number mInst, 
		number axisId
		number success);
Description:
Report that the axis is finished homing and provide the status of the home operation.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID which is finished homing.
success
The status of the home operation.  TRUE or FALSE
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports that the axis is finished homming. This is done by the motion plugin to report when it is finished. The motors should be at their home positions and marked as still before this call is made.
If the success is set to FALSE, the axis is dereferenced (not homed).
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
// Mark the X axis homing operation as finished and that it completed with success.
mcAxisHomeCompleteWithStatus(mInst, AxisNumber, TRUE);



================================================================================
[505/904] mcAxisIsEnabled
Source: mcAxisIsEnabled.htm
================================================================================

mcAxisIsEnabled
mcAxisIsEnabled
C/C++ Syntax:
int mcAxisIsEnabled(
		MINSTANCE mInst,
		int axisId,
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcAxisIsEnabled(
		number mInst,
		number axisId)
Description:
Determines if the specified axis is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
enabled
Receives the axis enable flag value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function is primarily used to determine if the user has enabled the axis in the control configuration.  It is
NOT
the state of the motor enable signal (OSIG_ENABLEx).
Usage:
// Find all enabled axes.
int mInst = 0;
int axisId;
BOOL enabled = FALSE;
for (axisId = 0; axisId < MC_MAX_AXES; axisId++) {
    enabled = false;
    mcAxisIsEnabled(mInst, axisId, &enabled);
    if (enabled == TRUE) {
// Axis is enabled!
}
}



================================================================================
[506/904] mcAxisIsHomed
Source: mcAxisIsHomed.htm
================================================================================

mcAxisIsHomed
mcAxisIsHomed
C/C++ Syntax:
int mcAxisIsHomed(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *homed);
LUA Syntax:
homed, rc= mc.mcAxisIsHomed(
		number mInst, 
		number axisId)
Description:
Check to see if axis has been homed.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
homed
Receives the axis homed state (TRUE homed, FALSE not homed).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Get the homed state of the axis. Axis will only report back as homed if all child motors have been homed.
Usage:
int mInst = 0;
BOOL homed = FALSE;
// Get the homed state of Z axis.
mcAxisIsHomed(mInst, Z_AXIS, &homed);
if (rc == MERROR_NOERROR && homed == TRUE) {
// Z is homed.
}



================================================================================
[507/904] mcAxisIsHoming
Source: mcAxisIsHoming.htm
================================================================================

mcAxisIsHoming
mcAxisIsHoming
C/C++ Syntax:
int mcAxisIsHomin(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *homing);
LUA Syntax:
homing, rc= mc.mcAxisIsHomed(
		number mInst, 
		number axisId)
Description:
Check to see if an axis is in a home operation.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
homing
Receives the axis himing state (TRUE homing, FALSE not homing).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
int mInst = 0;
BOOL homing = FALSE;
// Get the homing state of Z axis.
mcAxisIsHoming(mInst, Z_AXIS, &homing);
if (rc == MERROR_NOERROR && homing == TRUE) {
// Z is in a home operation.
}



================================================================================
[508/904] mcAxisIsStill
Source: mcAxisIsStill.htm
================================================================================

mcAxisIsStill
mcAxisIsStill
C/C++ Syntax:
int mcAxisIsStill(
	MINSTANCE mInst, 
	int axisId, 
	BOOL *still);
LUA Syntax:
still, rc = mc.mcAxisIsStill(
		number mInst, 
		number axisId)
Description:
Report if the axis is still.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
still
Receives a BOOL reflecting the still state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Reports back TRUE if the motor is still and FALSE if it is moving. The data is pulled from the axis' child motors.  All of the motors that are mapped to the axis must be still in order for the axis to be marked as still.
Note that an axis can be marked as still even when G code is still processing.  A report that the axis is still simply means that the axis is not moving at the point in time the function is called.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
int still = 0;
// Get the is moving state of the axis vlue of 1 is stopped.
mcAxisIsStill(mInst, AxisNumber, &still);



================================================================================
[509/904] mcAxisMapMotor
Source: mcAxisMapMotor.htm
================================================================================

mcAxisMapMotor
mcAxisMapMotor
C/C++ Syntax:
int mcAxisMapMotor(
		MINSTANCE mInst, 
		int axisId, 
		int motorId);
LUA Syntax:
rc = mc.mcAxisMapMotor(
		number mInst, 
		number axisId, 
		number motorId)
Description:
Map a motor to an axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The ID of the axis to which to map the motor.
motorId
The ID of the motor to map to the specified axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Set the motor to be a child of the axis. Up to six motors can be mapped to an axis.  The fist mapped motor is the master motor.  Any additional mapped motors are slave motors.  Softlimits will be the least common denominator for all the mapped motors.
Usage:
int mInst=0;
int AxisNumber = X_AXIS;
int MotorNumber = MOTOR5
// Map motor5 to the X axis.
mcAxisMapMotor(mInst, AxisNumber, MotorNumber);



================================================================================
[510/904] mcAxisRegister
Source: mcAxisRegister.htm
================================================================================

mcAxisRegister
mcAxisRegister
C/C++ Syntax:
int mcAxisRegister(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisRegister(
		number mInst, 
		number axisId);
Description:
Register an axis to the system.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_CREATED
The axis was not created.
Notes:
Register an axis to the system so motors can then be mapped to it. This could be a coordinated axis or an out of band axis.
This function is not used as the core registers axes based on capabilities set by the runtime license.
Usage:
int mInst=0;
for (int a = AXIS0; < AXIS4; a++) {
// Register axis0 - axis2 to the core.
if( mcAxisRegister(mInst, a) !=
MERROR_NOERROR
No Error.
){
         return(false);
    }
}



================================================================================
[511/904] mcAxisRemoveOverrideAxis
Source: mcAxisRemoveOverrideAxis.htm
================================================================================

mcAxisRemoveOverrideAxis
mcAxisRemoveOverrideAxis
C/C++ Syntax:
int mcAxisRemoveOverrideAxis(
		MINSTANCE mInst, 
		int axisId, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisRemoveOverrideAxis(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Removes an override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Remove override axis from the main axis.
Usage:
int mInst = 0;
int homed = 0;
// Remove axis 8 from the Z axis.
mcAxisRemoveOverrideAxis( mInst, AXIS_8, ZAXIS );



================================================================================
[512/904] mcAxisRemoveOverrideAxisSync
Source: mcAxisRemoveOverrideAxisSync.htm
================================================================================

mcAxisRemoveOverrideAxisSync
mcAxisRemoveOverrideAxisSync
C/C++ Syntax:
int mcAxisRemoveOverrideAxisSync(
		MINSTANCE mInst, 
		int axisId, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisRemoveOverrideAxisSync(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Removes an override axis, then sync the planner.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Remove override axis from the main axis.
Usage:
int mInst = 0;
int homed = 0;
// Remove axis 8 from the Z axis.
mcAxisRemoveOverrideAxisSync( mInst, AXIS_8, ZAXIS );



================================================================================
[513/904] mcAxisSetHomeDir
Source: mcAxisSetHomeDir.htm
================================================================================

mcAxisSetHomeDir
mcAxisSetHomeDir
C/C++ Syntax:
int mcAxisSetHomeDir(
		MINSTANCE mInst, 
		int axisId, 
		int dir);
LUA Syntax:
rc = mc.mcAxisSetHomeDir(
		number mInst, 
		number axisId, 
		number dir)
Description:
Set the specified axis' homing direction.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
dir
The homing direction.  -1 (NEG) or 1 (POS)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home direction only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored direction information and use it.
Usage:
// Set axis 0 homing directio to POS.
int mInst = 0;
mcAxisSetHomeDir(mInst, 0, 1);



================================================================================
[514/904] mcAxisSetHomeInPlace
Source: mcAxisSetHomeInPlace.htm
================================================================================

mcAxisSetHomeInPlace
mcAxisSetHomeInPlace
C/C++ Syntax:
int mcAxisSetHomeInPlace(
		MINSTANCE mInst, 
		int axisId, 
		BOOL homeInPlace);
LUA Syntax:
rc = mc.mcAxisGetHomeInPlace(
		number mInst,
		number axisId,
		number homeInPlace)
Description:
Set the axis' Home In Place flag.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis ID.
homeInPlace
TRUE or FALSE
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home in place flag only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored flag and implement a means to home the axis and set machine coordinate 0 at its current location.
Usage:
// Set the Home In Place flag for the X axis.
MINSTANCE mInst = 0;
BOOL hip = FALSE;
mcAxisGetHomeInPlace(mInst, X_AXIS, hip);



================================================================================
[515/904] mcAxisSetHomeOffset
Source: mcAxisSetHomeOffset.htm
================================================================================

mcAxisSetHomeOffset
mcAxisSetHomeOffset
C/C++ Syntax:
int mcAxisSetHomeOffset(
		MINSTANCE mInst, 
		int axisId, 
		double offset);
LUA Syntax:
rc = mcAxisSetHomeOffset(
		number mInst, 
		number axisId, 
		number offset);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
offset
Receives the axis home offset..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home offset only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored offset and use it.
Usage:
// Set the home offset for axis 0.
int mInst = 0;
mcAxisSetHomeOffset(mInst, 0, 1.5
/* inches */
);



================================================================================
[516/904] mcAxisSetHomeOrder
Source: mcAxisSetHomeOrder.htm
================================================================================

mcAxisSetHomeOrder
mcAxisSetHomeOrder
C/C++ Syntax:
int mcAxisSetHomeOrder(
		MINSTANCE mInst, 
		int axisId, 
		int order);
LUA Syntax:
rc = mc.mcAxisSetHomeOrder(
		number mInst, 
		number axisId, 
		number order)
Description:
Set the axis home order.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
order
The order in which the axis will be homed (0 is first).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the order the axis is homed in. 0 is the first axis to get homed and more then one axis could have the same home order number.
Usage:
int mInst=0;
// Set the order of homming so the Z axis will home first then the X and Y.
mcAxisSetHomeOrder(mInst, Z_AXIS , 0);
mcAxisSetHomeOrder(mInst, X_AXIS , 1);
mcAxisSetHomeOrder(mInst, Y_AXIS , 1);



================================================================================
[517/904] mcAxisSetHomeSpeed
Source: mcAxisSetHomeSpeed.htm
================================================================================

mcAxisSetHomeSpeed
mcAxisSetHomeSpeed
C/C++ Syntax:
int mcAxisSetHomeSpeed(
		MINSTANCE mInst,
		int axis, 
		double percent);
LUA Syntax:
rc = mc.mcAxisSetHomeSpeed(
		number mInst,
		number axis, 
		number percent);
Description:
Set the axis homing velocity as a percentage of the axis maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
percent
The percentage of the axis maximum velocity expressed in decimal. e.g. 20.5 for 20.5%
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
The core provides a container for the axis home speed percentage only.  It currently does nothing with it.  However, a motion plugin may retrieve the stored speed percentage and use it.
Usage:
// Set the homing speed for axis 0 as a percentage of the max velocity.
int mInst = 0;
mcAxisSetHomeSpeed(mInst, 0, 20.5
/* percent */
);



================================================================================
[518/904] mcAxisSetInfoStruct
Source: mcAxisSetInfoStruct.htm
================================================================================

mcAxisSetInfoStruct
mcAxisSetInfoStruct
C/C++ Syntax:
int mcAxisSetInfoStruct(
		MINSTANCE mInst, 
		int axisID, 
		axisinfo_t *ainf);
LUA Syntax:
N/A
Description:
Get axis info struct to get all axis settings in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
axisID
The axis ID.
ainf
The address of a axisinfo_t sruct that receives the info for the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set all the Axis information in the axis information structure in one call. This is used when all the data needs to be set. Call is best used when paired with mcAxisGetInfoStruct().
struct axisinfo {
	bool OutOfBandAxis;
	bool IsStill;           // Set high when the axis is not moving
	int  Jogging;           // Used to tell to jog...
	int  Homing;            // Used to tell the state of the home operation.
	int  Id;                // Axis Id
	bool IsSpindle;			// Does this axis control a spindle?
	bool Enabled;           // Is axis enabled?
	bool SoftlimitEnabled;  // Softlimits enabled?
	double SoftMaxLimit;    // Count for the max travel.
	double SoftMinLimit;    // Count for the min travel.
	bool VelocityMode;      // Used to make the axis move at a fixed speed
	bool BufferJog;
	double Pos;             // Position in user units.
	double Mpos;            // Machine position in user units.
	int HomeOrder;          // The order in which to home the axis.
};
Usage:
int mInst = 0;
axisinfo_t ainf;

mcAxisGetInfoStruct(mInst, Y_AXIS, &ainf);
// Get Y_AXIS info structure.
ainf.HomeOrder = 1;
// Set Y_AXIS home order to 1.
mcAxisSetInfoStruct(mInst, Y_AXIS, &ainf);
// Set Y_AXIS info structure.



================================================================================
[519/904] mcAxisSetMachinePos
Source: mcAxisSetMachinePos.htm
================================================================================

mcAxisSetMachinePos
mcAxisSetMachinePos
C/C++ Syntax:
int mcAxisSetMachinePos(
		MINSTANCE mInst, 
		int axis,
		double val);
LUA Syntax:
rc = mc.mcAxisSetMachinePos(
		number mInst, 
		number axis,
		number val)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
val
The desired axis position to apply a fixture offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
// Set axis 0 fisxture offset.
int mInst = 0;
mcAxisSetMachinePos(mInst, 0, 0.0
/* set part zero */
);



================================================================================
[520/904] mcAxisSetOverrideAxis
Source: mcAxisSetOverrideAxis.htm
================================================================================

mcAxisSetOverrideAxis
mcAxisSetOverrideAxis
C/C++ Syntax:
int mcAxisSetOverrideAxis(
		MINSTANCE mInst, 
		int axisTd, 
		int axisToOverrideId);
LUA Syntax:
rc = mc.mcAxisSetOverrideAxis(
		number mInst, 
		number axisId, 
		number axisToOverrideId)
Description:
Set axis as an override axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID of the of the axis to be used as an override.
axisToOverrideId
The axis ID to which the override applies.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Setting an override axis allows an axis to be superimposed on top of the main axis. This can be used as an axis to adjust the main axis on the fly (like Torch Height Control). Up to 4 override axes can be used at the same time.
Usage:
int mInst = 0;
int homed = 0;
// Set the axis 8 to be the override axis for the Z axis.
mcAxisSetOverrideAxis(mInst, AXIS_8, ZAXIS);



================================================================================
[521/904] mcAxisSetPos
Source: mcAxisSetPos.htm
================================================================================

mcAxisSetPos
mcAxisSetPos
C/C++ Syntax:
int mcAxisSetPos(
	MINSTANCE mInst, 
	int axisId, 
	double val);
LUA Syntax:
rc = mc.mcAxisSetPos(
	number mInst, 
	number axisId, 
	number val);
Description:
Set the Position of an axis by changing the fixture offset.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID for which to set the position.
val
The axis position (in user units).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the position of the axis by changing the current Fixture offset. This is not valid for out of band axes.
Usage:
int mInst=0;
double XAxisPos = .5;
int AxisNumber = X_AXIS;
// Set the position of the X axis by changing the fixture offset.
mcAxisSetPos(mInst, AxisNumber, XAxisPos);



================================================================================
[522/904] mcAxisSetSoftlimitEnable
Source: mcAxisSetSoftlimitEnable.htm
================================================================================

mcAxisSetSoftlimitEnable
mcAxisSetSoftlimitEnable
C/C++ Syntax:
int mcAxisSetSoftlimitEnable(
			MINSTANCE mInst,
			int axis,
			int enabel);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitEnable(
			number mInst,
			number axis,
			number enabel)
Description:
Set the master soft limit enable flag for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis ID.
enable
1 for enable
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Soft limits can be enabled on a per axis basis.  This is the master soft limit enable for the axis.  It overrides the soft limit enable set by mcSoftLimitSetState().
Usage:
// Diable softlimits on axis 0
MINSTANCE mInst = 0;
mcAxisSetSoftlimitEnable(mInst, 0,0);



================================================================================
[523/904] mcAxisSetSoftlimitMax
Source: mcAxisSetSoftlimitMax.htm
================================================================================

mcAxisSetSoftlimitMax
mcAxisSetSoftlimitMax
C/C++ Syntax:
int mcAxisSetSoftlimitMax(
		MINSTANCE mInst, 
		int axisId, 
		double max);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMax(
		number mInst, 
		number axisId, 
		number max);
Description:
Set the softlimit maximum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
max
The maximum poisition of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit maximum for the axis by drilling down to each motor and setting it max softlimit based on the counts per unit and max sent (max * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double max = 20;
mcAxisGetSoftlimitMax( mInst, axis, max);
// Set the max distance of the softlimit for the Y axis to 20 units.



================================================================================
[524/904] mcAxisSetSoftlimitMin
Source: mcAxisSetSoftlimitMin.htm
================================================================================

mcAxisSetSoftlimitMin
mcAxisSetSoftlimitMin
C/C++ Syntax:
int mcAxisSetSoftlimitMin(
		MINSTANCE mInst, 
		int axisId, 
		double min);
LUA Syntax:
rc = mc.mcAxisSetSoftlimitMin(
		number mInst, 
		number axisId, 
		number min);
Description:
Set the softlimit minimum for the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
min
The minimum position of the axis in machine coordinates.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Set the softlimit minimum for the axis by drilling down to each motor and setting it main softlimit based on the counts per unit and min sent (min * countsperunit)
Usage:
int mInst=0;
int axis = Y_AXIS;
double min = 20;
mcAxisGetSoftlimitMin( mInst, axis, min);
// Set the min distance of the softlimit for the Y axis to 20 units.



================================================================================
[525/904] mcAxisSetSpindle
Source: mcAxisSetSpindle.htm
================================================================================

mcAxisSetSpindle
mcAxisSetSpindle
C/C++ Syntax:
int mcAxisSetSpindle(
		MINSTANCE mInst, 
		int axisId, 
		BOOL spindle);
LUA Syntax:
rc = mc.mcAxisSetSpindle(
		number mInst, 
		number axisId, 
		number spindle)
Description:
Flag or unflag and axis as controlling a spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis ID.
spindle
The spindle flag.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Setting the current axis as an axis controlling a spindle has the effect of negating this flag for all other axes.
Only out of band axes can be falgged as controlling a spindle.
Usage:
// Set axis 6 as a spindle axis.
MINSTANCE mInst = 0;
mcAxisSetSpindle(mInst, 6, true);



================================================================================
[526/904] mcAxisSetVel
Source: mcAxisSetVel.htm
================================================================================

mcAxisSetVel
mcAxisSetVel
C/C++ Syntax:
int mcAxisSetVel(
	MINSTANCE mInst, 
	int axis, 
	double velocity);
Description:
Not used at this time.



================================================================================
[527/904] mcAxisUnmapMotor
Source: mcAxisUnmapMotor.htm
================================================================================

mcAxisUnmapMotor
mcAxisUnmapMotor
C/C++ Syntax:
int mcAxisUnmapMotor(
		MINSTANCE mInst, 
		int axisId, 
		int motor);
LUA Syntax:
rc = mc.mcAxisUnmapMotor(
		number mInst, 
		number axisId, 
		number motor)
Description:
Unmap the motor from the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The ID identifying the axis from which to unmap the motor.
motor
The ID identifying the motor to be unmapped from the aixs.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motor
was not found.
Notes:
Used to remove a motor from an axis based on it's motor id.
Usage:
int mInst = 0;
// Remove motor6 from the Y axis.
mcAxisUnmapMotor(mInst, Y_AXIS, MOTOR6);



================================================================================
[528/904] mcAxisUnmapMotors
Source: mcAxisUnmapMotors.htm
================================================================================

mcAxisUnmapMotors
mcAxisUnmapMotors
C/C++ Syntax:
int mcAxisUnmapMotors(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisUnmapMotors(
		number mInst, 
		number axisId)
Description:
Unmap all motors from the axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
Axis number to unmap motor from.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Used to remove all motors from an axis. This is used when an axis needs to have all it's child motors removed and setup with all new motors.
Usage:
int mInst = 0;
// Remove all motors from the Y axis.
mcAxisUnmapMotors(mInst, Y_AXIS);



================================================================================
[529/904] mcAxisUnregister
Source: mcAxisUnregister.htm
================================================================================

mcAxisUnregister
mcAxisUnregister
C/C++ Syntax:
int mcAxisUnregister(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
rc = mc.mcAxisUnregister(
		number mInst, 
		number axisId)
Description:
Unregister an axis from the system.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
int mInst=0;
// Remove AXIS7 from frome the system.
mcAxisUnregister(mInst, AXIS7);



================================================================================
[530/904] mcCntlCheckLicenseFeature
Source: mcCntlCheckLicenseFeature.htm
================================================================================

mcCntlCheckLicenseFeature
mcCntlCheckLicenseFeature
C/C++ Syntax:
int mcCntlCheckLicenseFeature(
		MINSTANCE  mInst, 
		const char *licFile, 
		const char *requirement, 
		const char *feature);
LUA Syntax:
rc = mcCntlCheckLicenseFeature(
		number  mInst, 
		string licFile, 
		string requirement, 
		string feature);
Description:
Check a license file for a requirement and feature.
Parameters:
Parameter
Description
mInst
The controller instance.
licFile
The license file name.
requirement
A string defining the license requirement.
feature
A string defining the feature to check.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
The
feature
parameter cannot be NULL.
MERROR_NODATA
The license service count not be initialized.
MERROR_LIC_BAD_ID
The license file PCID does not match the current PCID.
MERROR_LIC_REQUIREMENT_NOT_FOUND
The specified license requirement does not exist in the license file.
MERROR_LIC_FEATURE_NOT_FOUND
The specified feature does not exist in the license file.
MERROR_LIC_EXPIRED
The time limited license has expired.
MERROR_LIC_BAD_KEY
The license encryption key is invalid.
(
Notes:
If no explicit path is given for the
licFile
parameter (just a file name), the core looks for the license in the Licenses directory of the installation path.  Otherwise, the fully qualified path is used.
Usage:
// Check the DarwinLic.dat file for feature M4_DARWIN
MINSTANCE mInst = 0;
int rc = mcCntlCheckLicenseFeature(mInst, "DarwinLic.dat", "NF_DARWIN", "M4_DARWIN");
if (rc != MERROR_NOERROR) {
// Feature found!!!
return;
}



================================================================================
[531/904] mcCntlCleanup
Source: mcCntlCleanup.htm
================================================================================

mcCntlCleanup
mcCntlCleanup
C/C++ Syntax:
int mcCntlCleanup(MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Cleanup the core instance before shutdown.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
None.
// Cleanup core instance 0
MINSTANCE mInst = 0;
int rc = mcCntlCleanup(mInst);



================================================================================
[532/904] mcCntlCloseGCodeFile
Source: mcCntlCloseGCodeFile.htm
================================================================================

mcCntlCloseGCodeFile
mcCntlCloseGCodeFile
C/C++ Syntax:
int mcCntlCloseGCodeFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCloseGCodeFile(
		number mInst)
Description:
Close Gocde file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to close a Gcode file if the Gcode File needs to be edited
Usage:
int mInst=0;
mcCntlCloseGCodeFile(mInst);
// Close the Gcode file in controller 0.



================================================================================
[533/904] mcCntlCompileScripts
Source: mcCntlCompileScripts.htm
================================================================================

mcCntlCompileScripts
mcCntlCompileScripts
C/C++ Syntax:
int mcCntlCompileScripts(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCompileScripts(
		number mInst);
Description:
Force scripts to compile (if the script plugin allows).
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
_RETUNR(
MERROR_NOT_NOW
The operation could not be completed at this time.
, the scripts could not be compiled.
Notes:
Usage:
// Compaile all scripts
MINSTANCE mInst = 0;
int rc = mcCntlCompileScripts(mInst);



================================================================================
[534/904] mcCntlConfigStart
Source: mcCntlConfigStart.htm
================================================================================

mcCntlConfigStart
mcCntlConfigStart
C/C++ Syntax:
int mcCntlConfigStart(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlConfigStart(
		number mInst);
Description:
Put the control into the configure state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is in a state from which it cannot transition to the configure state.
Notes:
Upon entering the configure state, MSG_CONFIG_START is sent to the GUI and plugins.
Usage:
// Enter the configure state
MINSTANCE mInst = 0;
if (mcCntlConfigStart(mInst) == MERRROR_NOERROR) {
// Successfully entered the configure state!
}



================================================================================
[535/904] mcCntlConfigStop
Source: mcCntlConfigStop.htm
================================================================================

mcCntlConfigStop
mcCntlConfigStop
C/C++ Syntax:
int mcCntlConfigStop(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlConfigStop(
		number mInst);
Description:
Leave the configure state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control was not in the configure state.
Notes:
Upon leaving the congifure state, MSG_CONFIG_END is sent to the GUI and plugins.
Usage:
// Leave the configure state.
MINSTANCE mInst = 0;
int rc = mcCntlConfigStop(mInst);
if (rc == MERROR_NOERROR) {
// Successfully exited the configure state.
}



================================================================================
[536/904] mcCntlCreateLocalVars
Source: mcCntlCreateLocalVars.htm
================================================================================

mcCntlCreateLocalVars
mcCntlCreateLocalVars
C/C++ Syntax:
int mcCntlCreateLocalVars(
		MINSTANCE mInst, 
		const char *lineParams, 
		unsigned long *handle)
LUA Syntax:
hParams, rc = mc.mcCntlCreateLocalVars(
		number mInst, 
		string lineParams);
Description:
Create a handle to macro script parameters.  This is primarily a script debugging convenience function.
Parameters:
Parameter
Description
mInst
The controller instance.
lineParams
A string containing the G code block parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is in a state from which it cannot transition to the configure state.
Notes:
This function can be used to facilitate the debugging of scripts that take parameters.  Some M codes and/or custom M codes can take parameters specified on the G code blcok after the M code. It really has no use for C or C++.
Usage:
--Example m19 script that takes parameters
function m19(hParam)
--hParam is a handle to all parameters on same line as m19 --The  R and P params are optional. M19 R90 P0 for example.
--R is angle from 0 to 360.
--P is direction: 0 == shortest angle, 1 == clockwise, 2 == counterclockwise
--Fanuc uses S for angle
local inst = mc.mcGetInstance()
    local pcallRet = true
    local stat = 1
    local msgPre = "M19 macro says "
    local msg = "M19 Completed successfully"
    local varR = 0
    local varP = 0
    if (hParam ~= nil) then
        local rc, flagR, flagP
        flagR, rc = mc.mcCntlGetLocalVarFlag(inst, hParam, mc.SV_R)
        flagP, rc = mc.mcCntlGetLocalVarFlag(inst, hParam, mc.SV_P)
        if (flagR == 1) then
--Check that the flag has been set so we do not get an unexpected value for mc.SV_R
varR = mc.mcCntlGetLocalVar(inst, hParam, mc.SV_R)
            if (varR < 0) or (varR > 360) then
--It is out of range
msg = string.format("varR == " .. varR .. " and is out of range (0-360)")
                mc.mcCntlCycleStop(inst)
                return
            end
        end
		
        if (flagP == 1) then
--Check that the flag has been set so we do not get an unexpected value for mc.SV_P
varP = mc.mcCntlGetLocalVar(inst, hParam, mc.SV_P)
-- fixup the values to pass to the spindleorient script.
if (varP == 0) then 
                varP = mc.MC_SPINDLE_STOP
-- 0
elseif (varP == 1) then 
                varP = mc.MC_SPINDLE_FWD
-- 1
elseif (varP == 2) then 
                varP = mc.MC_SPINDLE_REV
-- -1
else
                msg = string.format("varP == " .. varP .. " and is out of range (0-2)")
                mc.mcCntlCycleStop(inst)
                return
            end
        end
    end

    pcallRet, stat, msg = pcall(spindleorient, varR, varP);
--Call the spindleorient.mcs script
mc.mcCntlSetLastError(inst, msgPre .. msg)
	
    if (pcallRet == false) then 
        mc.mcCntlCycleStop(inst)
    end
end

if (mc.mcInEditor() == 1) then
--We are testing the script in the editor.
--Fab up some paramters to pass to our m19() function.
local inst = mc.mcGetInstance()
    local hParams, rc =
mc.mcCntlCreateLocalVars
(inst, "R320 P0")
--Like we are testing "M19 R320 P0".
m19(hParams)
--Call m19() with hParams.
end



================================================================================
[537/904] mcCntlCycleStart
Source: mcCntlCycleStart.htm
================================================================================

mcCntlCycleStart
mcCntlCycleStart
C/C++ Syntax:
int mcCntlCycleStart(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCycleStart(
		number mInst)
Description:
Start the Gcode file running.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Is also used to restart after a feedhold.
Usage:
int mInst=0;
// Start controller 0's Gcode file.
mcCntlCycleStart(mInst);



================================================================================
[538/904] mcCntlCycleStop
Source: mcCntlCycleStop.htm
================================================================================

mcCntlCycleStop
mcCntlCycleStop
C/C++ Syntax:
int mcCntlCycleStop(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlCycleStop(
		number mInst)
Description:
Stop a Gcode file that is running.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Feedhold needs to be used to pause the file. CMD_STOP_EXECUTION is sent to all plugins to tell the the Stop event has been requested.
Usage:
int mInst=0;
// Stop controller 0's Gcode file.
mcCntlCycleStop(mInst);



================================================================================
[539/904] mcCntlDryRunToLine
Source: mcCntlDryRunToLine.htm
================================================================================

mcCntlDryRunToLine
mcCntlDryRunToLine
C/C++ Syntax:
int mcCntlDryRunToLine(
		MINSTANCE mInst, 
		int line);
LUA Syntax:
rc = mc.mcCntlDryRunToLine(
		number mInst, 
		number line)
Description:
Process G code forward to a given line without motion.
Parameters:
Parameter
Description
mInst
The controller instance.
line
An integer specifying the G code line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_NOT_NOW
The operation could not be completed at this time.
It was not possible to start the dry run at this time.
Notes:
Once the dry run is started, the function returns immediately.  To wait on the dry run, you must check the state of the control.
Usage:
// Dry run to line 38
MINSTANCE mInst = 0;
int rc = mcCntlDryRunToLine(mInst, 38);



================================================================================
[540/904] mcCntlEStop
Source: mcCntlEStop.htm
================================================================================

mcCntlEStop
mcCntlEStop
C/C++ Syntax:
int mcCntlEStop(
	MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlEStop(
	number mInst)
Description:
Disables the control and optionally dereferences all axes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is not a subsitute for a hard wired e-stop circuit!  This is a convenience function that is designed to put the contorol into a default state to be used after the machine has already been stopped by the real e-stop control circuit.
Usage:
// Put the control in the default state when e-stop is asserted.
MINSTANCE mInst = 0;
int rc = mcCntlEStop(mInst);



================================================================================
[541/904] mcCntlEnable
Source: mcCntlEnable.htm
================================================================================

mcCntlEnable
mcCntlEnable
C/C++ Syntax:
int mcCntlEnable(
	MINSTANCE mInst, 
	BOOL state);
LUA Syntax:
rc = mc.mcCntlEnable(
	number mInst, 
	number state)
Description:
Enable or disable the control.
Parameters:
Parameter
Description
mInst
The controller instance.
state
A BOOL specifying the desired control state. TRUE for enabled
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
The ISIG_EMERGENCY signal is asserted.
Notes:
If ISIG_EMERGENCY is asserted, the e-stop condition must be cleared.
Usage:
// Enable the control.
MINSTANCE mInst = 0;
int rc = mcCntlEnable(mInst, TRUE);



================================================================================
[542/904] mcCntlFeedHold
Source: mcCntlFeedHold.htm
================================================================================

mcCntlFeedHold
mcCntlFeedHold
C/C++ Syntax:
int mcCntlFeedHold(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlFeedHold(
		number mInst)
Description:
Pause the motion of a Gcode block.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Will not effect out of band axis or jogging.
Usage:
int mInst = 0;
int rc;
rc = mcCntlFeedHold(mInst);
// Pause the motion of controller 0.
if (rc == MERROR_NOERROR) {
// Feed hold was successful.
}



================================================================================
[543/904] mcCntlFeedHoldState
Source: mcCntlFeedHoldState.htm
================================================================================

mcCntlFeedHoldState
mcCntlFeedHoldState
C/C++ Syntax:
int mcCntlFeedHoldState(
		MINSTANCE mInst, 
		BOOL *InFeedHold);
LUA Syntax:
InFeedHold, rc = mc.mcCntlFeedHoldState(
				number mInst)
Description:
Get the state of Feedhold.
Parameters:
Parameter
Description
mInst
The controller instance.
InFeedHold
The address of a BOOL to receive the status of Feedhold (TRUE or FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Not used at this time.
Usage:
int mInst = 0;
int rc;
BOOL fhState;
rc = mcCntlFeedHoldState(mInst, &fhState);
// Pause the motion of controller 0.
if (rc == MERROR_NOERROR && fhState == TRUE) {
// The control is in Feedhold.
}



================================================================================
[544/904] mcCntlGcodeExecute
Source: mcCntlGcodeExecute.htm
================================================================================

mcCntlGcodeExecute
mcCntlGcodeExecute
C/C++ Syntax:
int mcCntlGcodeExecute(
		MINSTANCE mInst, 
		const char *commands);
LUA Syntax:
rc = mc.mcCntlGcodeExecute(
		number mInst, 
		string commands)
Description:
Execute G code as a unit of work.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MERROR_NOT_COMPILED
The macro scripts could not be compiled.
Notes:
If the control is in the idle state, this function will execute the G code in MDI mode.
It is important to note that this function does not wait for the G code to complete.  It is an error to execute G code with this function one line after another.  Instead, the lines should be combined into one string separeated with newline characters (\n).
Usage:
// Execute spindle stop and rapid to 0, 0.
MINSTANCE mInst = 0;
int rc;
rc = mcCntlGcodeExecute(mInst, "M05\nG00 X0 Y0");
if (rc == MERROR_NOERROR) {
// The G code was submitted for processing.
// However, the function return immediately and does not wait on the G code to finish.
}



================================================================================
[545/904] mcCntlGcodeExecuteWait
Source: mcCntlGcodeExecuteWait.htm
================================================================================

mcCntlGcodeExecuteWait
mcCntlGcodeExecuteWait
C/C++ Syntax:
int mcCntlGcodeExecuteWait(
		MINSTANCE mInst, 
		const char *commands);
LUA Syntax:
rc = mc.mcCntlGcodeExecuteWait(
		number mInst, 
		string commands)
Description:
Execute G code as a unit of work and wait until it is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MERROR_NOT_COMPILED
The macro scripts could not be compiled.
Notes:
If the control is in the idle state, this function will execute the G code in MDI mode.
Since mcCntlGcodeExecuteWait() waits for the G code execution to complete, multiple lines of G code can be broken up into separate calls.  This ia in contrast to mcCntlGcodeExecute() where the whole unit of work needs to be specified in one call.
Usage:
// Execute spindle stop and rapid to 0, 0.
MINSTANCE mInst = 0;
int rc;
rc = mcCntlGcodeExecuteWait(mInst, "M05\nG00 X0 Y0");
if (rc == MERROR_NOERROR) {
// The G code was submitted for processing and has completed.
}



================================================================================
[546/904] mcCntlGcodeInterpGetData
Source: mcCntlGcodeInterpGetData.htm
================================================================================

mcCntlGcodeInterpGetData
mcCntlGcodeInterpGetData
C/C++ Syntax:
int mcCntlGcodeInterpGetData(
		MINSTANCE mInst, 
		interperter_t *data);
LUA Syntax:
N/A
Description:
Retrieves the current G code interpreter data.
Parameters:
Parameter
Description
mInst
The controller instance.
data
The address of a Interpreter_info struct.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
struct Interperter_info {
	double ModalGroups[MC_MAX_GROUPS];
	double FeedRate;
	double SpindleSpeed;
	int SpindleDirection;
	BOOL Mist;
	BOOL Flood;
	int ToolNumber;
	int HeightRegister;
	int DiaRegister;
};
typedef struct Interperter_info interperter_t;
Usage:
// Get the interpreter information.
MINSTANCE mInst = 0;
interperter_t data;
int rc;
rc = mcCntlGcodeInterpGetData(mInst, &data);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[547/904] mcCntlGcodeInterpGetPos
Source: mcCntlGcodeInterpGetPos.htm
================================================================================

mcCntlGcodeInterpGetPos
mcCntlGcodeInterpGetPos
C/C++ Syntax:
int mcCntlGcodeInterpGetPos(
		MINSTANCE mInst, 
		int axisId, 
		double *pos);
LUA Syntax:
pos, rc = mc.mcCntlGcodeInterpGetPos(
		number mInst, 
		number axisId)
Description:
Retrieves the current G code interpreter position for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
pos
An address of a double to receive the axis' position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
It is important to not that the look ahead buffer will affect what value is returned and it may not be the current position.
Usage:
// Get the current buffered X axis position.
MINSTANCE mInst = 0;
double pos;
int rc;
rc = int mcCntlGcodeInterpGetPos(mInst, X_AXIS, &pos);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[548/904] mcCntlGetBlockDelete
Source: mcCntlGetBlockDelete.htm
================================================================================

mcCntlGetBlockDelete
mcCntlGetBlockDelete
C/C++ Syntax:
int mcCntlGetBlockDelete(
		MINSTANCE mInst, 
		int deleteId, 
		BOOL *val);
LUA Syntax:
val, rc = mc.mcCntlGetBlockDelete(
		number mInst, 
		number deleteId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
deleteId
An integer specifying the block delete index.
val
The address of a BOOL to revceive the block delete state. (TRUE is block delete on
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Up to 10 block deletes can be used.
Usage:
// Is block delete 0 on?
MINSTANCE mInst = 0;
BOOL val;
int rc = mcCntlGetBlockDelete(mInst, 0, &val);
if (rc == MERROR_NOERROR) {
	if (val == TRUE) {
// Is block delete 0 is on!
} else {
// Is block delete 0 is off!
}
}



================================================================================
[549/904] mcCntlGetBuild
Source: mcCntlGetBuild.htm
================================================================================

mcCntlGetBuild
mcCntlGetBuild
C/C++ Syntax:
int mcCntlGetBuild(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufsize);
LUA Syntax:
build, rc = mc.mcCntlGetBuild(
		number mInst)
Description:
Retrieves the core build number.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer that receives the build number.
bufsize
The length of the supplied string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get the core's build number
MINSTANCE mInst = 0;
char buildBuf[80];
int rc = mcCntlGetBuild(mInst, buildBuf, sizeof(buildBuf));
if (rc == MERROR_NOERROR) {
	printf("The current build is %s.n", buildBuf);
}



================================================================================
[550/904] mcCntlGetComputerID
Source: mcCntlGetComputerID.htm
================================================================================

mcCntlGetComputerID
mcCntlGetComputerID
C/C++ Syntax:
int mcCntlGetComputerID(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetComputerID(
		number mInst)
Description:
Retrieve the computer ID(s) for the current host PC.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the ID(s).
bufSize
The size of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Depending on the number of Ethernet cards in the PC, this functions may return more than one ID.  If more than one ID is returned, they will be delimited by tab characters.
Usage:
// Get the ID(s) for this host
MINSTANCE mInst = 0;
int rc = mcCntlGetComputerID(mInst, buf, sizeof(buf));
if (rc == MERROR_NOERROR) {
// Parse buf to get the ID(s)
}



================================================================================
[551/904] mcCntlGetCoolantDelay
Source: mcCntlGetCoolantDelay.htm
================================================================================

mcCntlGetCoolantDelay
mcCntlGetCoolantDelay
C/C++ Syntax:
int mcCntlGetCoolantDelay(
		MINSTANCE mInst, 
		double *secs);
LUA Syntax:
sec, rc = mc.mcCntlGetCoolantDelay(
		number mInst)
Description:
Get the coolant delay time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
an address of a double to receive the coolant delay.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the coolant delay.
MINSTANCE mInst = 0;
double secs;
int rc = mcCntlGetCoolantDelay(mInst, &secs);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[552/904] mcCntlGetCwd
Source: mcCntlGetCwd.htm
================================================================================

mcCntlGetCwd
mcCntlGetCwd
C/C++ Syntax:
int mcCntlGetCwd(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetCwd(
		number mInst)
Description:
Retrieves the core's current working directory.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the ID(s).
bufSize
The size of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get current working directory.
MINSTANCE mInst = 0;
char curDir[255];
int rc = mcCntlGetCwd(mInst, curDir, sizeof(curDir));
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[553/904] mcCntlGetDiaMode
Source: mcCntlGetDiaMode.htm
================================================================================

mcCntlGetDiaMode
mcCntlGetDiaMode
C/C++ Syntax:
int mcCntlGetDiaMode(
		MINSTANCE mInst, 
		BOOL *dia);
LUA Syntax:
dia, rc = mc.mcCntlGetDiaMode(
		number mInst)
Description:
Retrieve the lathe diameter mode.
Parameters:
Parameter
Description
mInst
The controller instance.
dia
The address of a BOOL that receives the diameter mode.  (TRUE is diameter mode
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Only valid when the control is in lathe (turn) mode.
Usage:
// Get the lathe diameter mode.
MINSTANCE mInst = 0;
BOOL Dia;
int rc = mcCntlGetDiaMode(mInst, &Dia);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[554/904] mcCntlGetDistToGo
Source: mcCntlGetDistToGo.htm
================================================================================

mcCntlGetDistToGo
mcCntlGetDistToGo
C/C++ Syntax:
int mcCntlGetDistToGo(
	MINSTANCE mInst, 
	int axisId, 
	double *togo);
LUA Syntax:
togo, rc = int mcCntlGetDistToGo(
	number mInst, 
	number axisId)
Description:
Returns the distance from the end point of a move in current block.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis from which to to get the distance.
togo
A pointer to a double to receive the distance left in current move.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Only used when running G code.
Usage:
int mInst=0;
int axis = Y_AXIS;
double togo=0;
mcCntlGetDistToGo(mInst, axis, &togo);



================================================================================
[555/904] mcCntlGetEnableFRO
Source: mcCntlGetEnableFRO.htm
================================================================================

mcCntlGetEnableFRO
mcCntlGetEnableFRO
C/C++ Syntax:
int mcCntlGetEnableFRO(
		MINSTANCE mInst, 
		BOOL *enable);
LUA Syntax:
eanbled, rc = mc.mcCntlGetEnableFRO(
		number mInst)
Description:
Get the current Feed Rate Override status.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a BOOL to receive the feed rate override satus.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current FRO status
MINSTANCE mInst = 0;
BOOL enabled;
int rc = mcCntlGetEnableFRO(mInst, &enabled);
if (rc == MERROR_NOERROR) {
// Success!
if (enabled == TRUE) {
// Feed Rate Override is enabled!
} else {
// Feed Rate Override is disabled!
}
}



================================================================================
[556/904] mcCntlGetFRO
Source: mcCntlGetFRO.htm
================================================================================

mcCntlGetFRO
mcCntlGetFRO
C/C++ Syntax:
int mcCntlGetFRO(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcCntlGetFRO(
		number mInst)
Description:
Get the current Feed Rate Override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The Address of a double to receive the feed rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current FRO
MINSTANCE mInst = 0;
double fro;
int rc = mcCntlGetFRO(mInst, &fro);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[557/904] mcCntlGetGcodeFileName
Source: mcCntlGetGcodeFileName.htm
================================================================================

mcCntlGetGcodeFileName
mcCntlGetGcodeFileName
C/C++ Syntax:
int mcCntlGetGcodeFileName(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetGcodeFileName(
		number mInst)
Description:
Retrieve he current G code file name.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffere to receive the G code file name.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
An empty string is returned if there is no G code file loaded.
Usage:
// Get the currently loaded G code file name.
MINSTANCE mInst = 0;
char gCodeFileName[255];
int rc = mcCntlGetGcodeFileName(mInst, gCodeFileName, sizeof(gCodeFileName)); 
if (rc == MERROR_NOERROR) {
// Success.
}



================================================================================
[558/904] mcCntlGetGcodeLine
Source: mcCntlGetGcodeLine.htm
================================================================================

mcCntlGetGcodeLine
mcCntlGetGcodeLine
C/C++ Syntax:
int mcCntlGetGcodeLine(
		MINSTANCE mInst, 
		int LineNumber, 
		char *buf, 
		long bufSize);
LUA Syntax:
buff, rc = mc.mcCntlGetGcodeLine(
		number mInst, 
		number LineNumber)
Description:
Get the line of Gcode from the loaded gcode file.
Parameters:
Parameter
Description
mInst
The controller instance.
LineNumber
The desired line number from the Gcode file.
buf
The address of a character buffer that recieves the Gcode line.
bufSize
The size of the receiving character buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
LineNumber
is out of range
Notes:
Used to get the gocde file lines to display
Usage:
int mInst=0;
int LineNumber = 5;
char gline[128];
gline[0] = '0';
mcCntlGetGcodeLine(mInst, LineNumber, gline , 128);
// Get line number 5 from the Gocde file loaded into controller 0.



================================================================================
[559/904] mcCntlGetGcodeLineCount
Source: mcCntlGetGcodeLineCount.htm
================================================================================

mcCntlGetGcodeLineCount
mcCntlGetGcodeLineCount
C/C++ Syntax:
int mcCntlGetGcodeLineCount(
		MINSTANCE mInst, 
		double *count);
LUA Syntax:
count, rc = mc.mcCntlGetGcodeLineCount(
		number mInst)
Description:
Get the number of lines in the Gcode file.
Parameters:
Parameter
Description
mInst
The controller instance.
count
The address of a double to receive the number of lines in the G code file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The number of lines in the file may not be the number of blocks or moves to be done because of sub routines and canned cycles.
Usage:
int mInst=0;
double count=0;
mcCntlGetGcodeLineCount(mInst, &count);



================================================================================
[560/904] mcCntlGetGcodeLineNbr
Source: mcCntlGetGcodeLineNbr.htm
================================================================================

mcCntlGetGcodeLineNbr
mcCntlGetGcodeLineNbr
C/C++ Syntax:
int mcCntlGetGcodeLineNbr(
		MINSTANCE mInst, 
		double *val);
LUA Syntax:
val, rc = mc.mcCntlGetGcodeLineNbr(
		number mInst)
Description:
Returns the line number of the current move being made.
Parameters:
Parameter
Description
mInst
The controller instance.
val
The address of a double to receive the G code line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function will return the next line that will be run if G code is not running.
Usage:
int mInst=0;
double dline=0;
mcCntlGetGcodeLineNbr(mInst, &dline);
//Get the current running line number



================================================================================
[561/904] mcCntlGetInstanceHandle
Source: mcCntlGetInstanceHandle.htm
================================================================================

mcCntlGetInstanceHandle
mcCntlGetInstanceHandle
C/C++ Syntax:
int mcCntlGetInstanceHandle(MINSTANCE mInst, 
                            const char *owner, 
                            HMINSTANCE *hInst);
LUA Syntax:
hInst, rc = mc.mcCntlGetInstanceHandle(
                                       number mInst, 
                                       string owner)
or

hInst = mc.mcGetInstance(string owner)
Description:
Returns a HMINSTANCE handle that can be used in place of a MISNTANCE parameter.  If API calls are made with a HMINSTANCE parameter, logging can trace from where the the API call came.
Parameters:
Parameter
Description
mInst
The controller instance.
owner
A string buffer naming that is associated with the returned HMINSANCE.
hInst
The address of a HMINSTANCE variable to receive the new handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function will return a HMINSTANCE based on the passed in MINSTANCE and owner variables.
The instance number can still be gleaned from an instance handle.  The instance handle is 4 bytes wide with the instance number being the lower 8 bytes.
MINSTANCE mInst = hInst & 0x000000FF;
Usage:
MINSTANCE mInst=0;
HMINSTANCE hInst;
mcCntlGetInstanceHandle(mInst, "My Description", &hInst);
mcCntlCycleStart(hInst);
//Will show in the log as coming from "My Description"



================================================================================
[562/904] mcCntlGetLastError
Source: mcCntlGetLastError.htm
================================================================================

mcCntlGetLastError
mcCntlGetLastError
C/C++ Syntax:
int mcCntlGetLastError(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLastError(
		MINSTANCE mInst)
Description:
Retrieve the last error/status message from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the next error message on the error message stack.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
was NULL or
bufSize
was 0.
MERROR_NODATA
No message was available.
Notes:
Calling this function removes the returned message from the stack.
Usage:
int mInst=0;
char error[128];
mcCntlGetLastError(mInst, error, 128);
// Receives the last error messge for controller instance 0.



================================================================================
[563/904] mcCntlGetLastLogMsg
Source: mcCntlGetLastLogMsg.htm
================================================================================

mcCntlGetLastLogMsg
mcCntlGetLastLogMsg
C/C++ Syntax:
int mcCntlGetLastLogMsg(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLastLogMsg(
		number mInst)
Description:
Retrieve the last log message from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the next log message on the log message stack.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
was NULL or
bufSize
was 0.
MERROR_NODATA
No log message was available.
Notes:
Calling this function removes the returned message from the log stack.
Usage:
int mInst=0;
char msg[128];
mcCntlGetLastLogMsg(mInst, msg, 128);
// Receives the last log messge for controller instance 0.



================================================================================
[564/904] mcCntlGetLicenseData
Source: mcCntlGetLicenseData.htm
================================================================================

mcCntlGetLicenseData
mcCntlGetLicenseData
C/C++ Syntax:
int mcCntlGetLicenseData(
		MINSTANCE mInst, 
		int index, 
		char *buf, 
		long bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetLicenseData(
		number mInst, 
		number index)
Description:
Retrieves the license data for the specified index.
Parameters:
Parameter
Description
mInst
The controller instance.
index
The index of the license data to retrieve.
buf
The address of a character buffer that recieves the Gcode line.
bufSize
The size of the receiving character buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
index
is out of range
MERROR_NODATA
There is no license data for the specidied index.
Notes:
Usage:
// Get the license data at index 1.
MINSTANCE mInst = 0;
long len;
char *data;
long dataLen = 0;
int index = 1;
int rc = mcCntlGetLicenseDataLen(mInst, index, &dataLen);
if (rc == MERROR_NOERROR && dataLen > 0) {
	data = (char *)malloc(dataLen + 1);
	memset(data, 0, dataLen + 1);
	rc =
mcCntlGetLicenseData(mInst, index, data, dataLen)
;
	if (rc == MERROR_NOERROR) {
// Success!
}
}



================================================================================
[565/904] mcCntlGetLicenseDataLen
Source: mcCntlGetLicenseDataLen.htm
================================================================================

mcCntlGetLicenseDataLen
mcCntlGetLicenseDataLen
C/C++ Syntax:
int mcCntlGetLicenseDataLen(
		MINSTANCE mInst, 
		int index, 
		long *bufSize);
LUA Syntax:
bufSize, rc = mc.mcCntlGetLicenseData(
		number mInst, 
		number index)
Description:
Retrieves the license data length for the specified index.
Parameters:
Parameter
Description
mInst
The controller instance.
index
The index of the license data to retrieve.
bufSize
The address of a long to receive the data length..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
index
is out of range
MERROR_NODATA
There is no license data for the specidied index.
Notes:
Usage:
// Get the license data at index 1.
MINSTANCE mInst = 0;
long len;
char *data;
long dataLen = 0;
int index = 1;
int rc =
mcCntlGetLicenseDataLen(mInst, index, &dataLen)
;
if (rc == MERROR_NOERROR && dataLen > 0) {
	data = (char *)malloc(dataLen + 1);
	memset(data, 0, dataLen + 1);
	rc = mcCntlGetLicenseData(mInst, index, data, dataLen);
	if (rc == MERROR_NOERROR) {
// Success!
}
}



================================================================================
[566/904] mcCntlGetLicenseModules
Source: mcCntlGetLicenseModules.htm
================================================================================

mcCntlGetLicenseModules
mcCntlGetLicenseModules
C/C++ Syntax:
int mcCntlGetLicenseModules(
		MINSTANCE mInst, 
		unsigned long long *modules)
LUA Syntax:
N/A
Description:
Retrieve the 64 bit number comprising the licensed modules.
Parameters:
Parameter
Description
mInst
The controller instance.
modules
The address of a unsigned lon long to receive the licensed modules..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Retrieve the licensed modules.
MINSTANCE mInst = 0;
unsigned long long modules = 0;
int rc = mcCntlGetLicenseModules(mInst, &modules);



================================================================================
[567/904] mcCntlGetLocalComment
Source: mcCntlGetLocalComment.htm
================================================================================

mcCntlGetLocalComment
mcCntlGetLocalComment
int mcCntlGetLocalComment(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		char *buf
		size_t bufSize);
LUA Syntax:
comment, rc = mc.mcCntlGetLocalComment(
		number mInst, 
		number hVars)
Description:
Retrieve the comment that may have been on the block line.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
buf
The address of a buffer to receive the comment text.
bufSize
The size of the supplied buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
    local inst = mc.mcGetInstance()
-- Get the current instance
local nilPoundVar = mc.mcCntlGetPoundVar(inst, 0)
    local comment =
mc.mcCntlGetLocalComment
(inst, hVars)
    local message = ""
    if hVars ~= nil then
        local flag, retval, rc
        flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
        if (flag == 1) then 
            retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
            if rc == mc.MERROR_NOERROR then 
                message = message .. "A" .. ":" .. tostring(retval) .. ", "
            end
        end
        flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
        if (flag == 1) then 
            retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
            if rc == mc.MERROR_NOERROR then 
                message = message .. "B" .. ":" .. tostring(retval)
            end
        end
        mc.mcCntlSetLastError(inst, message)
    end
end

if (mc.mcInEditor() == 1) then
--We are testing the script in the editor.
--Fab up some paramters to pass to our m700() function.
local inst = mc.mcGetInstance()
    local hParams, rc =
mc.mcCntlCreateLocalVars
(inst, "A23 B6 (my Comment)")
--Like we are testing "M700 A23 B6 (my Comment)".
m700(hParams)
-- Call m700 with hParams.
end



================================================================================
[568/904] mcCntlGetLocalVar
Source: mcCntlGetLocalVar.htm
================================================================================

mcCntlGetLocalVar
mcCntlGetLocalVar
int mcCntlGetLocalVar(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		int varNumber, 
		doubl *retval);
LUA Syntax:
retval, rc = mc.mcCntlGetLocalVar(
		number mInst, 
		number hVars, 
		number varNumber)
Description:
Retrieve the specified local variable.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
varNumber
The index of the local variable flage to retrieve.
retval
An address of a double integer to receive the value of the specified local variable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
varNumber
is out of range or
retval
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
	local inst = mc.mcGetInstance() -- Get the current instance
	local nilPoundVar = mc.mcCntlGetPoundVar(inst, hVars, 0)
	local message = ""
	if hVars ~= nil then
		local flag, retval, rc
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "A" .. ":" .. tostring(retval) .. ", "
			end
		end
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "B" .. ":" .. tostring(retval)
			end
		end
		mc.mcCntlSetLastError(inst, message)
	end
end

if (mc.mcInEditor() == 1) then
    m700(nil)
-- We can't test this in the editor!
end



================================================================================
[569/904] mcCntlGetLocalVarFlag
Source: mcCntlGetLocalVarFlag.htm
================================================================================

mcCntlGetLocalVarFlag
mcCntlGetLocalVarFlag
C/C++ Syntax:
int mcCntlGetLocalVarFlag(
		MINSTANCE mInst, 
		HMCVARS hVars, 
		int varNumber, 
		int *retval);
LUA Syntax:
retval, rc = mc.mcCntlGetLocalVarFlag(
		number mInst, 
		number hVars, 
		number varNumber)
Description:
Retrieve the specified local variable.
Parameters:
Parameter
Description
mInst
The controller instance.
hVars
The handle to the loacl variable stack.
varNumber
The index of the local variable flage to retrieve.
retval
An address of an integer to receive the value of the specified local variable flag.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
varNumber
is out of range or
retval
is NULL.
Notes:
This is primarily a script function.
Usage:
-- Get local variables.
function m700(hVars)
	local inst = mc.mcGetInstance() -- Get the current instance
	local nilPoundVar = mc.mcCntlGetPoundVar(inst,0)
	local message = ""
	if hVars ~= nil then
		local flag, retval, rc
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_A)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "A" .. ":" .. tostring(retval) .. ", "
			end
		end
		flag, rc = mc.mcCntlGetLocalVarFlag(inst, hVars, mc.SV_A)
		if (flag == 1) then 
			retval, rc = mc.mcCntlGetLocalVar(inst, hVars, mc.SV_B)
			if rc == mc.MERROR_NOERROR then 
				message = message .. "B" .. ":" .. tostring(retval)
			end
		end
		mc.mcCntlSetLastError(inst, message)
	end
end

if (mc.mcInEditor() == 1) then
    m700(nil)
-- We can't test this in the editor!
end



================================================================================
[570/904] mcCntlGetLogging
Source: mcCntlGetLogging.htm
================================================================================

mcCntlGetLogging
mcCntlGetLogging
C/C++ Syntax:
int mcCntlGetLogging(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcCntlGetLogging(
		number mInst)
Description:
Determine if logging is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
(enabled, The address of a BOOL to receive the logging state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
is NULL.
Notes:
None.
Usage:
// Check is logging is enabled.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcCntlGetLogging(mInst, &enabled);
if (rc == MERROR_NOERROR && enabled == TRUE) {
// Logging is enabled!
}



================================================================================
[571/904] mcCntlGetMachDir
Source: mcCntlGetMachDir.htm
================================================================================

mcCntlGetMachDir
mcCntlGetMachDir
C/C++ Syntax:
int mcCntlGetMachDir(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = int mcCntlGetMachDir(
		number mInst)
Description:
Retrieves the core installation directory.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
The address of a character buffer that recieves the core installation directory.
bufSize
The size of the receiving character buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL
Notes:
None.
Usage:
// Get the Mach core installation directory.
MINSTANCE mInst = 0;
char instDir[255];
memset(instDir, 0, sizeof(instDir);
int rc = mcCntlGetMachDir(mInst, instDir, sizeof(instDir));



================================================================================
[572/904] mcCntlGetMistDelay
Source: mcCntlGetMistDelay.htm
================================================================================

mcCntlGetMistDelay
mcCntlGetMistDelay
C/C++ Syntax:
int mcCntlGetMistDelay(
		MINSTANCE mInst, 
		double *secs);
LUA Syntax:
secs, rc = mcCntlGetMistDelay(
		number mInst)
Description:
Get the mist delay time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
an address of a double to receive the mist delay.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mist delay.
MINSTANCE mInst = 0;
double secs;
int rc = mcCntlGetMistDelay(mInst, &secs);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[573/904] mcCntlGetModalGroup
Source: mcCntlGetModalGroup.htm
================================================================================

mcCntlGetModalGroup
mcCntlGetModalGroup
C/C++ Syntax:
int mcCntlGetModalGroup(
		MINSTANCE mInst, 
		int group, 
		double *val);
LUA Syntax:
val, rc = mc.mcCntlGetModalGroup(
		number mInst, 
		number group)
Description:
Get the modal group code for the specified group.
Parameters:
Parameter
Description
mInst
The controller instance.
group
A integer specifying the modal group.
val
The address of a double to receive the modal group value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
val
is NULL or
group
is out of range.
Notes:
If the modal group is not active, -1 is returned.
Usage:
// Get the modal code for modal group 1.
MINSTANCE mInst = 0;
int rc = mcCntlGetModalGroup(mInst, 1); 
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[574/904] mcCntlGetMode
Source: mcCntlGetMode.htm
================================================================================

mcCntlGetMode
mcCntlGetMode
C/C++ Syntax:
int mcCntlGetMode(
		MINSTANCE mInst, 
		int *mode);
LUA Syntax:
mode, rc = mcCntlGetMode(
		number mInst)
Description:
Get the current controller mode.
Parameters:
Parameter
Description
mInst
The controller instance.
mode
The address of an integer to receive the control mode.  MC_MODE_MILL, MC_MODE_LATHE_DIA, MC_MODE_LATHE_RAD, MC_MODE_TANGENTIAL
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the control mode.
MINSTANCE mInst = 0;
int mode;
int rc = mcCntlGetMode(mInst, &mode);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[575/904] mcCntlGetOffset
Source: mcCntlGetOffset.htm
================================================================================

mcCntlGetOffset
mcCntlGetOffset
C/C++ Syntax:
int mcCntlGetOffset(
		MINSTANCE mInst, 
		int axisId, 
		int type, 
		double *offset);
LUA Syntax:
offset, rc = mc.mcCntlGetOffset(
		number mInst, 
		number axisId, 
		number type)
Description:
Retrieve the offset specified by type for the axis specified by axisId
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An Interger specifying the axis ID. (X_AXIS, Y_AXIS, Z_AXIS)
type
An Interger specifying the offset type. (MC_OFFSET_FIXTURE, MC_OFFSET_AXIS
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[576/904] mcCntlGetOptionalStop
Source: mcCntlGetOptionalStop.htm
================================================================================

mcCntlGetOptionalStop
mcCntlGetOptionalStop
C/C++ Syntax:
int mcCntlGetOptionalStop(
		MINSTANCE mInst, 
		BOOL *stop);
LUA Syntax:
stop, rc = mc.mcCntlGetOptionalStop(
		number mInst)
Description:
Retrieve the state of optional stop.
Parameters:
Parameter
Description
mInst
The controller instance.
stop
The address of a BOOL to contain the optional stop state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stop
is NULL.
Notes:
None.
Usage:
// See if optional stop is in effect.
MINSTANCE mInst = 0;
BOOL opStop = FALSE;
int rc = mcCntlGetOptionalStop(mInst, &opStop);
if (rc == MERROR_NOERROR) {
	if (opStop == TRUE) {
// Optional Stop is in effect!
	} else {
// Optional Stop is not in effect!
	}
}



================================================================================
[577/904] mcCntlGetPoundVar
Source: mcCntlGetPoundVar.htm
================================================================================

mcCntlGetPoundVar
mcCntlGetPoundVar
C/C++ Syntax:
int mcCntlGetPoundVar(
		MINSTANCE mInst, 
		int param, 
		double *value);
LUA Syntax:
value, rc = mc.mcCntlGetPoundVar(
		number mInst, 
		number param)
Description:
Get the value of a system variable (pound variable).
Parameters:
Parameter
Description
mInst
The controller instance.
param
An integer specifying a system variable.
*value
The address of a double to receive the value of the system variable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
param
is out of range.
Notes:
This is a good tool to assist in debugging G code files with system variable (pound variable) programing.
Note that system variables can reflect values in the future because of the look ahead buffer.
Usage:
int mInst=0;
double PoundVar=50;
dobule Value=0;
;// Get the value of #50.
mcCntlGetPoundVar(mInst, PoundVar, &Value);



================================================================================
[578/904] mcCntlGetRRO
Source: mcCntlGetRRO.htm
================================================================================

mcCntlGetRRO
mcCntlGetRRO
C/C++ Syntax:
int mcCntlGetRRO(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcCntlGetRRO(
		number mInst)
Description:
Get the current Feed Rate Override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The Address of a double to receive the rapid rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the current RRO
MINSTANCE mInst = 0;
double rro;
int rc = mcCntlGetRRO(mInst, &rro);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[579/904] mcCntlGetRunTime
Source: mcCntlGetRunTime.htm
================================================================================

mcCntlGetRunTime
mcCntlGetRunTime
C/C++ Syntax:
int mcCntlGetRunTime(
		MINSTANCE mInst, 
		double *time);
LUA Syntax:
int mcCntlGetRunTime(MINSTANCE mInst, double *time)
Description:
Get the control run time in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
time
The address of a double to receive the run time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
time
is NULL.
Notes:
None.
Usage:
// Get the control run time in seconds.
MINSTANCE mInst = 0;
double time;
int rc = mcCntlGetRunTime(mInst, &time);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[580/904] mcCntlGetSingleBlock
Source: mcCntlGetSingleBlock.htm
================================================================================

mcCntlGetSingleBlock
mcCntlGetSingleBlock
C/C++ Syntax:
int mcCntlGetSingleBlock(
		MINSTANCE mInst, 
		BOOL *sbState);
LUA Syntax:
sbState, rc = mc.mcCntlGetSingleBlock(
		number mInst)
Description:
Get the state of Single block.
Parameters:
Parameter
Description
mInst
The controller instance.
sbState
The address of a BOOL to receive the state of single block. (MC_ON/TRUE, MC_OFF/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sbState
is NULL.
Notes:
Used to display the state of single block to the user.
Usage:
// Get the state of single block.
int mInst=0;
BOOL IsOn = FALSE;
mcCntlGetSingleBlock(mInst, &IsOn);



================================================================================
[581/904] mcCntlGetState
Source: mcCntlGetState.htm
================================================================================

mcCntlGetState
mcCntlGetState
C/C++ Syntax:
int mcCntlGetState(
		MINSTANCE mInst, 
		mcState *state);
LUA Syntax:
mcState, rc = mc.mcCntlGetState(
		MINSTANCE mInst)
Description:
Get the current controller state.
Parameters:
Parameter
Description
mInst
The controller instance.
state
The address of a mcState variable to receive the controller state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
state
is NULL.
Notes:
None.
Usage:
// Get the state of controller instance 0.
MINSTANCE mInst = 0;
mcState state;
char stateName[80];
int rc =
mcCntlGetState(mInst, &state)
;
if (rc == MERROR_NOERROR) {
// Success!
rc = mcCntlGetStateName(mInst, state, stateName, sizeof(stateName));
}



================================================================================
[582/904] mcCntlGetStateName
Source: mcCntlGetStateName.htm
================================================================================

mcCntlGetStateName
mcCntlGetStateName
C/C++ Syntax:
int mcCntlGetStateName(
		MINSTANCE mInst, 
		mcState state, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetStateName(
		number mInst, 
		number state)
Description:
Retrieve the state name for the given mcState.
Parameters:
Parameter
Description
mInst
The controller instance.
state
A mcState variable specifying the state.
buf
A string buffer to receive the state name..
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufSize
is less than or equal to zero.
MERROR_INVALID_STATE
state
is out of range.
Notes:
None.
Usage:
// Get the state name for controller instance 0.
MINSTANCE mInst = 0;
mcState state;
char stateName[80];
int rc = mcCntlGetState(mInst, &state);
if (rc == MERROR_NOERROR) {
// Success!
rc =
mcCntlGetStateName(mInst, state, stateName, sizeof(stateName))
;
}



================================================================================
[583/904] mcCntlGetStats
Source: mcCntlGetStats.htm
================================================================================

mcCntlGetStats
mcCntlGetStats
C/C++ Syntax:
int mcCntlGetStats(
		MINSTANCE mInst, 
		mstats_t *stats);
LUA Syntax:
N/A
Description:
Retrieve the control statistics.
Parameters:
Parameter
Description
mInst
The controller instance.
stats
The address of a mstats_t variable to receive the statistics.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stats
is NULL.
Notes:
struct mstats {
	int cannon_buf_depth;
	int la_cannon_buf_depth;
	double totalTime;
	double sessionTime;
	double spindleTime;
	long m3count;
	long m4count;
	long m6count;
	double xDistance;
	double yDistance;
	double zDistance;
	double aDistance;
	double bDistance;
	double cDistance;
};
typedef struct mstats mstats_t;
Usage:
// Get controller statistics.
MINSTANCE mInst = 0;
mstats_t stats;
int rc = mcCntlGetStats(mInst, &stats);
if (rc == MERROR_NOERROR) {
	printf("M3 count = %dn", stats.m3Count);
}



================================================================================
[584/904] mcCntlGetToolOffset
Source: mcCntlGetToolOffset.htm
================================================================================

mcCntlGetToolOffset
mcCntlGetToolOffset
C/C++ Syntax:
int mcCntlGetToolOffset(
		MINSTANCE mInst, 
		int axisId, 
		double *offset);
LUA Syntax:
offset, rc = mc.mcCntlGetToolOffset(
		number mInst, 
		number axisId)
Description:
Get the tool offset distance for the specified axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
offset
The address of a double that receives the offset distance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
offset
is NULL.
Notes:
None
Usage:
int mInst=0;
int toolnum = 5;
double val = 0;
mcCntlGetToolOffset(mInst, Z_AXIS, &val);
// Get the tool offset distance for the Z axis..



================================================================================
[585/904] mcCntlGetUnitsCurrent
Source: mcCntlGetUnitsCurrent.htm
================================================================================

mcCntlGetUnitsCurrent
mcCntlGetUnitsCurrent
C/C++ Syntax:
int mcCntlGetUnitsCurrent(
		MINSTANCE mInst, 
		int *units);
LUA Syntax:
units, rc = mc.mcCntlGetUnitsCurrent(
		number mInst)
Description:
Get the current machine units.
Parameters:
Parameter
Description
mInst
The controller instance.
units
The address of an integer to receive the current machine units.  (200 = inches
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
units
is NULL.
Notes:
None.
Usage:
// Get the current machine units.
MINSTANCE mInst = 0;
int units;
int rc = mcCntlGetUnitsCurrent(mInst, &units);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[586/904] mcCntlGetUnitsDefault
Source: mcCntlGetUnitsDefault.htm
================================================================================

mcCntlGetUnitsDefault
mcCntlGetUnitsDefault
C/C++ Syntax:
int mcCntlGetUnitsDefault(
		MINSTANCE mInst, 
		int *units);
LUA Syntax:
units, rc = mc.mcCntlGetUnitsDefault(
		number mInst)
Description:
Get the default machine units.
Parameters:
Parameter
Description
mInst
The controller instance.
units
The address of an integer to receive the default machine units.  (200 = inches
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
units
is NULL.
Notes:
None.
Usage:
// Get the default machine units.
MINSTANCE mInst = 0;
int units;
int rc = mcCntlGetUnitsDefault(mInst, &units);
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[587/904] mcCntlGetValue
Source: mcCntlGetValue.htm
================================================================================

mcCntlGetValue
mcCntlGetValue
C/C++ Syntax:
int mcCntlGetValue(
		MINSTANCE  mInst, 
		int valId, 
		int param, 
		double *value);
LUA Syntax:
value, rc = mc.mcCntlGetValue(
		number mInst, 
		number valId, 
		number param)
Description:
Get the value of a core variable.
Parameters:
Parameter
Description
mInst
The controller instance.
valId
An integer specifying the core variable (VAL_ prefix in MachAPI.h).
param
An integer specifying the parameter for the core variable
value
The address of a double to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The value specified by
valId
is not implemented.
various
Depending upon the value specified by
valId
.
Notes:
This is for ArtSoft's use.  It is a generic interface for retrieving values from the core.  Use of this API function is dicouraged in favor of using one of the clearly named API calls to retrieve values for GUI and plugin programming.
Usage:
int mInst = 0;
int motor = 1;
double value = 0;
// Get the motor velocity of motor1.
int rc = mcCntlGetValue(mInst, VAL_MOTOR_VEL, motor, &value);



================================================================================
[588/904] mcCntlGetVersion
Source: mcCntlGetVersion.htm
================================================================================

mcCntlGetVersion
mcCntlGetVersion
C/C++ Syntax:
int mcCntlGetVersion(
		MINSTANCE mInst, 
		char *buf, 
		size_t bufSize);
LUA Syntax:
buf, rc = mc.mcCntlGetVersion(
		number mInst)
Description:
Retrieve the core version string.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to recevive the core version string.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufSize
is 0.
Notes:
None.
Usage:
// Get the core version string.
MINSTANCE mInst = 0;
char ver[80];
int rc = mcCntlGetVersion(mInst, ver, sizeof(ver)):
if (rc == MERROR_NOERROR) {
	printf("The core version is %sn", ver);
}



================================================================================
[589/904] mcCntlGotoZero
Source: mcCntlGotoZero.htm
================================================================================

mcCntlGotoZero
mcCntlGotoZero
C/C++ Syntax:
int mcCntlGotoZero(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlGotoZero(
		number mInst)
Description:
Move the X,Y,A,B,C and then the Z axis to zero of the current fixture offset.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This can also be done by sending in a G code move.
Usage:
int mInst = 0;
mcCntlGotoZero(mInst);
// Move controller instance 0 to x,y,z,a,b,c zero.



================================================================================
[590/904] mcCntlInit
Source: mcCntlInit.htm
================================================================================

mcCntlInit
mcCntlInit
C/C++ Syntax:
MINSTANCE mcCntlInit(
		const char *ProfileName, 
		int ControllerID);
LUA Syntax:
N/A
Description:
Init the instance specified by
ControllerID
with the profile specified by
ProfileName
.
Parameters:
Parameter
Description
ProfileName
Profile that is to be loaded for the controller instance.
ControllerID
The controller instance to start. (must start with zero)
Returns:
Return Code
Description
The controller instance.
0 to 5
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
MACHINIT_INVALID_ARG
ProfileName
is NULL.
MACHINIT_CONTROLLER_INUSE
The controller instance is in use, try the next one.
Notes:
Only GUIs will use this API function.  It must be called at the start of the app to initialize at least one controller instance.  All other API calls will fail with MERROR_INVALID_INSTANCE until an instance is initialized with mcCntlInit().
Usage:
MINSTANCE mInst;
mInst = mcCntlInit("Mach4Mill", mInst);
if (mInst >= 0) {
// A valid instance has been initialized!
}



================================================================================
[591/904] mcCntlIsInCycle
Source: mcCntlIsInCycle.htm
================================================================================

mcCntlIsInCycle
mcCntlIsInCycle
C/C++ Syntax:
int mcCntlIsInCycle(
		MINSTANCE mInst, 
		BOOL *cycle);
LUA Syntax:
cycle, rc = mc.mcCntlIsInCycle(
		number mInst)
Description:
Used to see if a G code file is running.
Parameters:
Parameter
Description
mInst
The controller instance.
cycle
The address of a BOOL to receive the in cycle state (TRUE, FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
cycle
is NULL.
Notes:
This call is useful for showing the user if the control is processing a G code file.
Usage:
int mInst = 0;
BOOL InCycle = FALSE;
bool RunningFile = false;

int rc = mcCntlIsInCycle(mInst, &InCycle);
// See if a G code file is running.
if(rc == MERROR_NOERROR && InCycle == TRUE){
    RunningFile = true;
}



================================================================================
[592/904] mcCntlIsStill
Source: mcCntlIsStill.htm
================================================================================

mcCntlIsStill
mcCntlIsStill
C/C++ Syntax:
int mcCntlIsStill(
		MINSTANCE mInst, 
		BOOL *still);
LUA Syntax:
still, rc = mc.mcCntlIsStill(
		number mInst)
Description:
Determine if all controlled axes are still.
Parameters:
Parameter
Description
mInst
The controller instance.
still
The address of a BOOL to receive the still state of the control.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
still
is NULL.
Notes:
This function cannot be used to determine if the control is finished processing G code.  For example, the call may return TRUE if the control is in a dwell (G04).
Usage:
// See if the control axes are still.
MINSTANCE mInst = 0;
BOOL still;
int rc = mcCntlIsStill(mInst, &still);
if (rc == MERROR_NOERROR) {
	if (still == TRUE) {
// All axes are still.
} else {
// At least one axis is moving!
}
}



================================================================================
[593/904] mcCntlLoadGcodeFile
Source: mcCntlLoadGcodeFile.htm
================================================================================

mcCntlLoadGcodeFile
mcCntlLoadGcodeFile
C/C++ Syntax:
int mcCntlLoadGcodeFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcCntlLoadGcodeFile(
		number mInst, 
		stringFileToLoad)
Description:
Load a G code file.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer containing the Gcode file name.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
FileToLoad
is NULL.
MERROR_FILE_EXCEPTION
Exception while loading file.
MERROR_FILE_EMPTY
No data a in file.
MERROR_FILE_SHARING
Violation sharing file.
MERROR_FILE_INVALID
Not a valid file type.
MERROR_FILE_BADSIZE
Invalid file size (over 1.5GB).
MERROR_FILE_NOT_FOUND
The file cannot be found in the file system.
MERROR_FILE_BADFORMAT
The file had a line end without a new line character.  The file may be incomplete.
Notes:
Used to load a file into a controller instance.
Usage:
int mInst=0;
char File[128] = "C:SomeGocdefile.tap";
int rc = mcCntlLoadGcodeFile(mInst, &char);
// Load SomeGocdefile.tap file.
if (rc == MERROR_NOERROR) {
// Success!
}



================================================================================
[594/904] mcCntlLoadGcodeString
Source: mcCntlLoadGcodeString.htm
================================================================================

mcCntlLoadGcodeString
mcCntlLoadGcodeString
C/C++ Syntax:
int mcCntlLoadGcodeString(
		MINSTANCE mInst, 
		const char *gCode);
LUA Syntax:
rc = mc.mcCntlLoadGcodeString(
		MINSTANCE mInst, 
		const char *gCode);
Description:
Loads G code from a string.
Parameters:
Parameter
Description
mInst
The controller instance.
gCode
A string buffer containing G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
gCode
is NULL.
Notes:
This function will load G code from a string instead of a file. It is primarily used for static test or repeating operations.
Usage:
// Load G code from a string.
MINSTANCE mInst = 0;
char *gCode = "%nO1001nG90 G94 G91.1 G40 G49 G17nG20"
int rc = mcCntlLoadGcodeString(mInst, gCode);



================================================================================
[595/904] mcCntlLog
Source: mcCntlLog.htm
================================================================================

mcCntlLog
mcCntlLog
C/C++ Syntax:
int mcCntlLog(
	MINSTANCE mInst, 
	const char *message, 
	const char *file, 
	int line);
LUA Syntax:
rc = mc.mcCntlLog(
	number mInst, 
	string message, 
	string file, 
	number line)
Description:
Log a message to the core log.
Parameters:
Parameter
Description
mInst
The controller instance.
message
A string buffer containing the message to be logged.
file
A string buffer specifying the source file name.
line
An integer specifying the source line number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Logging must be enabled with mcCntlSetLogging() in order for the messages to show in the diagnostic log.
If
file
is NULL, no source file or line information is dispalyed in the log for C/C++ environments.  If
line
is -1, no source file or line information is dispalyed in the log for scripting environments.
Usage:
// Load G code from a string.
MINSTANCE mInst = 0;
BOOL test = TRUE;
int rc;
if (test == TRUE) {
// File and line info in the log.
mcCntlLog(mInst, "test == TRUE!", __FILE__, __LINE__);
} else {
// No file and line info in the log.
mcCntlLog(mInst, "test == FALSE!", NULL, 0);
}



================================================================================
[596/904] mcCntlMachineStateClear
Source: mcCntlMachineStateClear.htm
================================================================================

mcCntlMachineStateClear
mcCntlMachineStateClear
C/C++ Syntax:
int mcCntlMachineStateClear(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStateClear(
		number mInst)
Description:
Clears the machine control state stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to clear a stack of control states and is primarily used in a scripting environment.  Control states are pushed on a stack with mcCntlMachineStatePush().
Usage:
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- clear the machine state stack and leave the machine in G21 and G91 modes.
mc.mcCntlMachineStateClear(inst); 
end



================================================================================
[597/904] mcCntlMachineStatePop
Source: mcCntlMachineStatePop.htm
================================================================================

mcCntlMachineStatePop
mcCntlMachineStatePop
C/C++ Syntax:
int mcCntlMachineStatePop(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStatePop(
		number mInst)
Description:
Pops a machine control state off the stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to return the control to a state previously saved on the state stack and is primarily used in a scripting environment.  Control states are pushed (saved) on a stack with mcCntlMachineStatePush().
Usage:
-- LUA example
function test()
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack saving original modes.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- restore the machine state stack to G20 and G90 modes.
mc.mcCntlMachineStatePop(inst);
-- restore the machine state stack to original modes.
mc.mcCntlMachineStatePop(inst); 
end



================================================================================
[598/904] mcCntlMachineStatePush
Source: mcCntlMachineStatePush.htm
================================================================================

mcCntlMachineStatePush
mcCntlMachineStatePush
C/C++ Syntax:
int mcCntlMachineStatePush(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlMachineStatePush(
		number mInst)
Description:
Pushes the machine control state on the stack.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is used to save the control state to a stack of states and is primarily used in a scripting environment.
Usage:
-- LUA example
function test()
	local inst = mc.mcGetInstance();
-- push control state to the stack saving original modes.
mc.mcCntlMachineStatePush(inst);
-- put machine in G20, and G90 mode.
mc.mcCntlGcodeExecuteWait(inst, "G20nG90");
-- push control state to the stack.
mc.mcCntlMachineStatePush(inst);
-- put machine in G21, and G91 mode.
mc.mcCntlGcodeExecuteWait(inst, "G21nG91");
-- restore the machine state stack to G20 and G90 modes.
mc.mcCntlMachineStatePop(inst);
-- restore the machine state stack to original modes.
mc.mcCntlMachineStatePop(inst); 
end



================================================================================
[599/904] mcCntlMacroAlarm
Source: mcCntlMacroAlarm.htm
================================================================================

mcCntlMacroAlarm
mcCntlMacroAlarm
C/C++ Syntax:
int mcCntlMacroAlarm(
		MINSTANCE mInst
		int error, 
		const char *message);
LUA Syntax:
rc = mc.mcCntlMacroAlarm(
		number mInst
		number error
		string message)
Description:
Forces the control into the ALARM state similar to writing a number to #3000.
Parameters:
Parameter
Description
mInst
The controller instance.
error
The error number.
message
The error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
message
is NULL.
Notes:
This function is used to put the control in the ALARM state.  OSIG_ALARM will be raised and the control will have to be reset to clear the ALARM condition.  This is primarily a scripting function.
Usage:
-- LUA example
function test()
    local inst = mc.mcGetInstance();
    mc.mcCntlMacroAlarm(inst, 19, "Test Alram")
end



================================================================================
[600/904] mcCntlMacroStop
Source: mcCntlMacroStop.htm
================================================================================

mcCntlMacroStop
mcCntlMacroStop
C/C++ Syntax:
int mcCntlMacroStop(
		MINSTANCE mInst
		int error, 
		const char *message);
LUA Syntax:
rc = mc.mcCntlMacroStop(
		number mInst
		number error
		string message)
Description:
Forces the control into the IDLE state similar to writing a number to #3006.
Parameters:
Parameter
Description
mInst
The controller instance.
error
The error number.
message
The error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
message
is NULL.
Notes:
This function is used to put the control in the IDLE state.  This is primarily a scripting function.
Usage:
-- LUA example
function test()
    local inst = mc.mcGetInstance();
    mc.mcCntlMacroStop(inst, 19, "Test Stop")
end



================================================================================
[601/904] mcCntlMdiExecute
Source: mcCntlMdiExecute.htm
================================================================================

mcCntlMdiExecute
mcCntlMdiExecute
C/C++ Syntax:
int mcCntlMdiExecute(
		MINSTANCE mInst,
		const char *commands);
LUA Syntax:
rc = mc.mcCntlMdiExecute(
		number mInst,
		string commands)
Description:
Used to execute G code commands that are not part of the main G code execution.
Parameters:
Parameter
Description
mInst
The controller instance.
commands
A string buffer with the line or lines of Gcode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
commands
is NULL.
Notes:
Used to run commands like MDI or script commands.  The function returns immediately without waiting on the G code to proocess.  It is an error to call this function multiple times for each block of G code.   Multiple blocks should be concatenated and separated with new line characters to form a "unit of work".
Usage:
MINSTANCE mInst = 0;
int rc;
// Move the machine back to xy then z zero.
// Correct example.
rc = mcCntlMdiExecute(mInst, "G00 G90 X0.0 Y0.0\nZ0.0");
// Incorrect example.
rc = mcCntlMdiExecute(mInst, "G00 G90 X0.0 Y0.0");
rc = mcCntlMdiExecute(mInst, "Z0.0");



================================================================================
[602/904] mcCntlProbeFileClose
Source: mcCntlProbeFileClose.htm
================================================================================

mcCntlProbeFileClose
mcCntlProbeFileClose
C/C++ Syntax:
int mcCntlProbeFileClose(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlProbeFileClose(
		number mInst)
Description:
Close the probe data file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Closes a probe data file that was previously opened with mcCntlProbeFileOpen().  This function is primarily used in a scripting environment.
Usage:
-- probe file close LUA macro example.
function m112()
	local inst=mc.mcGetInstance();
	local rc = mc.mcCntlProbeFileClose(inst);
end 

if (mc.mcInEditor() == 1) then
	m112()
end



================================================================================
[603/904] mcCntlProbeFileOpen
Source: mcCntlProbeFileOpen.htm
================================================================================

mcCntlProbeFileOpen
mcCntlProbeFileOpen
C/C++ Syntax:
int mcCntlProbeFileOpen(
		MINSTANCE mInst, 
		const char *fileName, 
		const char *format, 
		BOOL overWrite);
LUA Syntax:
rc = mc.mcCntlProbeFileOpen(
		number mInst, 
		string fileName, 
		string format, 
		number overWrite);
Description:
Open a probe data collection file.
Parameters:
Parameter
Description
mInst
The controller instance.
fileName
A string buffer containing the full path of the probe data file to be opened.
format
A string buffer containing the format description for the probe data file.
overWrite
A BOOL specifying if the file should be over written if it exists.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Opens a probe data collection file and specifies the format in which the data is saved.  This function is primarily used in a scripting environment.
The
format
parameter uses subtitutions.  Numbers are formatted with the C/C++ printf style notation.  Axis values are substituted with AXIS_X, AXIS_Y, AXIS_Z, AXIS_A, AXIS_B, and AXIS_C.
Usage:
-- probe file open LUA macro example.
function m111()
	local inst = mc.mcGetInstance();
	local rc = mc.mcCntlProbeFileOpen(inst, 'probetest.csv', '%.4AXIS_X, %.4AXIS_Y,  %.4AXIS_Z\r\n', TRUE);
end 

if (mc.mcInEditor() == 1) then
	m111()
end



================================================================================
[604/904] mcCntlProbeGetStrikeStatus
Source: mcCntlProbeGetStrikeStatus.htm
================================================================================

mcCntlProbeGetStrikeStatus
mcCntlProbeGetStrikeStatus
C/C++ Syntax:
int mcCntlProbeGetStrikeStatus(
		MINSTANCE mInst, 
		BOOL *didStrike);
LUA Syntax:
didstrike, rc = mc.mcCntlProbeGetStrikeStatus(
		number mInst)
Description:
Check and see if a probe struck during a probing move.
Parameters:
Parameter
Description
mInst
The controller instance.
didStrike
The address of a BOOL to receive the probe strike status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
didStrike
is NULL.
Notes:
Determine if the probe struck during a probe move.  This function is primarily used in a scripting environment.  Any G31, G31.1, G31.2, or G31.3 will reset the strike status to FALSE.  The status will only be set to TRUE if the probe struck a surface.
Usage:
-- probe get strike status example.
local inst = mc.mcGetInstance()
local didStrike, rc = mc.mcCntlProbeGetStrikeStatus(inst)



================================================================================
[605/904] mcCntlReset
Source: mcCntlReset.htm
================================================================================

mcCntlReset
mcCntlReset
C/C++ Syntax:
int mcCntlReset(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlReset(
		number mInst)
Description:
Reset the controller instance to a known state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
A MSG_RESET_CNTL notification is sent to the GUI and plugins.
Usage:
MINSTANCE mInst = 0;
mcCntlReset(mInst);
// Reset controller instance 0.



================================================================================
[606/904] mcCntlRewindFile
Source: mcCntlRewindFile.htm
================================================================================

mcCntlRewindFile
mcCntlRewindFile
C/C++ Syntax:
int mcCntlRewindFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlRewindFile(
		number mInst)
Description:
Rewind the G code file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The G code file is running and not allowing a rewind.
Notes:
A MSG_REWIND_FILE notification is sent to the GUI and plugins.
Usage:
MINSTANCE mInst = 0;
mcCntlRewindFile(mInst);
// Rewind controller 0's Gcode file.



================================================================================
[607/904] mcCntlSetBlockDelete
Source: mcCntlSetBlockDelete.htm
================================================================================

mcCntlSetBlockDelete
mcCntlSetBlockDelete
C/C++ Syntax:
int mcCntlSetBlockDelete(
		MINSTANCE mInst, 
		int deleteID, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcCntlSetBlockDelete(
		number mInst, 
		number deleteID, 
		number enabled)
Description:
Enable or Disable a block delete level.
Parameters:
Parameter
Description
mInst
The controller instance.
deleteId
The block delete index level.
enabled
A BOOL specifying if the lock delete level is enabled. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
deleteID
is out of range.
Notes:
There are currently 10 block delete levels (0-9).  If any block delete level is enabled, the OSIG_BLOCK_DELETE output signal is asserted.
Usage:
MINSTANCE mInst = 0;
// Enable block delete level 0.
mcCntlSetBlockDelete(mInst, 0, TRUE);



================================================================================
[608/904] mcCntlSetCoolantDelay
Source: mcCntlSetCoolantDelay.htm
================================================================================

mcCntlSetCoolantDelay
mcCntlSetCoolantDelay
C/C++ Syntax:
int mcCntlSetCoolantDelay(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
rc = mc.mcCntlSetCoolantDelay(
		number mInst, 
		number secs);
Description:
Set the coolant delay in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
seconds
A double specifying the delay in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Seconds can be a decimal value.  e.g. .5 for half of a second.
Usage:
// Set 3/4 second coolant delay.
MINSTANCE mInst = 0;
int rc = mcCntlSetCoolantDelay(mInst, .750);



================================================================================
[609/904] mcCntlSetDiaMode
Source: mcCntlSetDiaMode.htm
================================================================================

mcCntlSetDiaMode
mcCntlSetDiaMode
C/C++ Syntax:
int mcCntlSetDiaMode(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetDiaMode(
		number mInst, 
		number enable);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the siameter mode state.  (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is only valid when the control is in lathe mode.
Usage:
// Enable diamter mode
MINSTANCE mInst = 0;
int rc = mcCntlSetDiaMode(mInst, TRUE);



================================================================================
[610/904] mcCntlSetEnableFRO
Source: mcCntlSetEnableFRO.htm
================================================================================

mcCntlSetEnableFRO
mcCntlSetEnableFRO
C/C++ Syntax:
int mcCntlSetEnableFRO(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetEnableFRO(
		number mInst, 
		number enable);
Description:
Set whether feed rate override is allowed (enabled).
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying if feed rate override is enabled.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Enable feed rate override
MINSTANCE mInst = 0;
int rc = mcCntlSetEnableFRO(mInst, TRUE);



================================================================================
[611/904] mcCntlSetFRO
Source: mcCntlSetFRO.htm
================================================================================

mcCntlSetFRO
mcCntlSetFRO
C/C++ Syntax:
int mcCntlSetFRO(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcCntlSetFRO(
		number mInst, 
		number percent);
Description:
Set the feed rate override by the percentage of the coded feed rate.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the feed rate override percent.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Set feed rate override to 150%
MINSTANCE mInst = 0;
int rc = mcCntlSetFRO(mInst, 150.0);



================================================================================
[612/904] mcCntlSetGcodeLineNbr
Source: mcCntlSetGcodeLineNbr.htm
================================================================================

mcCntlSetGcodeLineNbr
mcCntlSetGcodeLineNbr
C/C++ Syntax:
int mcCntlSetGcodeLineNbr(
		MINSTANCE mInst, 
		double line);
Description:
Set the Gcode line number to run / start.
Parameters:
Parameter
Description
mInst
The controller instance.
line
Sets the current line in the Gcode file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This will not update the running state engine so great care should be used when setting the line.
Do not set the line when processing G code.
Calling this function sends MSG_GCODE_LINE to the GUI and plugins.
The parameter
line
is base 1.
Usage:
int mInst=0;
mcCntlSetGcodeLineNbr(mInst, 10);
// Set the Gcode file to be at line 10.



================================================================================
[613/904] mcCntlSetLastError
Source: mcCntlSetLastError.htm
================================================================================

mcCntlSetLastError
mcCntlSetLastError
C/C++ Syntax:
int mcCntlSetLastError(
		MINSTANCE mInst, 
		const char *emsg);
LUA Syntax:
rc = mc.mcCntlSetLastError(
		number mInst, 
		string emsg)
Description:
Sets the last error in the error stack.
Parameters:
Parameter
Description
mInst
The controller instance.
emsg
A string buffer with the error message.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The error sent may not be seen by the user if the caller of mcGetLastError() is not showing the last errors.
Usage:
MINSTANCE mInst = 0;
char *erbuf = "Tool no longer in the spindle";
// Send an error messge for controller 0.
int rc = mcCntlSetLastError(mInst, erbuf);



================================================================================
[614/904] mcCntlSetLogging
Source: mcCntlSetLogging.htm
================================================================================

mcCntlSetLogging
mcCntlSetLogging
C/C++ Syntax:
int mcCntlSetLogging(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetLogging(
		number mInst, 
		number enable)
Description:
Enable or disable the log facility.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of the logging facility.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Enable logging.
MINSTANCE mInst = 0;
int rc = mcCntlSetLogging(mInst, enable);



================================================================================
[615/904] mcCntlSetMistDelay
Source: mcCntlSetMistDelay.htm
================================================================================

mcCntlSetMistDelay
mcCntlSetMistDelay
C/C++ Syntax:
int mcCntlSetMistDelay(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
rc = mc.mcCntlSetMistDelay(
		number mInst, 
		number secs);
Description:
Set the delay for the mist coolant in seconds.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
A double specifying the delay in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Decimal values are allowed.  e.g. .5 is 1/2 of a second.
Usage:
// Set the mist delay to 3/4 of a second.
MINSTANCE mInst = 0;
int rc = mcCntlSetMistDelay(mInst, .750);



================================================================================
[616/904] mcCntlSetMode
Source: mcCntlSetMode.htm
================================================================================

mcCntlSetMode
mcCntlSetMode
C/C++ Syntax:
int mcCntlSetMode(
		MINSTANCE mInst, 
		double mode);
LUA Syntax:
rc = mc.mcCntlSetMode(
		number mInst, 
		number mode)
Description:
Set the interpreter mode of the controller instance.
Parameters:
Parameter
Description
mInst
The controller instance.
mode
the interpreter mode of the controller. (MC_MODE_MILL, MC_MODE_LATHE_DIA, MC_MODE_LATHE_RAD, MC_MODE_TANGENTIAL)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The core needs to be restarted if the mode is changed.
Usage:
// Set the interpreter mode to Lathe Diameter.
MINSTANCE mInst = 0;
int rc = mcCntlSetMode(mInst, MC_MODE_LATHE_DIA);



================================================================================
[617/904] mcCntlSetOptionalStop
Source: mcCntlSetOptionalStop.htm
================================================================================

mcCntlSetOptionalStop
mcCntlSetOptionalStop
C/C++ Syntax:
int mcCntlSetOptionalStop(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcCntlSetOptionalStop(
		number mInst
		number enable)
Description:
Set the state of optional stop.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of optional stop. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The output signal OSIG_OPT_STOP reflects the state of optional stop.
Usage:
// Enable optional stop.
MINSTANCE mInst = 0;
int rc = mcCntlSetOptionalStop(mInst, TRUE);



================================================================================
[618/904] mcCntlSetPoundVar
Source: mcCntlSetPoundVar.htm
================================================================================

mcCntlSetPoundVar
mcCntlSetPoundVar
C/C++ Syntax:
mcCntlSetPoundVar(
		MINSTANCE mInst, 
		int param, 
		double value);
LUA Syntax:
mcCntlSetPoundVar(
		number mInst, 
		number param, 
		number value)
Description:
Set the value of a system variable (pound variable).
Parameters:
Parameter
Description
mInst
The controller instance.
param
system variable index.
value
The value to apply to the system variable (pound variable).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
param
is out of range.
Notes:
This function should only be used when G code is not processing.
Usage:
MINSTANCE mInst = 0;
int PoundVar = 50;
dobule Value=21;
// Set the value of #50 to 21.
int rc = mcCntlSetPoundVar(mInst, PoundVar, Value);



================================================================================
[619/904] mcCntlSetRRO
Source: mcCntlSetRRO.htm
================================================================================

mcCntlSetRRO
mcCntlSetRRO
C/C++ Syntax:
int mcCntlSetRRO(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcCntlSetRRO(
		number mInst, 
		number percent);
Description:
Set the rapid rate override by the percentage of maxiumum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the rapid rate override percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The maximum velocity is capped by the motor tuning.  Therefore the percentage should be less than 100%.
Usage:
// Set feed rapid override to 50%
MINSTANCE mInst = 0;
int rc = mcCntlSetRRO(mInst, 50.0);



================================================================================
[620/904] mcCntlSetResetCodes
Source: mcCntlSetResetCodes.htm
================================================================================

mcCntlSetResetCodes
mcCntlSetResetCodes
C/C++ Syntax:
int mcCntlSetResetCodes(
		MINSTANCE mInst, 
		const char *resetCodes);
LUA Syntax:
rc = mc.mcCntlSetResetCodes(
		number mInst, 
		string resetCodes)
Description:
Set the G code that is used when mcCntlReset() is called.
Parameters:
Parameter
Description
mInst
The controller instance.
resetCodes
A string buffer containing the G code.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Each block needs to be separated with new line characters (\n).
Usage:
// Set the G code used to reset the controller instance 0.
MINSTANCE mInst = 0;
int rc = mcCntlSetResetCodes(mInst, "G40 G20 G90 G52 X0 Y0 Z0\nG92.1 G69");



================================================================================
[621/904] mcCntlSetSingleBlock
Source: mcCntlSetSingleBlock.htm
================================================================================

mcCntlSetSingleBlock
mcCntlSetSingleBlock
C/C++ Syntax:
int mcCntlSetSingleBlock(
		MINSTANCE mInst, 
		BOOL enable);
Description:
Set the state of single block mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of single block mode. (TRUE/FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Single block runs one line of G code at a time and is most often used to debug G code programs.
Usage:
// Enable single block mode.
MINSTANCE mInst = 0;
mcCntlSetSingleBlock(mInst, TRUE);



================================================================================
[622/904] mcCntlSetStats
Source: mcCntlSetStats.htm
================================================================================

mcCntlSetStats
mcCntlSetStats
C/C++ Syntax:
int mcCntlSetStats(
		MINSTANCE mInst, 
		mstats_t *stats);
LUA Syntax:
N/A
Description:
Set/reset the machine statistics.
Parameters:
Parameter
Description
mInst
The controller instance.
(stats, The address of a mstats_t struct with which to set the control statistics.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
stats
is NULL.
Notes:
Usage:
//
MINSTANCE mInst = 0;



================================================================================
[623/904] mcCntlSetValue
Source: mcCntlSetValue.htm
================================================================================

mcCntlSetValue
mcCntlSetValue
C/C++ Syntax:
int mcCntlSetValue(
		MINSTANCE  mInst, 
		int valId, 
		int param, 
		double value);
LUA Syntax:
rc = mc.mcCntlSetValue(
		number mInst, 
		number valId, 
		number param, 
		number value)
Description:
Set the value of a control variable.
Parameters:
Parameter
Description
mInst
The controller instance.
valId
The control variable to set (VAL_ prefix in MachAPI.h).
param
The parameter for the control value (or 0).
value
The new value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The value specified by
valId
is not implemented.
Various
Depending upon
valId
.
Notes:
This function is used by Artsoft to add control values to the core on a per OEM basis.  Use of this function is discouraged in favor of using the more clearly named API functions for GUI and plugin programming.
Usage:
MINSTANCE mInst = 0;
int motor = 1;
value=1000.0;
// Set the Velocity of the motor to 1000.0 .
in rc = mcCntlSetValue(mInst, VAL_MOTOR_VEL, motor, value);



================================================================================
[624/904] mcCntlStartMotionDev
Source: mcCntlStartMotionDev.htm
================================================================================

mcCntlStartMotionDev
mcCntlStartMotionDev
C/C++ Syntax:
int mcCntlStartMotionDev(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlStartMotionDev(
		number mInst)
Description:
Starts the selected motion device.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to start the selected motion device.  This is normally a function used by a GUI where a motion device selection dialog is presented to the user.
Usage:
// Start the selected motion device.
MINSTANCE mInst = 0;
int rc = mcCntlStartMotionDev(mInst);



================================================================================
[625/904] mcCntlStopMotionDev
Source: mcCntlStopMotionDev.htm
================================================================================

mcCntlStopMotionDev
mcCntlStopMotionDev
C/C++ Syntax:
int mcCntlStopMotionDev(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlStopMotionDev(
		number mInst);
Description:
Stop the selected motion device.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to stop the selected motion device.  This is normally a function used by a GUI where a motion device selection dialog is presented to the user.
Usage:
// Stop the selected motion device.
MINSTANCE mInst = 0;
int rc = mcCntlStopMotionDev(mInst);



================================================================================
[626/904] mcCntlToolChangeManual
Source: mcCntlToolChangeManual.htm
================================================================================

mcCntlToolChangeManual
mcCntlToolChangeManual
C/C++ Syntax:
int mcCntlToolChangeManual(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcCntlToolChangeManual(
		number mInst)
Description:
A convenience function used in M6 tool change macros.  It will prompt the user to change the tool and wait for a cycle start.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcCntlToolChangeManual(inst);



================================================================================
[627/904] mcCntlWaitOnCycleStart
Source: mcCntlWaitOnCycleStart.htm
================================================================================

mcCntlWaitOnCycleStart
mcCntlWaitOnCycleStart
C/C++ Syntax:
int mcCntlWaitOnCycleStart(
		MINSTANCE mInst, 
		const char *msg, 
		int timeOutMs);
LUA Syntax:
rc = mc.mcCntlWaitOnCycleStart(
		number mInst, 
		string msg, 
		number timeOutMs);
Description:
A convenience function used in macros.  It will prompt the user with the given message and optionally use a timeout.
Parameters:
Parameter
Description
mInst
The controller instance.
msg
A string buffer for the prompt message.
timeOutMs
A timeout value in milliseconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcCntlWaitOnCycleStart(inst, "Please press Cycle Start.", 1000);



================================================================================
[628/904] mcDeviceGetHandle
Source: mcDeviceGetHandle.htm
================================================================================

mcDeviceGetHandle
mcDeviceGetHandle
C/C++ Syntax:
int mcDeviceGetHandle(
		MINSTANCE mInst, 
		int devid, 
		HMCDEV *hDev);
LUA Syntax:
hDev, rc = mc.mcDeviceGetHandle(
		number mInst, 
		number devid)
Description:
Retrieve the hDev handle specified by devid.
Parameters:
Parameter
Description
mInst
The controller instance.
devid
The device ID as it was registered in the core.
hDev
The address of a HMCDEV handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_DEVICE_NOT_FOUND
No device with the ID specified by
devid
was found.
Notes:
None.
Usage:
int mInst = 0; 
int devid = 0; 
HMCDEV hDev;
//See if we can find a device with an I of zero
int rc =
mcDeviceGetHandle(mInst, devid, &hDev);
if (rc == MERROR_NOERROR) {
// We found it!
}



================================================================================
[629/904] mcDeviceGetInfo
Source: mcDeviceGetInfo.htm
================================================================================

mcDeviceGetInfo
mcDeviceGetInfo
C/C++ Syntax:
int mcDeviceGetInfo(
		HMCDEV hDev, 
		char *nameBuf, 
		size_t nameBuflen, 
		char *descBuf, 
		size_t descBuflen, 
		int *type, 
		int *id);
LUA Syntax:
nameBuf, descBuf, type, id, rc = mc.mcDeviceGetInfo(HMCDEV hDev}
Description:
Return infromation about a device.
Parameters:
Parameter
Description
hDev
The handle for the device.
nameBuf
The address of a string buffer to receive the device name.
nameBuflen
The nameBuf buffer length.
descBuf
The address of a string buffer to receive the device description.
descBuflen
The descBuf buffer length.
type
The address of an integer to receive the device type.
id
The address of an integer to receive the device ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hDev
parameter was 0 or no device with that handle exists.
Notes:
None.
Usage:
int mInst=0;
HMCSIG hDev = 0;
devinfo_t devinf;
char nameBuf[80];
char descBuf[80];
int type = 0;
int id = 0;
//Look for all the IO devices and get their devinfo_t struct
while (mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (hSig != 0) {
mcDeviceGetInfo(hDev, nameBuf, sizeof(nameBuf), 
				descBuf, sizeof(descBuf), &type, &id);
// do something with the device info.
} else {
		break;
	}
}



================================================================================
[630/904] mcDeviceGetInfoStruct
Source: mcDeviceGetInfoStruct.htm
================================================================================

mcDeviceGetInfoStruct
mcDeviceGetInfoStruct
C/C++ Syntax:
int mcDeviceGetInfoStruct(
		HMCSIG hDev, 
		devinfo_t *devinf);
LUA Syntax:
N/A
Description:
Return infromation about a device.
Parameters:
Parameter
Description
hDev
The handle for the device.
devinf
The address of a devinfo struct to receive the device information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hDev
parameter was 0.
Notes:
struct devinfo {
	char devName[80];
	char devDesc[80];
	int  devType;
	int  devId;
};
typedef struct devinfo devinfo_t;
Usage:
int mInst=0;
HMCSIG hDev = 0;
devinfo_t devinf;

//Look for all the IO devices and get their devinfo_t struct
while (mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (hSig != 0) {
mcDeviceGetInfoStruct(hDev, devinf);
// Do something with the device info.
} else {
		break;
	}
}



================================================================================
[631/904] mcDeviceGetNextHandle
Source: mcDeviceGetNextHandle.htm
================================================================================

mcDeviceGetNextHandle
mcDeviceGetNextHandle
C/C++ Syntax:
int mcDeviceGetNextHandle(
		MINSTANCE mInst, 
		int devtype, 
		HMCDEV startDev, 
		HMCDEV *hDev);
LUA Syntax:
hDev, rc = mc.mcDeviceGetNextHandle(
		number mInst, 
		number devtype, 
		number startDev)
Description:
Provides a means of looping through the available devices.
Parameters:
Parameter
Description
mInst
The controller instance.
devtype
Device type DEV_TYPE_NONE, DEV_TYPE_MOTION, DEV_TYPE_IO, DEV_TYPE_SCRIPT, DEV_TYPE_CONFIG, DEV_TYPE_DIAG.
startDev
A device handle defining the device from which to start.
hDev
A pointer to a HMCDEV to receive the next device handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NODATA
No more device handles are available.
Notes:
None.
Usage:
int mInst=0;
HMCDEV hDev;
//Look for all the IO devices
while (
mcDeviceGetNextHandle(mInst, DEV_TYPE_IO, hDev, &hDev)
== MERROR_NOERROR) {
	if (hSig != 0) {
// Do something with hDev.
} else {
		break;
	}
}



================================================================================
[632/904] mcDeviceRegister
Source: mcDeviceRegister.htm
================================================================================

mcDeviceRegister
mcDeviceRegister
C/C++ Syntax:
mcDeviceRegister(
	MINSTANCE mInst,
	HMCPLUG plugid,
	const char *DeviceName,
	const char *DeviceDesc,
	int Type,
	HMCDEV *hDev);
LUA Syntax:
N/A
Description:
Register the device in the core.
Parameters:
Parameter
Description
mInst
The controller instance.
plugid
The ID of the plugin passed by mcPluginInit.
DeviceName
Name the device.
DeviceDesc
Description of the device.
Type
DEV_TYPE_NONE, DEV_TYPE_MOTION, DEV_TYPE_IO, DEV_TYPE_SCRIPT, DEV_TYPE_CONFIG, DEV_TYPE_DIAG, DEV_TYPE_REG, DEV_TYPE_PROBE2, DEV_TYPE_THREAD2, DEV_TYPE_RTAP, DEV_TYPE_RTAP2, DEV_TYPE_PROBE, DEV_TYPE_THREAD
hDev
The address of a HMCDEV to receive the returned device handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin referenced by
pluginid
was not found.
MERROR_NOT_CREATED
The device was not registered!
Notes:
Registers a device into the core and defines its capabilities.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
mcRegisterIo(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcRegisterIo(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0);

	if (!m_timer->Start(10, wxTIMER_ONE_SHOT)) {
		wxMessageBox(wxT("Timer could not start!"), wxT("Timer"));
	}
}



================================================================================
[633/904] mcFileHoldAquire
Source: mcFileHoldAquire.htm
================================================================================

mcFileHoldAquire
mcFileHoldAquire
C/C++ Syntax:
int mcFileHoldAquire(
		MINSTANCE mInst, 
		const char *reason, 
		int JogAxisBits);
LUA Syntax:
rc = mc.mcFileHoldAquire(
		number mInst, 
		string reason, 
		number JogAxisBits)
Description:
Used to hold G code processing.
Parameters:
Parameter
Description
mInst
The controller instance.
reason
A string buffer specifying the reason for the file hold.
JogAxisBits
A bitmask of bits specifying the axes that are allowed to jog when in then file hold state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is not in a state where file hold is allowed.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);



================================================================================
[634/904] mcFileHoldReason
Source: mcFileHoldReason.htm
================================================================================

mcFileHoldReason
mcFileHoldReason
C/C++ Syntax:
int mcFileHoldReason(
		MINSTANCE mInst, 
		char *buf, 
		long bufSize);
LUA Syntax:
reason, rc = mc.mcFileHoldReason(
		number mInst)
Description:
Returns a string clarifying why the file processing was held.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer that receives the reason the file was held.
bufSize
A long specifying the length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control is not in the file hold state.
MERROR_INVALIS_ARG
buf
is NULL or
bufSize
is less than or equal to 0.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);
loacl reason
reason, rc = mc.mcFileHoldReason(inst);



================================================================================
[635/904] mcFileHoldRelease
Source: mcFileHoldRelease.htm
================================================================================

mcFileHoldRelease
mcFileHoldRelease
C/C++ Syntax:
int mcFileHoldRelease(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcFileHoldRelease(
		number mInst)
Description:
Used to exit a file hold state.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_STATE
The control was not in the file hold state.
Notes:
This function is primarily used in a scripting environment.
Usage:
-- LUA example
local inst = mc.mcGetInstance();
local rc = mc.mcFileHoldAquire(inst, "My hold reason", 0);
loacl reason
reason, rc = mc.mcFileHoldReason(inst);
-- Do some script magic...
rc = mc.mcFileHoldRelease(inst);
-- G code processing resumes.



================================================================================
[636/904] mcFixtureLoadFile
Source: mcFixtureLoadFile.htm
================================================================================

mcFixtureLoadFile
mcFixtureLoadFile
C/C++ Syntax:
int mcFixtureLoadFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcFixtureLoadFile(
		number mInst, 
		string FileToLoad);
Description:
Used to load a fixture table into the core.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer specifying the fixture table file.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_EMPTY
The file did not contain any fixture table data.
Notes:
This function is primarily used by the GUI.
Usage:
// Load a fixture table file.
MINSTANCE mInst = 0;
int rc = mcFixtureLoadFile(mInst, "MyFixtureTable.dat");



================================================================================
[637/904] mcFixtureSaveFile
Source: mcFixtureSaveFile.htm
================================================================================

mcFixtureSaveFile
mcFixtureSaveFile
C/C++ Syntax:
int mcFixtureSaveFile(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcFixtureSaveFile(
		number mInst),
Description:
Used to save a previously loaded and modified fixture table file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_INVALID
No fixture table file was previously loaded.
Notes:
This function is primarily used by the GUI.
Usage:
// Save the fixture table file.
MINSTANCE mInst = 0;
int rc = mcFixtureSaveFile(mInst);



================================================================================
[638/904] mcGuiGetWindowHandle
Source: mcGuiGetWindowHandle.htm
================================================================================

mcGuiGetWindowHandle
mcGuiGetWindowHandle
C/C++ Syntax:
int mcGuiGetWindowHandle(
		MINSTANCE mInst, 
		void **handle);
LUA Syntax:
N/A
Description:
Used by the core or plugins to retriev the GUI's main window handle.
Parameters:
Parameter
Description
mInst
The controller instance.
handle
The address of a void pointer to receive the GUI's main window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the returned handle is NULL, then no handle was set by the GUI.
Usage:
//
MINSTANCE mInst = 0;
void *guiHandle;
rc = mcGuiGetWindowHandle(mInst, &guiHandle);



================================================================================
[639/904] mcGuiSetCallback
Source: mcGuiSetCallback.htm
================================================================================

mcGuiSetCallback
mcGuiSetCallback
C/C++ Syntax:
int mcGuiSetCallback(
	MINSTANCE mInst, 
	void *fp);
LUA Syntax:
N/A
Description:
Sets a call back function that is used to pass messages from the core to the GUI.
Parameters:
Parameter
Description
mInst
The controller instance.
fp
Function pointer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If this call back is not set, then the GUI has no means of receiving event based messages.
Usage:
/* In the GUI code */
MCP_API
int
MCP_APIENTRY mcGUIMsg(MINSTANCE mInst,
long
msg,
long
wparam,
long
lparam)
{
// Process messages...
return(MERROR_NOERROR);
}

MINSTANCE mInst = 0;
mcGuiSetCallback(mInst, &mcGUIMsg);



================================================================================
[640/904] mcGuiSetFocus
Source: mcGuiSetFocus.htm
================================================================================

mcGuiSetFocus
mcGuiSetFocus
C/C++ Syntax:
int mcGuiSetFocus(
		MINSTANCE mInst, 
		BOOL focus);
LUA Syntax:
N/A
Description:
Causes the GUI to gain or lose focus.
Parameters:
Parameter
Description
mInst
The controller instance.
focus
A BOOL specifying the desired GUI focus state. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The GUI will receive a MSG_GUI_FOCUS message.  It is up to the GUI to implement this functionality.
Usage:
// Set focus to the GUI's main window
MINSTANCE mInst = 0;
int rc = mcGuiSetFocus(mInst, TRUE);



================================================================================
[641/904] mcGuiSetWindowHandle
Source: mcGuiSetWindowHandle.htm
================================================================================

mcGuiSetWindowHandle
mcGuiSetWindowHandle
C/C++ Syntax:
int mcGuiSetWindowHandle(
		MINSTANCE mInst, 
		void *handle);
LUA Syntax:
N/A
Description:
Informs the core of the GUI's main window handle.
Parameters:
Parameter
Description
mInst
The controller instance.
handle
The GUI's main window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
It is up to the GUI to implement this functionality.  The handle should be the HWND handle on the Windows platform and the wxWindow handle on all other platforms.
Usage:
// Set the GUI main window handle.
MINSTANCE mInst = 0;
	mcGuiSetWindowHandle(0, this);



================================================================================
[642/904] mcIoGetHandle
Source: mcIoGetHandle.htm
================================================================================

mcIoGetHandle
mcIoGetHandle
C/C++ Syntax:
mcIoGetHandle(
	MINSTANCE mInst, 
	const char *path, 
	HMCIO *hIo);
LUA Syntax:
hIo, rc = mc.mcIoGetHandle(
		number mInst,
		string path)
Description:
Retrieve the IO handle given a named path.
Parameters:
Parameter
Description
mInst
The controller instance.
path
A string representing the named path.  e.g. devname/ioname
hIo
The address of a HMCIO handle
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_IO_NOT_FOUND
No IO handle available for the given path.
Notes:
None.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";
mcIoGetHandle(m_cid, path, &hIo);



================================================================================
[643/904] mcIoGetInfoStruct
Source: mcIoGetInfoStruct.htm
================================================================================

mcIoGetInfoStruct
mcIoGetInfoStruct
C/C++ Syntax:
int mcIoGetInfoStruct(
		HMCIO hIo, 
		ioinfo_t *ioinf);
LUA Syntax:
ioinf, rc = mc.mcIoGetInfoStruct(
			number hIo)
Description:
Retrieve the current state of the IO handle.
Parameters:
Parameter
Description
hIo
The IO handle.
ioinf
The address of an ioinf struct to receive the IO information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
handle is 0 or invalid, or the
ioinf
parameter is NULL
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct ioinfo {
	char ioName[80];
	char ioDesc[80];
	int  ioType;
	HMCDEV ioDev;
	HMCSIG ioMappedSignals[MAX_MAPPED_SIGNAL];
	void *ioUserData;
	int ioInput;
};
typedef struct ioinfo ioinfo_t;
Usage:
HMCDEV hDev = 0;
devinfo_t devinf;
int rc;
// Get all IO information from every registered device.
while (mcDeviceGetNextHandle(0, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (mcDeviceGetInfoStruct(hDev, &devinf) == MERROR_NOERROR) {
		HMCIO hIo = 0;
		while (mcIoGetNextHandle(hDev, hIo, &hIo) == MERROR_NOERROR) {
			ioinfo_t ioinf;
			rc =
mcIoGetInfoStruct(hIo, &ioinf);
if (rc ==
MERROR_NOERROR
No Error.
) {
// IO information successfuly retrieved.
}
		}
	}
}



================================================================================
[644/904] mcIoGetNextHandle
Source: mcIoGetNextHandle.htm
================================================================================

mcIoGetNextHandle
mcIoGetNextHandle
C/C++ Syntax:
mcIoGetNextHandle(
	HMCDEV hDev, 
	HMCIO startIo
	HMCIO *hIo)
LUA Syntax:
hIo, rc = mc.mcIoGetNextHandle(
	number hDev, 
	number startIo)
Description:
Provides a means to loop though the registered IO of a registered device.
Parameters:
Parameter
Description
hDev
The device handle.
startIo
The starting IO handle. (0 to begin)
hIo
The address to a HMCIO handle to receive the next IO handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hDev
paramete was 0 or invalid.
MERROR_NODATA
No IO handle available.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Useful in a GUI where retrieving information to display to the user is needed.
Usage:
HMCDEV hDev = 0;
devinfo_t devinf;
int rc;
// Get all IO information from every registered device.
while (mcDeviceGetNextHandle(0, DEV_TYPE_IO, hDev, &hDev) == MERROR_NOERROR) {
	if (mcDeviceGetInfoStruct(hDev, &devinf) == MERROR_NOERROR) {
		HMCIO hIo = 0;
		while (
mcIoGetNextHandle(hDev, hIo, &hIo)
== MERROR_NOERROR) {
			ioinfo_t ioinf;
			rc = mcIoGetInfoStruct(hIo, &ioinf);
			if (rc == MERROR_NOERROR) {
// IO information successfuly retrieved.
}
		}
	}
}



================================================================================
[645/904] mcIoGetState
Source: mcIoGetState.htm
================================================================================

mcIoGetState
mcIoGetState
C/C++ Syntax:
mcIoGetState(
	HMCIO hIo,
	BOOL *state);
LUA Syntax:
state, rc = mcIoGetState(
	number hIo)
Description:
Retrieve the current state of the IO handle.
Parameters:
Parameter
Description
hIo
The IO handle.
state
The address of a BOOL to receive the state status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetState(m_Input0, &oldstate);
newstate = simGetIO(0);
	if (newstate != oldstate) {
		mcIoSetState(m_Input0, newstate);
	}
}



================================================================================
[646/904] mcIoGetType
Source: mcIoGetType.htm
================================================================================

mcIoGetType
mcIoGetType
C/C++ Syntax:
mcIoGetType(
	HMCIO hIo, 
	int *type);
LUA Syntax:
type, rc = mcIoGetType(
	number hIo)
Description:
Retrieve the type (input or output) the IO object.
Parameters:
Parameter
Description
hIo
The IO handle.
type
The address of an integer to receive the type information. (IO_TYPE_INPUT or IO_TYPE_OUTPUT)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetType(m_Input0, &type);
// type will equal IO_TYPE_INPUT
}



================================================================================
[647/904] mcIoGetUserData
Source: mcIoGetUserData.htm
================================================================================

mcIoGetUserData
mcIoGetUserData
C/C++ Syntax:
mcIoGetUserData(
	HMCIO hIo, 
	void **data);
LUA Syntax:
N/A
Description:
Retrieve the type user data pointer associated with the I/O object..
Parameters:
Parameter
Description
hIo
The IO handle.
data
The address of a pointer to receive the user data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
struct myData {
	int myPortNumber;
	int myPinNumber;
};

void GetUserData(void)
{
	MINSTANCE mInst = 0;
	HMCIO hIo;
	void *data;
	if (mcIoGetHandle(mInst, "Sim0/Input0", &hIo) == MERROR_NOERROR) {
mcIoGetUserData(hIo, &data);
// type cast the pointer
struct myData *mData = (struct myData *)data;
	}
}



================================================================================
[648/904] mcIoIsEnabled
Source: mcIoIsEnabled.htm
================================================================================

mcIoIsEnabled
mcIoIsEnabled
C/C++ Syntax:
mcIoIsEnabled(
	HMCIO hIo, 
	BOOL *enabled);
LUA Syntax:
enabled, rc = mcIoIsEnabled(
	number hIo)
Description:
Check to see if the IO object has been enabled.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcIoGetHandle().
state
The address of a BOOL to receive the enabled state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_IO_NOT_FOUND
The IO object was not found.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will return MERROR_IO_NOT_FOUND.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";
BOOL enabled;
mcIoGetHandle(m_cid, path, &hIo);
//Get the handle
mcIoIsEnabled(hIo , &enabled);
//Get the enabled state of the IO



================================================================================
[649/904] mcIoRegister
Source: mcIoRegister.htm
================================================================================

mcIoRegister
mcIoRegister
C/C++ Syntax:
mcIoRegister(
	HMCDEV hDev,
	const char *IoName,
	const char *IoDesc, 
	int Type, 
	HMCIO *hIo);
LUA Syntax:
N/A
Description:
Register the I/O object in the Mach core.
Parameters:
Parameter
Description
hDev
Pointer to the device.
IoName
Name of the IO point.
IoDesc
Description of the IO.
Type
IO_TYPE_NONE, IO_TYPE_INPUT, IO_TYPE_OUTPUT, IO_TYPE_ANA_INPUT, IO_TYPE_ANA_OUTPUT.
hIo
Address of the IO point
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0);
if (!m_timer->Start(10, wxTIMER_ONE_SHOT)) {
		wxMessageBox(wxT("Timer could not start!"), wxT("Timer"));
	}
}



================================================================================
[650/904] mcIoSetDesc
Source: mcIoSetDesc.htm
================================================================================

mcIoSetDesc
mcIoSetDesc
C/C++ Syntax:
mcIoSetDesc(
	HMCIO hIo, 
	const char *desc);
LUA Syntax:
rc = mc.mcIoSetDesc(
	number hIo, 
	string desc)
Description:
Sets the decription of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O handle.
desc
The description to apply to the I/O object.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";

if (mcIoGetHandle(m_cid, path, &hIo) == MERROR_NOERROR) {
mcIoSetDesc(hIo, "my mew description);
}



================================================================================
[651/904] mcIoSetName
Source: mcIoSetName.htm
================================================================================

mcIoSetName
mcIoSetName
C/C++ Syntax:
mcIoSetName(
	HMCIO hIo, 
	const char *name);
LUA Syntax:
rc = mc.mcIoSetName(
	number hIo, 
	string name)
Description:
Sets the name of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O handle.
name
The name to apply to the I/O object.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
Usage:
HMCIO hIo;
char *path = "Sim0/Input0";

if (mcIoGetHandle(m_cid, path, &hIo) == MERROR_NOERROR) {
mcIoSetName(hIo, "Limit0++");
// The name is changed from Input0 to Limit0++
}



================================================================================
[652/904] mcIoSetState
Source: mcIoSetState.htm
================================================================================

mcIoSetState
mcIoSetState
C/C++ Syntax:
mcIoSetState(
	HMCIO hIo, 
	bool state);
Description:
Sets the state of a registerd I/O object.
Parameters:
Parameter
Description
hIo
The I/O object handle.
state
The state of I/O object
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hIo parameter was 0.
Notes:
The hIo parameter
MUST
be a valid IO object handle.  Otherwise, the function will crash.
A value of true means the I/O object is in a high state. This function should only be used upon a state change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoGetState(m_Input0, &oldstate);
newstate = simGetIO(0);
	if (newstate != oldstate) {
		mcIoSetState(m_Input0, newstate);
	}
}



================================================================================
[653/904] mcIoSetType
Source: mcIoSetType.htm
================================================================================

mcIoSetType
mcIoSetType
C/C++ Syntax:
mcIoSetType(
	HMCIO hIo, 
	int type);
LUA Syntax:
rc = mcIoSetType(
	number hIo
	number type)
Description:
Retrieve the type (input or output) the IO object.
Parameters:
Parameter
Description
hIo
The I/O object handle.
type
An integer specifying the type of the I/O object. (IO_TYPE_INPUT or IO_TYPE_OUTPUT)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	bool oldstate = false;
	bool newstate = false;

	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
mcIoSetType(m_Input0, IO_TYPE_OUTPUT);
// change the type to IO_TYPE_OUTPUT
}



================================================================================
[654/904] mcIoSetUserData
Source: mcIoSetUserData.htm
================================================================================

mcIoSetUserData
mcIoSetUserData
C/C++ Syntax:
mcIoSetUserData(
	HMCIO hIo, 
	void **data);
LUA Syntax:
N/A
Description:
Retrieve the type user data pointer associated with the I/O object..
Parameters:
Parameter
Description
hIo
The IO handle.
data
The address of a pointer to receive the user data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
Usage:
struct myData {
	int myPortNumber;
	int myPinNumber;
};

struct myData data;

void GetUserData(void)
{
	MINSTANCE mInst = 0;
	HMCIO hIo;
	struct myData data;
	data.myPortNumber = 1;
	data.myPinNumber = 12;
	if (mcIoGetHandle(mInst, "Sim0/Input0", &hIo) == MERROR_NOERROR) {
mcIoSetUserData(hIo, &data);
}
}



================================================================================
[655/904] mcIoSyncSignal
Source: mcIoSyncSignal.htm
================================================================================

mcIoSyncSignal
mcIoSyncSignal
C/C++ Syntax:
mcIoSyncSignal(
	HMCIO hIo, 
	BOOL state);
LUA Syntax:
N/A
Description:
A special function that I/O plugins can use to force the synchronization of a Mach output signal.
Parameters:
Parameter
Description
hIo
The I/O object handle.
state
An BOOL specifying the state to sync to the I/O objects mapped core output signal
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The
hIo
parameter was 0 or invalid.
Notes:
The hIo parameter
MUST
be a valid IO handle.  Otherwise, the function will crash.
This function is primarily used to synchronize the core output signal when setting/clearing outputs are coordinated with machine motion.  (M63/M63)
Usage:
N/A



================================================================================
[656/904] mcIoUnregister
Source: mcIoUnregister.htm
================================================================================

mcIoUnregister
mcIoUnregister
C/C++ Syntax:
mcIoUnregister(
	HMCDEV hDev, 
	HMCIO hIo);
LUA Syntax:
N/A
Description:
Unregister the I/O object in the Mach core.
Parameters:
Parameter
Description
hDev
Pointer to the device.
hIo
The /O object handle to remove from the core..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Usage:
N/A



================================================================================
[657/904] mcJogAbsStart
Source: mcJogAbsStart.htm
================================================================================

mcJogAbsStart
mcJogAbsStart
C/C++ Syntax:
int mcJogAbsStart(
		MINSTANCE mInst, 
		int axisId, 
		double pos);
LUA Syntax:
rc = mc.mcJogAbsStart(
		number mInst, 
		number axisId, 
		number pos)
Description:
Start an absolute jog move.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to start jogging.
pos
The absolute position to which to jog the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Jog or position any axis.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double JogToPos = 5.0;
// Jog controller 0 to position 5.0 in the Z axis.
mcJogAbsStart(mInst, axis, Jogpos);



================================================================================
[658/904] mcJogAbsStop
Source: mcJogAbsStop.htm
================================================================================

mcJogAbsStop
mcJogAbsStop
C/C++ Syntax:
int mcJogAbsStop(
		MINSTANCE mInst, 
		int axisId, 
		double incr);
LUA Syntax:
rc = mc.mcJogAbsStop(
		number mInst, 
		number axisId, 
		number incr)
Description:
Stop an abs jog prematurely at the closest increment.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
inc
The increment on which to to stop the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function will stop an axis on an increment. This feature is like a digital detent to allow an axis to stop at some set increment. The original use is to stop an axis that is over loaded with inc jog requests.
Usage:
// Stop the incremental jog on the Z axis.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
int rc = mcJogAbsStop(mInst, axis, Joginc);



================================================================================
[659/904] mcJogGetAccel
Source: mcJogGetAccel.htm
================================================================================

mcJogGetAccel
mcJogGetAccel
C/C++ Syntax:
int mcJogGetAccel(
		MINSTANCE mInst, 
		int axisId, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcJogGetAccel(
		number mInst, 
		number axis)
Description:
Get the current jog acceleration value for the give aixs as a percentage of max velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
(percent, The address of a double to receive the current jog acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
percent
is NULL.
Notes:
Usage:
// Get the jog accel percentage for the X axis.
MINSTANCE mInst = 0;
double accel;
int rc = mcJogGetAccel(mInst, X_AXIS, &accel);



================================================================================
[660/904] mcJogGetFeedRate
Source: mcJogGetFeedRate.htm
================================================================================

mcJogGetFeedRate
mcJogGetFeedRate
C/C++ Syntax:
int mcJogGetFeeRate(
		MINSTANCE mInst, 
		int axisId, 
		double *feedRate);
LUA Syntax:
feedRate, rc = mc.mcJogSetFeedRate(
		number mInst, 
		number axisId)
Description:
Get the jog feed rate of the given axis.  To set the units mode, inch or metric, see mcJogSetUnitsMode().
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
feedRate
A pointer to a double with which to receive the jog feed rate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double feedRate = 0.0;
int rc = mcJogSetUnitsMode(mInst, axis, MC_UNITS_INCH); 
rc = mcJogSetFeedRate(mInst, axis, &feedRate);
// Get the feed rate in inches per minute.



================================================================================
[661/904] mcJogGetFollowMode
Source: mcJogGetFollowMode.htm
================================================================================

mcJogGetFollowMode
mcJogGetFollowMode
C/C++ Syntax:
mcJogGetFollowMode(
	MINSTANCE mInst, 
	double *mode_on);
Description:
Get the jog follow state of the toolpath. This is when 
the tool path will auto pan to follow the tool on the screen.
Parameters:
Parameter
Description
mInst
The controller instance.
mode_on
A pointer to an int to receive the jog follow state (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
This call is used to help display the state to the user.
Usage:
int mInst=0;
double jfstat=0;
mcJogGetFollowMode(mInst, &jfstate);



================================================================================
[662/904] mcJogGetInc
Source: mcJogGetInc.htm
================================================================================

mcJogGetInc
mcJogGetInc
C/C++ Syntax:
int mcJogGetInc(
		MINSTANCE mInst, 
		int axisId, 
		double *increment);
LUA Syntax:
increment, rc = mc.mcJogGetInc(
		number mInst, 
		number axisId)
Description:
Returns the current jog increment for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
increment
is NULL.
Notes:
Usage:
// Get the jog increment for the X axis.
MINSTANCE mInst = 0;
double inc;
int rc = mcJogGetIncAccel(mInst, X_AXIS, &inc);



================================================================================
[663/904] mcJogGetRate
Source: mcJogGetRate.htm
================================================================================

mcJogGetRate
mcJogGetRate
C/C++ Syntax:
int mcJogGetRate(
		MINSTANCE mInst, 
		int axisId, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcJogGetRate(
		number mInst, 
		number axisId)
Description:
Returns the current jog rate as a percentage of max velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
percent
The address of a double to receive the jog rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
percentage
is NULL.
Notes:
Usage:
// Get the current jog rate for the X axis
MINSTANCE mInst = 0;
double jogRate;
int rc = mcJogGetRate(mInst, X_AXIS, &jogRate);



================================================================================
[664/904] mcJogGetTraceEnable
Source: mcJogGetTraceEnable.htm
================================================================================

mcJogGetTraceEnable
mcJogGetTraceEnable
C/C++ Syntax:
int mcJogGetTraceEnable(MINSTANCE mInst, BOOL *enable);
LUA Syntax:
enable, rc = mc.mcJogGetTraceEnable(number mInst)
Description:
Get the enabled status of jog tracing in the tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A pointer to a BOOL with which to revceive the jog trace enable status. (MC_TRUE or MC_FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None
Usage:
// Get jog trace enable status.
MINSTANCE mInst = 0;
int enabled = MC_FALSE;
int rc = mcJogGetTraceEnable(mInst, &enabled);



================================================================================
[665/904] mcJogGetType
Source: mcJogGetType.htm
================================================================================

mcJogGetType
mcJogGetType
C/C++ Syntax:
int mcJogGetType(MINSTANCE mInst, int axisId, int *type);
LUA Syntax:
type, rc = mc.mcJogGetType(
		number mInst, 
		number axisId)
Description:
Get the jog operation type for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
type
A pointer to an integer with which to revceive the jog type. (MC_JOG_TYPE_VEL or MC_JOG_TYPE_INC)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Get the X axis jog type.
MINSTANCE mInst = 0;
int type = 0;
int rc = mcJogGetType(mInst, X_AXIS, &type);



================================================================================
[666/904] mcJogGetUnitsMode
Source: mcJogGetUnitsMode.htm
================================================================================

mcJogGetUnitsMode
mcJogGetUnitsMode
C/C++ Syntax:
mcJogGetUnitsMode(
	MINSTANCE mInst, 
	int axisId,
	int *mode);
Description:
Get the jog units mode.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
mode
A pointer to an int to receive the jog units mode (MC_UNITS_INCH or MC_UNITS_METRIC) of the given axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
int mInst = 0;
int mode = 0;
mcJogGetUnitsMode(mInst, X_AXIS, &mode);



================================================================================
[667/904] mcJogGetVelocity
Source: mcJogGetVelocity.htm
================================================================================

mcJogGetVelocity
mcJogGetVelocity
C/C++ Syntax:
int mcJogGetVelocity(
		MINSTANCE mInst, 
		int axisId, 
		double *vel);
LUA Syntax:
vel, rc = mc.mcJogGetVelocity(
		number mInst, 
		number axisId),
Description:
Get the current jog velocity setting in units per minute.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis from which to get the jog velocity.
vel
The address of a double to receive the current jog velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Changing the jog rate (percentage of max velocity) will affect the return value.
Usage:
// Get the current jog velocity setting for the X axis
MINSTANCE mInst = 0;
double jogVel;
int rc = mcJogGetVelocity(mInst, X_AXIS, &jogVel);



================================================================================
[668/904] mcJogIncStart
Source: mcJogIncStart.htm
================================================================================

mcJogIncStart
mcJogIncStart
C/C++ Syntax:
int mcJogIncStart(
		MINSTANCE mInst, 
		int axisId, 
		double dist);
LUA Syntax:
rc = mc.mcJogIncStart(
		number mInst, 
		number axisId, 
		number dist)
Description:
Start an Incermetnal jog move.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to start jogging.
dist
The incremental distance to jog the axis (added to current goal position).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Inc jog or position any axis. The axis will use the MaxVel and Accel settings to get into position.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
// Jog controller 0 .1 in the Z axis.
mcJogIncStart(mInst, axis, Joginc);



================================================================================
[669/904] mcJogIncStop
Source: mcJogIncStop.htm
================================================================================

mcJogIncStop
mcJogIncStop
C/C++ Syntax:
int mcJogIncStop(
		MINSTANCE mInst, 
		int axisId, 
		double incr);
LUA Syntax:
rc = mc.mcJogIncStop(
		number mInst, 
		number axisId, 
		number incr)
Description:
Stop an incremental jog at the closest increment.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
inc
The increment on which to to stop the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
This function will stop an axis on an increment. This feature is like a digital detent to allow an axis to stop at some set increment. The original use is to stop an axis that is over loaded with inc jog requests.
Usage:
// Stop the incremental jog on the Z axis.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
double Joginc = .100;
int rc = mcJogIncStop(mInst, axis, Joginc);



================================================================================
[670/904] mcJogIsJogging
Source: mcJogIsJogging.htm
================================================================================

mcJogIsJogging
mcJogIsJogging
C/C++ Syntax:
int mcJogIsJogging(
		MINSTANCE mInst, 
		int axisId, 
		BOOL *jogging);
LUA Syntax:
jogging, rc = mc.mcJogIsJogging(
		number mInst, 
		number axisId)
Description:
Determine if the given axis is jogging.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
jogging
The address of a BOOL to receive the axis jog state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// See if the X axis is jogging.
MINSTANCE mInst = 0;
BOOL jogging = FALSE;
int rc = mcJogIsJogging(mInst, X_AXIS, &jogging);



================================================================================
[671/904] mcJogIsStopping
Source: mcJogIsStopping.htm
================================================================================

mcJogIsStopping
mcJogIsStopping
C/C++ Syntax:
int mcJogIsStopping(
		MINSTANCE mInst, 
		int axisId, 
		BOOL *stopping);
LUA Syntax:
stopping, rc = mc.mcJogIsStopping(
		number mInst, 
		number axisId)
Description:
Determine if the given axis has been commanded to stop but has not yet stopped.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
stopping
The address of a BOOL to receive the axis jog state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// See if the X axis is stopping.
MINSTANCE mInst = 0;
BOOL stopping = FALSE;
int rc = mcJogIsStopping(mInst, X_AXIS, &stopping);



================================================================================
[672/904] mcJogSetAccel
Source: mcJogSetAccel.htm
================================================================================

mcJogSetAccel
mcJogSetAccel
C/C++ Syntax:
int mcJogSetAccel(
		MINSTANCE mInst, 
		int axisId, 
		double percent);
LUA Syntax:
rc = mc.mcJogSetAccel(
		number mInst, 
		number axisId, 
		double percent)
Description:
Set the jog accel as a percentage of the axis' maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer spcifying the axis.
percent
A double specifying the acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Usage:
// Set the X axis jog accel percentage to 75%.
MINSTANCE mInst = 0;
int mcJogSetAccel(mInst, X_AXIS, 75);



================================================================================
[673/904] mcJogSetFeedRate
Source: mcJogSetFeedRate.htm
================================================================================

mcJogSetFeedRate
mcJogSetFeedRate
C/C++ Syntax:
int mcJogSetFeeRate(
		MINSTANCE mInst, 
		int axisId, 
		double feedRate);
LUA Syntax:
rc = mc.mcJogSetFeedRate(
		number mInst, 
		number axisId, 
		number feedRate)
Description:
Set the jog feed rate of the given axis.  To set the units mode, inch or metric, see mcJogSetUnitsMode().
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
feedRate
The jog feed rate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc = mcJogSetUnitsMode(mInst, axis, MC_UNITS_INCH); 
rc = mcJogSetFeedRate(mInst, axis, 20);
// 20 inches per minute.



================================================================================
[674/904] mcJogSetFollowMode
Source: mcJogSetFollowMode.htm
================================================================================

mcJogSetFollowMode
mcJogSetFollowMode
C/C++ Syntax:
mcJogSetFollowMode(
	MINSTANCE mInst, 
	double mode_on);
Description:
Set the jog follow mode of the toolpath.
Parameters:
Parameter
Description
mInst
The controller instance.
mode_on
Sets Jog follow mode to be on or off with (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
This can be set at anytime.
Usage:
int mInst=0;
mcJogGetFollowMode(mInst, MC_ON);



================================================================================
[675/904] mcJogSetInc
Source: mcJogSetInc.htm
================================================================================

mcJogSetInc
mcJogSetInc
C/C++ Syntax:
int mcJogSetInc(
		MINSTANCE mInst, 
		int axisId, 
		double increment);
LUA Syntax:
rc = mc.mcJogSetInc(
		number mInst, 
		number axisId, 
		number increment)
Description:
Set the current jog increment for the give axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
increment
A double specifying the desired increment.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
// Set the X axis jog increment to .010"
MINSTANCE mInst = 0;
int rc = mcJogSetInc(mInst, X_AXIS, .010);



================================================================================
[676/904] mcJogSetRate
Source: mcJogSetRate.htm
================================================================================

mcJogSetRate
mcJogSetRate
C/C++ Syntax:
int mcJogSetRate(
		MINSTANCE mInst, 
		int axisId, 
		double percent);
LUA Syntax:
rc = mc.mcJogSetRate(
		number mInst, 
		number axisId, 
		number percent)
Description:
Set the jog rate of the given axis as a percentage of the axis' maximum velocity.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop jogging.
percent
The jog rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the jog rate to 75% of the Z axis maximum velocity.
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc = mcJogSetRate(mInst, axis, 75);



================================================================================
[677/904] mcJogSetTraceEnable
Source: mcJogSetTraceEnable.htm
================================================================================

mcJogSetTraceEnable
mcJogSetTraceEnable
C/C++ Syntax:
int mcJogSetTraceEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcJogSetTraceEnable(
		number mInst, 
		number enable)
Description:
Enable or disable tool path jog tracing.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL secifying tool path jog tracing.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None
Usage:
//Set jog tracing.
MINSTANCE mInst = 0;
int rc = mcJogSetTraceEnable(mInst, MC_TRUE);



================================================================================
[678/904] mcJogSetType
Source: mcJogSetType.htm
================================================================================

mcJogSetType
mcJogSetType
C/C++ Syntax:
int mcJogSetType(MINSTANCE mInst, int axisId, int type);
LUA Syntax:
rc = mc.mcJogSetType(
		number mInst, 
		number axisId, 
		number type)
Description:
Set the jog operation type for the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
type
An integer specifying the jog type. (MC_JOG_TYPE_VEL or MC_JOG_TYPE_INC)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None
Usage:
// Set the X axis jog type to velocity mode.
MINSTANCE mInst = 0;
int rc = mcJogSetType(mInst, X_AXIS, MC_JOG_TYPE_VEL);



================================================================================
[679/904] mcJogSetUnitsMode
Source: mcJogSetUnitsMode.htm
================================================================================

mcJogSetUnitsMode
mcJogSetUnitsMode
C/C++ Syntax:
mcJogSetUnitsMode(
	MINSTANCE mInst, 
	int axisId,
	int mode);
Description:
Get the jog units mode.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
An integer specifying the axis.
mode
The desired units mode (MC_UNITS_INCH or MC_UNITS_METRIC) for the given axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
None.
Usage:
int mInst = 0;
mcJogSetUnitsMode(mInst, X_AXIS, MC_UNITS_INCH);



================================================================================
[680/904] mcJogVelocityStart
Source: mcJogVelocityStart.htm
================================================================================

mcJogVelocityStart
mcJogVelocityStart
C/C++ Syntax:
int mcJogVelocityStart(
		MINSTANCE mInst, 
		int axisId, 
		double dir);
LUA Syntax:
rc = mc.mcJogVelocityStart(
		number mInst, 
		number axisId, 
		number dir);
Description:
Start a velocity jog on the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis to jog.
dir
An integer specifying the direction of the jog. (MC_JOG_POS, MC_JOG_NEG, MC_JOG_STOP)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Specifying MC_JOG_STOP for
dir
is the same as calling mcJogVelocityStop().
Usage:
int mInst=0;
int axis = Z_AXIS;
int rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS);
// Start Z axis jogging for 5 sec.
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS);
// Reverse axis and jog the axis Back.
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
mcJogVelocityStop(mInst, axis);
// Stop the axis.



================================================================================
[681/904] mcJogVelocityStop
Source: mcJogVelocityStop.htm
================================================================================

mcJogVelocityStop
mcJogVelocityStop
C/C++ Syntax:
mcJogVelocityStop(
		MINSTANCE mInst, 
		int axisId);
LUA Syntax:
mcJogVelocityStop(
		number mInst, 
		number axisId)
Description:
Stop a velocity jog on an the given axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axisId
The axis to stop.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Stops the axis with respect to acceleration settings of the slowest motor that is part of the axis.
Usage:
MINSTANCE mInst = 0;
int axis = Z_AXIS;
int rc;
// Jog axis at 10 % max velocity.
rc = mcJogSetRate(mInst, axis, 10);
rc = mcJogVelocityStart(mInst, axis, MC_JOG_POS); 
if (rc == MERROR_NOERROR) {
	Sleep(5000);
}
// Stop the axis.
rc = mcJogVelocityStop(mInst, axis);



================================================================================
[682/904] mcMotionClearPlanner
Source: mcMotionClearPlanner.htm
================================================================================

mcMotionClearPlanner
mcMotionClearPlanner
C/C++ Syntax:
int mcMotionClearPlanner(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcMotionClearPlanner(
		number mInst)
Description:
Clears the motion planner of all previously planned moves.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is useful when probing and the probe has struck before the planned moves are exhausted.
Usage:
// Clear the planner.
MINSTANCE mInst = 0;
int rc = mcMotionClearPlanner(mInst);



================================================================================
[683/904] mcMotionCyclePlanner
Source: mcMotionCyclePlanner.htm
================================================================================

mcMotionCyclePlanner
mcMotionCyclePlanner
C/C++ Syntax:
int mcMotionCyclePlanner(MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Cycle the core planner.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is depricated in favor of mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[684/904] mcMotionCyclePlannerEx
Source: mcMotionCyclePlannerEx.htm
================================================================================

mcMotionCyclePlannerEx
mcMotionCyclePlannerEx
C/C++ Syntax:
int mcMotionCyclePlannerEx(
		MINSTANCE mInst, 
		execution_t *exInfo);
LUA Syntax:
N/A
Description:
Cycles the core planner to produce one time slice of movement information.
Parameters:
Parameter
Description
mInst
The controller instance.
exInfo
The address of an execution_t struct that receives the movement information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
exInfo
is NULL.
Notes:
This is the main function a motion plugin uses to drive motion.
Usage:
// Cycle the core planner.
MINSTANCE mInst = 0;
execution_t exInfo;
int rc = mcMotionCyclePlannerEx(mInst, &exInfo);
// For more information, see the Sim plugin example.



================================================================================
[685/904] mcMotionGetAbsPos
Source: mcMotionGetAbsPos.htm
================================================================================

mcMotionGetAbsPos
mcMotionGetAbsPos
C/C++ Syntax:
int mcMotionGetAbsPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned absolute motor position for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[686/904] mcMotionGetAbsPosFract
Source: mcMotionGetAbsPosFract.htm
================================================================================

mcMotionGetAbsPosFract
mcMotionGetAbsPosFract
C/C++ Syntax:
int mcMotionGetAbsPosFract(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned absolute motor position for the given motor (with fractions).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[687/904] mcMotionGetBacklashAbs
Source: mcMotionGetBacklashAbs.htm
================================================================================

mcMotionGetBacklashAbs
mcMotionGetBacklashAbs
C/C++ Syntax:
int mcMotionGetBacklashAbs(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
N/A
Description:
Retrieves the last planned backlast amount for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[688/904] mcMotionGetBacklashInc
Source: mcMotionGetBacklashInc.htm
================================================================================

mcMotionGetBacklashInc
mcMotionGetBacklashInc
C/C++ Syntax:
int mcMotionGetBacklashInc(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
N/A
Description:
Retrieves the last planned backlast amount for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[689/904] mcMotionGetIncPos
Source: mcMotionGetIncPos.htm
================================================================================

mcMotionGetIncPos
mcMotionGetIncPos
C/C++ Syntax:
int mcMotionGetIncPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned incremental motor position for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[690/904] mcMotionGetMoveID
Source: mcMotionGetMoveID.htm
================================================================================

mcMotionGetMoveID
mcMotionGetMoveID
C/C++ Syntax:
int mcMotionGetMoveID(
		MINSTANCE mInst, 
		int motorId, 
		long *val);
LUA Syntax:
N/A
Description:
Retrieves the last planned move ID for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a long to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This function has been depricated in favor of using mcMotionCyclePlannerEx().
Usage:
None.



================================================================================
[691/904] mcMotionGetPos
Source: mcMotionGetPos.htm
================================================================================

mcMotionGetPos
mcMotionGetPos
C/C++ Syntax:
int mcMotionGetPos(
		MINSTANCE mInst, 
		int motorId, 
		double *pos);
LUA Syntax:
pos, rc = mc.mcMotionGetPos(
		number mInst, 
		number motorId)
Description:
Retrieves the current motor pos in counts.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
pos
The address of a double to receive the position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the motor 0 position.
MINSTANCE mInst = 0;
double pos;
int rc = mcMotionGetPos(mInst, 0, &pos);



================================================================================
[692/904] mcMotionGetProbeParams
Source: mcMotionGetProbeParams.htm
================================================================================

mcMotionGetProbeParams
mcMotionGetProbeParams
C/C++ Syntax:
int mcMotionGetProbeParams(
		MINSTANCE mInst, 
		probe_t *probeInfo);
LUA Syntax:
N/A
Description:
Get the probing parameters from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
probeInfo
The address of a prob_t struct to receive the probing parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
A motion device registered with DEV_TYPE_PROBE2 must be defined in order to use this function.
Usage:
// Get the probing parameters from the core.
MINSTANCE mInst = 0;
probe_t pInfo;
int mcMotionGetProbeParams(mInst, &pInfo);



================================================================================
[693/904] mcMotionGetRigidTapParams
Source: mcMotionGetRigidTapParams.htm
================================================================================

mcMotionGetRigidTapParams
mcMotionGetRigidTapParams
C/C++ Syntax:
int mcMotionGetRigidTapParams(
		MINSTANCE mInst, 
		tap_t *tapInfo);
LUA Syntax:
N/A
Description:
Retrieve the tapping parameters from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
tapInfo
The address of a tap_t struct to receive the tapping parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
A motion device registered with DEV_TYPE_TAP2 must be defined in order to use this function.
Usage:
// Get the tpping parameters from the core.
MINSTANCE mInst = 0;
tap_t tapInfo;
int rc = mcMotionGetRigidTapParams(mInst, &tapInfo);



================================================================================
[694/904] mcMotionGetSyncOutput
Source: mcMotionGetSyncOutput.htm
================================================================================

mcMotionGetSyncOutput
mcMotionGetSyncOutput
C/C++ Syntax:
int mcMotionGetSyncOutput(
		MINSTANCE mInst, 
		int outputQueue, 
		HMCIO *hIo, 
		BOOL *state);
LUA Syntax:
N/A
Description:
Gets a movement coordinated output from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
outputQueue
An integer specifying which output queue.
hIo
The address of a HMCIO variable to receive the I/O handle associated with the output.
state
Te address of a BOOL to receive the desired state of the output.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Test the ex.exOutputQueue flag to see if there are any coordinated output to be set/cleared.  The
outputQueue
parameter comes from ex.ex.exOutputQueue.
Usage:
// Retrieve the coordinated outputs/
MINSTANCE mInst = 0;
execution_t ex;
mcMotionCyclePlannerEx(mInst, &ex);
if (ex.exOutputQueue != EX_NONE) {
	HMCIO hIo;
	BOOL state;
	while (mcMotionGetSyncOutput(m_cid, ex.exOutputQueue, &hIo, &state) == MERROR_NOERROR) {
// Pair setting the output along with the moves in (execution_t)ex.
}
}



================================================================================
[695/904] mcMotionGetThreadParams
Source: mcMotionGetThreadParams.htm
================================================================================

mcMotionGetThreadParams
mcMotionGetThreadParams
C/C++ Syntax:
int mcMotionGetThreadParams(
		MINSTANCE mInst, 
		thread_t *threadInfo);
LUA Syntax:
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
threadInfo
The address of a thread_t struct to receive the threading parameters.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_IMPLEMENTED
The motion device does not support DEV_TYPE_THREAD2 type threading.
Notes:
A motion device registered with DEV_TYPE_THREAD2 is required.
Usage:
//
MINSTANCE mInst = 0;
thread_t threadInfo;
int mcMotionGetThreadParams(mInst, &threadInfo);



================================================================================
[696/904] mcMotionGetThreadingRate
Source: mcMotionGetThreadingRate.htm
================================================================================

mcMotionGetThreadingRate
mcMotionGetThreadingRate
C/C++ Syntax:
int mcMotionGetThreadingRate(
		MINSTANCE mInst, 
		double *ratio);
LUA Syntax:
N/A
Description:
Get the current threading ration from the core.
Parameters:
Parameter
Description
mInst
The controller instance.
ratio
The address to a double to receive the threading ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Get the current threading rate from the core.
MINSTANCE mInst = 0;
double ratio;
int rc = mcMotionGetThreadingRate(mInst, ∶);



================================================================================
[697/904] mcMotionGetVel
Source: mcMotionGetVel.htm
================================================================================

mcMotionGetVel
mcMotionGetVel
C/C++ Syntax:
int mcMotionGetVel(MINSTANCE mInst, int motorId, double *velocity);
LUA Syntax:
velocity, rc = mc.mcMotionGetVel(
		number mInst, 
		number motorId)
Description:
Retrieve the current motor velocity in counts per second squared.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor ID.
velocity. The address of a double to receive the motor velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
velocity
is NULL or
motorId
is less than 0.
Notes:
None.
Usage:
// Get the motor velocity for motor 1
MINSTANCE mInst = 0;
double vel;
int rc = mcMotionGetVel(mInst, 1, &vel);



================================================================================
[698/904] mcMotionSetCycleTime
Source: mcMotionSetCycleTime.htm
================================================================================

mcMotionSetCycleTime
mcMotionSetCycleTime
C/C++ Syntax:
int mcMotionSetCycleTime(
		MINSTANCE mInst, 
		double secs);
LUA Syntax:
N/A
Description:
Set the time slice of a cycle.
Parameters:
Parameter
Description
mInst
The controller instance.
secs
A double specifying the cycle time slice.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Decimal values are accepted.  e.g. .001 is equal to 1 millisecond.
Usage:
// Set the cycle time slice.
MINSTANCE mInst = 0;
int mcMotionSetCycleTime(mInst, .001);



================================================================================
[699/904] mcMotionSetMoveID
Source: mcMotionSetMoveID.htm
================================================================================

mcMotionSetMoveID
mcMotionSetMoveID
C/C++ Syntax:
int mcMotionSetMoveID(
		MINSTANCE mInst, 
		int id);
LUA Syntax:
N/A
Description:
Set the time slice of a cycle.
Parameters:
Parameter
Description
mInst
The controller instance.
id
Set the currently executing movement ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Ideally, the motion control device should report the currently executing movement.
Usage:
// Set the currently executing movement ID.
MINSTANCE mInst = 0;
int moveId = 10001;
// Should be obtained from the motion controller.
int mcMotionSetMoveID(mInst, moveId);



================================================================================
[700/904] mcMotionSetPos
Source: mcMotionSetPos.htm
================================================================================

mcMotionSetPos
mcMotionSetPos
C/C++ Syntax:
int mcMotionSetPos(
		MINSTANCE mInst, 
		int motorId
		double val);
LUA Syntax:
N/A
Description:
Report the position in counts to the core for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
MotorId
An integer specifying the motor.
val
A double specifying the motor position in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
The motion control device should report the motor positions to the core so that the core can synchronize events based on the current position.
Usage:
// Set the motor position for motor 1.
MINSTANCE mInst = 0;
motorCounts = 324255;
// Should be retrieved from the motion controller.
int mcMotionSetPos(mInst, 1, motorCounts);



================================================================================
[701/904] mcMotionSetProbeComplete
Source: mcMotionSetProbeComplete.htm
================================================================================

mcMotionSetProbeComplete
mcMotionSetProbeComplete
C/C++ Syntax:
int mcMotionSetProbeComplete(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Inform the core that a probe operation is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Calling this function assumes that a probe stike has happened and that the probed positions have been reproted.
Usage:
// Complete a probe operation.
MINSTANCE mInst = 0;
int rc = mcMotionSetProbeComplete(mInst);



================================================================================
[702/904] mcMotionSetProbePos
Source: mcMotionSetProbePos.htm
================================================================================

mcMotionSetProbePos
mcMotionSetProbePos
C/C++ Syntax:
int mcMotionSetProbePos(
		MINSTANCE mInst, 
		int motorId, 
		double val);
LUA Syntax:
N/A
Description:
Report the probed position for the given motor to the core.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
A double specifying the probed motor position in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
When the probe strikes, the position needs to be reported to the core.
Usage:
// Set the probed position for motor 0.
MINSTANCE mInst = 0;
double probedPos = 2314134;
// Should be reteived from motion controller latch registers.
int rc = mcMotionSetProbePos(mInst, 0, double val);



================================================================================
[703/904] mcMotionSetStill
Source: mcMotionSetStill.htm
================================================================================

mcMotionSetStill
mcMotionSetStill
C/C++ Syntax:
int mcMotionSetStill(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Report when the given motor is still.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
The core will request a stop report in order to synchronize events with the end of movement.  This is a very important thing to get correct in a motion plugin.  This is how the core will know to stop waiting on M code or any other G code that breaks the CV chain.
Usage:
// Motor stop report example.
MINSTANCE mInst = 0;
execution_t ex;
mcMotionCyclePlannerEx(m_cid, &ex);
switch(ex.exType) {
case EX_STOP_REQ:
	// See if we need to report when the motors are still.
	for (i = 0; i < 8; i++) {
		if (ex.exMotors[i].reportStopped == TRUE) {
// Report when this motor has completed all previous moves!
}
	}
	break;
	...
}



================================================================================
[704/904] mcMotionSetThreadingRate
Source: mcMotionSetThreadingRate.htm
================================================================================

mcMotionSetThreadingRate
mcMotionSetThreadingRate
C/C++ Syntax:
int mcMotionSetThreadingRate(
		MINSTANCE mInst, 
		double ratio);
LUA Syntax:
N/A
Description:
Set the threading skew ratio.
Parameters:
Parameter
Description
mInst
The controller instance.
ratio
A double specifying the skew ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the threading ratio.
MINSTANCE mInst = 0;
int rc = mcMotionSetThreadingRate(mInst, 1.2);



================================================================================
[705/904] mcMotionSetVel
Source: mcMotionSetVel.htm
================================================================================

mcMotionSetVel
mcMotionSetVel
C/C++ Syntax:
int mcMotionSetVel(
		MINSTANCE mInst, 
		int motorId, 
		double velocity);
LUA Syntax:
N/A
Description:
Report the velocity (in counts per second squared) to the core for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
velocity
A double specifying the velocity in counts per second squared.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Motion plugins use this function to report motor velocities to the core.
Usage:
// Report the velocity for motor 0.
MINSTANCE mInst = 0;
double vel = 2342420;
// Should be obtained from the motion controller.
int mcMotionSetVel(mInst, 0, vel);



================================================================================
[706/904] mcMotionSync
Source: mcMotionSync.htm
================================================================================

mcMotionSync
mcMotionSync
C/C++ Syntax:
int mcMotionSync(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Synchronize the core planners with the last reported motor positions.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If movement has been done outside of direction from the core, the planners must be synced to the new motor positons.
Usage:
// Synch core planner positions with the last reported motor positions.
MINSTANCE mInst = 0;
int rc = mcMotionSync(mInst);



================================================================================
[707/904] mcMotionThreadComplete
Source: mcMotionThreadComplete.htm
================================================================================

mcMotionThreadComplete
mcMotionThreadComplete
C/C++ Syntax:
int mcMotionThreadComplete(
		MINSTANCE mInst);
LUA Syntax:
N/A
Description:
Inform the core that the threading operation is complete.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the motion controller is profiling all of the threading moves, the core must be informed when the threading operation is complete.
Usage:
// Report that the threading op is complete.
MINSTANCE mInst = 0;
int rc = mcMotionThreadComplete(mInst);



================================================================================
[708/904] mcMotorGetAxis
Source: mcMotorGetAxis.htm
================================================================================

mcMotorGetAxis
mcMotorGetAxis
C/C++ Syntax:
int mcMotorGetAxis(
		MINSTANCE mInst, 
		int motorId, 
		int *axisId)
LUA Syntax:
axisId, rc = mc.mcMotorGetAxis(
		number mInst, 
		number motorId)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
axisId
The address of an interger to receive the motor's mapped axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_AXIS_NOT_FOUND
No axis has the specified motor mapped.
Notes:
axisId
will be -1 if the function returns MERROR_AXIS_NOT_FOUND.
Usage:
// Get the parent axis for motor 0.
MINSTANCE mInst = 0;
int axisId = -1;
int rc = mcMotorGetAxis(mInst, 0, &axisId);



================================================================================
[709/904] mcMotorGetCountsPerUnit
Source: mcMotorGetCountsPerUnit.htm
================================================================================

mcMotorGetCountsPerUnit
mcMotorGetCountsPerUnit
C/C++ Syntax:
int mcMotorGetCountsPerUnit(
		MINSTANCE mInst, 
		int motorId, 
		double *counts)
LUA Syntax:
counts, rc = mc.mcMotorGetCountsPerUnit(
		number mInst, 
		number motorId)
Description:
Retrieve the counts per native machine units for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
The address of a double to receive the counts value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the counts per unit for motor 0.
MINSTANCE mInst = 0;
double counts = 0.0;
int rc = mcMotorGetCountsPerUnit(mInst, 0, &counts);



================================================================================
[710/904] mcMotorGetInfoStruct
Source: mcMotorGetInfoStruct.htm
================================================================================

mcMotorGetInfoStruct
mcMotorGetInfoStruct
C/C++ Syntax:
mcMotorGetInfoStruct(
		MINSTANCE mInst, 
		int motorId, 
		motorinfo_t *minf);
LUA Syntax:
N/A
Description:
Retrieve the motor information of the motor in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
minf
The address of a motorinfo_t struct to receive the motor settings.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
minf
cannot be NULL.
Notes:
Retrieve all the motor settings in one call.
To change any of the settings mcMotorSetInfoStruct() may be called.
struct motorinfo {
	double CountsPerUnit;    // Number of encoder counts or steps per unit.
	double MaxVelocity;      // Max velocity of the axis.
	double MaxAcceleration;  // Max rate to accelerate.
	BOOL   Reverse;          // Is the axis reversed?
	double BacklashAmount;   // The amount of backlash in counts.
	double CurrentVelocity;  // The speed the axis is moving, This could be reported by the motion deivce.
	int    CurrentPosition;  // The Current Position (From the motion device).
	BOOL   Homed;            // True if the axis has been homed.
	long   SoftMaxLimit;     // Count for the max travel.
	long   SoftMinLimit;     // Count for the min travel.
	BOOL   CanHome;          // Can this motor home?
	BOOL   Enabled;          // Is this motor enabled?
	long   EnableDelay;      // ms to delay the enable signal for this motor.
	int    AxisId;           // -1 if no axis has mapped this motor.
};
typedef struct motorinfo motorinfo_t;
Usage:
MINSTANCE mInst = 0;
int m = 2;
motorinfo_t minf;
mcMotorGetInfoStruct(mInst, m, &minf);
// Get data for motor 2.



================================================================================
[711/904] mcMotorGetMaxAccel
Source: mcMotorGetMaxAccel.htm
================================================================================

mcMotorGetMaxAccel
mcMotorGetMaxAccel
C/C++ Syntax:
int mcMotorGetMaxAccel(
		MINSTANCE mInst, 
		int motorId, 
		double *maxAccel);
LUA Syntax:
maxAccel, rc = mc.mcMotorGetMaxAccel(
		number mInst, 
		number motorId)
Description:
Retrieve the maximum acceleration value for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxAccel
The address of a double to receive the maximum acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the max accel for motor 0.
MINSTANCE mInst = 0;
double maxAccel = 0.0;
int rc = mcMotorGetMaxAccel(mInst, 0, &maxAccel);



================================================================================
[712/904] mcMotorGetMaxVel
Source: mcMotorGetMaxVel.htm
================================================================================

mcMotorGetMaxVel
mcMotorGetMaxVel
C/C++ Syntax:
int mcMotorGetMaxVel(
		MINSTANCE mInst, 
		int motorId, 
		double *maxVel)
LUA Syntax:
maxVel, rc = mc.mcMotorGetMaxVel(
		number mInst, 
		number motorId)
Description:
Retrieve the maximum velocity for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
The address of a double to receive the maximum velocity value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Get the max vel for motor 0.
MINSTANCE mInst = 0;
double maxVel = 0.0;
int rc = mcMotorGetMaxVel(mInst, 0, &maxVel);



================================================================================
[713/904] mcMotorGetPos
Source: mcMotorGetPos.htm
================================================================================

mcMotorGetPos
mcMotorGetPos
C/C++ Syntax:
int mcMotorGetPos(
		MINSTANCE mInst, 
		int motorId, 
		double *val);
LUA Syntax:
val, rc = mc.mcMotorGetPos(
		number mInst, 
		number motorId)
Description:
Retrieve the position of the given motor in counts (fractional counts supported).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
val
The address of a double to receive the motor position.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
val
cannot be NULL.
Notes:
If the motor is not setup,
val
will contain zero.
Usage:
MINSTANCE mInst = 0;
double Motor1Pos = 0;
// Get the position of the Motor 1.
mcMotorGetPos(mInst, 1, &Motor1Pos);



================================================================================
[714/904] mcMotorGetVel
Source: mcMotorGetVel.htm
================================================================================

mcMotorGetVel
mcMotorGetVel
C/C++ Syntax:
int mcMotorGetVel(
		MINSTANCE mInst, 
		int motor, 
		double *velocity);
LUA Syntax:
velocity, rc = mc.mcMotorGetVel(
		number mInst, 
		number motor)
Description:
Retreive the current velocity of a motor in counts per sec.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
velocity
The address of a double to receive the motor velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
velocity
cannot be NULL.
Notes:
Reports the speed of a motor.  The returned value can be fractional counts.
If the motor is not found, a value of zero is returned in velocity.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
double CurrentVel = 0;
mcMotorSetVel(mInst, m, &CurrentVel);
// Get the current speed of motor2.



================================================================================
[715/904] mcMotorIsHomed
Source: mcMotorIsHomed.htm
================================================================================

mcMotorIsHomed
mcMotorIsHomed
C/C++ Syntax:
int mcMotorIsHomed(
		MINSTANCE mInst, 
		int motorId, 
		BOOL *homed);
LUA Syntax:
homed, rc = mc.mcMotorIsHomed(
		number mInst, 
		number motorId)
Description:
Get the homed state of the motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
homed
The address of a BOOL to receive the homed state of a motor. (TRUE/FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
homed
cannot be NULL.
Notes:
Reports the homed state of the motor.  The returned value 1 for homed and 0 for not homed.
All child motors linked to axis must be homed for the axis to report as homed.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
int Homed = 0;
mcMotorIsHomed(mInst, m, &Homed);
// Get the homed state of motor2.



================================================================================
[716/904] mcMotorIsStill
Source: mcMotorIsStill.htm
================================================================================

mcMotorIsStill
mcMotorIsStill
C/C++ Syntax:
int mcMotorIsStill(
		MINSTANCE mInst, 
		int motorId, 
		BOOL *still);
LUA Syntax:
still, rc = mc.mcMotorIsStill(
		number mInst, 
		number motorId)
Description:
Set the motor is not moving from motion Motion plugin that owns this motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorID
The motor id.
still
The address of an BOOL to receive the still state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
still
cannot be NULL.
Notes:
Motor has its "isStill" when it is not in motion.
still
== TRUE is no movement,
still
== FALSE motor has movment.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR0;
int still = 0;
mcMotorSetStill(mInst, m, &still);
// Get the state if MOTOR0 is still



================================================================================
[717/904] mcMotorMapGetDefinition
Source: mcMotorMapGetDefinition.htm
================================================================================

mcMotorMapGetDefinition
mcMotorMapGetDefinition
C/C++ Syntax:
int mcMotorMapGetDefinition(
		MINSTANCE mInst, 
		int motorId, 
		long *lengthCounts, 
		long *numPoints);
LUA Syntax:
lengthCounts, numPoints, rc = mc.mcMotorMapGetDefinition(
		number mInst, 
		number motorId)
Description:
Retrieve the motor screw map definition.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
lengthCounts
and
numPoints
are NULL.
Notes:
None.
Usage:
//
MINSTANCE mInst = 0;
long lengthCounts;
long numPoints;
int rc = mcMotorMapGetDefinition(mInst, 0, &lengthCounts, &numPoints);



================================================================================
[718/904] mcMotorMapGetLength
Source: mcMotorMapGetLength.htm
================================================================================

mcMotorMapGetLength
mcMotorMapGetLength
C/C++ Syntax:
int mcMotorMapGetLength(
		MINSTANCE mInst, 
		int motorId, 
		int *length);
LUA Syntax:
length, rc = mcMotorMapGetLength(
		number mInst, 
		number motorId)
Description:
Retrieve the motor screw map length (length of measured screw in counts).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
length
the address of an integer to receive the screw length in counts.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
length
is NULL.
Notes:
None.
Usage:
// Get the screw length for motor zero.
MINSTANCE mInst = 0;
int length;
int rc = mcMotorMapGetLength(mInst, 0, &length);



================================================================================
[719/904] mcMotorMapGetNPoints
Source: mcMotorMapGetNPoints.htm
================================================================================

mcMotorMapGetNPoints
mcMotorMapGetNPoints
C/C++ Syntax:
int mcMotorMapGetNPoints(
		MINSTANCE mInst, 
		int motorId, 
		int *points);
LUA Syntax:
points, rc = mc.mcMotorMapGetNPoints(
		number mInst, 
		number motorId)
Description:
Retrieve the number of measurement points in the screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
the address of an integer to receive the number of measurement points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is NULL.
Notes:
Depricated.  Use mcMotoMapGetPointCount() instead.



================================================================================
[720/904] mcMotorMapGetPoint
Source: mcMotorMapGetPoint.htm
================================================================================

mcMotorMapGetPoint
mcMotorMapGetPoint
C/C++ Syntax:
int mcMotorMapGetPoint(
		MINSTANCE mInst, 
		int motorId, 
		int point, 
		int *error);
LUA Syntax:
error, rc = mc.mcMotorMapGetPoint(
		numbser mInst, 
		numbser motorId, 
		numbser point)
Description:
Retrieves the screw map error for the given motor and point.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
point
An integer specifying the measurement point number.
error
the address of an integer to receive the screw error (in counts).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
error
is NULL.
Notes:
None.
Usage:
// Get the screw map error for motor 0, measurement point 10.
MINSTANCE mInst = 0;
int screwErr; 
int rc = mcMotorMapGetPoint(mInst, 0, 10, &screwErr);



================================================================================
[721/904] mcMotorMapGetPointCount
Source: mcMotorMapGetPointCount.htm
================================================================================

mcMotorMapGetPointCount
mcMotorMapGetPointCount
C/C++ Syntax:
int mcMotorMapGetPointCount(
		MINSTANCE mInst, 
		int motorId, 
		int *points);
LUA Syntax:
points, rc = mc.mcMotorMapGetPointCount(
		number mInst, 
		number motorId)
Description:
Retrieve the number of measurement points in the screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
the address of an integer to receive the number of measurement points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is NULL.
Notes:
None.
Usage:
// Get the number of measurement points.
MINSTANCE mInst = 0;
int points;
int rc = mcMotorMapGetPointCount(mInst, 0, &points);



================================================================================
[722/904] mcMotorMapGetStart
Source: mcMotorMapGetStart.htm
================================================================================

mcMotorMapGetStart
mcMotorMapGetStart
C/C++ Syntax:
int mcMotorMapGetStart(
		MINSTANCE mInst, 
		int motorId, 
		int *startPoint);
LUA Syntax:
startPoint, rc = mc.mcMotorMapGetStart(
		number mInst, 
		number motorId)
Description:
Retrieve the starting point of the motor screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
startPoint
The address of an integer to receive the screw map starting point.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
startPoint
is NULL.
Notes:
None.
Usage:
// Get the starting point for the motor 0 screw map.
MINSTANCE mInst = 0;
int startPoint;
int rc = mcMotorMapGetStart(mInst, 0, &startPoint);



================================================================================
[723/904] mcMotorMapSetDefinition
Source: mcMotorMapSetDefinition.htm
================================================================================

mcMotorMapSetDefinition
mcMotorMapSetDefinition
C/C++ Syntax:
int mcMotorMapSetDefinition(
		MINSTANCE mInst, 
		int motorId, 
		long lengthCounts, 
		long numPoints);
LUA Syntax:
rc = mc.mcMotorMapSetDefinition(
		number mInst, 
		number motorId, 
		number lengthCounts,
		number numPoints)
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
lengthCounts
An integer specifying the length of the measured screw in counts.
numPoints
An integer specifying the number of measurement points in the screw map.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
This is the prefered method of defining a motor screw map.
Usage:
// Set the screw map definition for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetDefinition(mInst, 0, 20000, 20);



================================================================================
[724/904] mcMotorMapSetLength
Source: mcMotorMapSetLength.htm
================================================================================

mcMotorMapSetLength
mcMotorMapSetLength
C/C++ Syntax:
int mcMotorMapSetLength(
		MINSTANCE mInst, 
		int motorId, 
		int length);
LUA Syntax:
rc = mc.mcMotorMapSetLength(
		number mInst, 
		number motorId, 
		number length);
Description:
Set the length of the screw (in counts) for the screw map of the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
length
An integer specifying the length.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
length
is less <= 0.
Notes:
None.
Usage:
// Set the screw length for the motor 0 screw map.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetLength(mInst, 0, 20000);



================================================================================
[725/904] mcMotorMapSetNPoints
Source: mcMotorMapSetNPoints.htm
================================================================================

mcMotorMapSetNPoints
mcMotorMapSetNPoints
C/C++ Syntax:
int mcMotorMapSetNPoints(
		MINSTANCE mInst, 
		int motorId, 
		int points);
LUA Syntax:
rc = mc.mcMotorMapSetNPoints(
		number mInst, 
		number motorId, 
		number points);
Description:
Set the number of measured points for the screw map of the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
An integer specifying the number of measured points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is <= 0.
Notes:
Depricated.  Use mcMotorMapSetPointCount() instead.



================================================================================
[726/904] mcMotorMapSetPoint
Source: mcMotorMapSetPoint.htm
================================================================================

mcMotorMapSetPoint
mcMotorMapSetPoint
C/C++ Syntax:
int mcMotorMapSetPoint(
		MINSTANCE mInst, 
		int motorId, 
		int point, 
		int error);
LUA Syntax:
rc = mc.mcMotorMapSetPoint(
		number mInst, 
		number motorId, 
		number point, 
		number error);
Description:
Set the error (in counts) for the screw map point for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
point
An integer specifying the measurement point number.
error
An integer specifying the screw error.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None
Usage:
// Set the error in motor 0 screw map.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetPoint(mInst, 0, 5, 12);



================================================================================
[727/904] mcMotorMapSetPointCount
Source: mcMotorMapSetPointCount.htm
================================================================================

mcMotorMapSetPointCount
mcMotorMapSetPointCount
C/C++ Syntax:
int mcMotorMapSetPointCount(
		MINSTANCE mInst, 
		int motorId, 
		int points);
LUA Syntax:
rc = mc.mcMotorMapSetPointCount(
		number mInst, 
		number motorId, 
		number points);
Description:
Set the number of measured points for the screw map for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
points
An integer specifying the number of measured points.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
points
is <= 0.
Notes:
None.
Usage:
// Set the number of measured points in the screw map for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorMapSetPointCount(mInst, 0, 20);



================================================================================
[728/904] mcMotorMapSetStart
Source: mcMotorMapSetStart.htm
================================================================================

mcMotorMapSetStart
mcMotorMapSetStart
C/C++ Syntax:
int mcMotorMapSetStart(
		MINSTANCE mInst, 
		int motorId, 
		int start);
LUA Syntax:
rc = mc.mcMotorMapSetStart(
		number mInst, 
		number motorId, 
		number start)
Description:
Set the starting point number of the screw map of the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
start
An integer specifying the starting point number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None/
Usage:
// Set the starting point number for the motor 0 screw map. (usually 0)
MINSTANCE mInst = 0;
int rc = mcMotorMapSetStart(mInst, 0, 0);



================================================================================
[729/904] mcMotorRegister
Source: mcMotorRegister.htm
================================================================================

mcMotorRegister
mcMotorRegister
C/C++ Syntax:
mcMotorRegister(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Register a motor to the system (used by motion plugins).
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
motorId
is out of range.
Notes:
Add motor to the core from a motion device. Motion devices can register max of MC_MAX_MOTORS.
Usage:
MINSTANCE mInst = 0;
for (int m = MOTOR0; m < MOTOR4; m++) { 
    mcMotorRegister(mInst, m);
// Register motor0 - motor2 in the core.
}



================================================================================
[730/904] mcMotorSetCountsPerUnit
Source: mcMotorSetCountsPerUnit.htm
================================================================================

mcMotorSetCountsPerUnit
mcMotorSetCountsPerUnit
C/C++ Syntax:
int mcMotorSetCountsPerUnit(
		MINSTANCE mInst, 
		int motorId, 
		double counts);
LUA Syntax:
rc = mc.mcMotorSetCountsPerUnit(
		number mInst, 
		number motorId,
		number counts)
Description:
Set the counts per native machine setup units.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
A double specifying the counts value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set the counts for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorSetCountsPerUnit(mInst, 0, 1024);



================================================================================
[731/904] mcMotorSetHomePos
Source: mcMotorSetHomePos.htm
================================================================================

mcMotorSetHomePos
mcMotorSetHomePos
C/C++ Syntax:
int mcMotorSetHomePos(
		MINSTANCE mInst, 
		int motorId, 
		int count);
LUA Syntax:
rc = mc.mcMotorSetHomePos(
		number mInst, 
		number motorId, 
		number count)
Description:
Set the home position for the motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
count
The positon of the motor away from the home switch
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Sets the position of the motor away from the home switch. This is used to provide a home offest for the motor.
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
int count = 1200;
mcMotorSetHomePos(mInst, m, count);
// Set the Home position of motor2.



================================================================================
[732/904] mcMotorSetInfoStruct
Source: mcMotorSetInfoStruct.htm
================================================================================

mcMotorSetInfoStruct
mcMotorSetInfoStruct
C/C++ Syntax:
int mcMotorSetInfoStruct(
		MINSTANCE mInst, 
		int motoId, 
		motorinfo_t *minf);
LUA Syntax:
N/A
Description:
Retrieve the motor info struct to get all the settings of the motor in one call.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
minf
The address of a motorinfo_t to receive the motor settings.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
MERROR_INVALID_ARG
minf
cannot be NULL.
Notes:
To get cuttent settings mcMotorGetInfoStruct() must be called.
struct motorinfo {
	double CountsPerUnit;    // Number of encoder counts or steps per unit.
	double MaxVelocity;      // Max velocity of the axis.
	double MaxAcceleration;  // Max rate to accelerate.
	BOOL   Reverse;          // Is the axis reversed?
	double BacklashAmount;   // The amount of backlash in counts.
	double CurrentVelocity;  // The speed the axis is moving, This could be reported by the motion deivce.
	int    CurrentPosition;  // The Current Position (From the motion device).
	BOOL   Homed;            // True if the axis has been homed.
	long   SoftMaxLimit;     // Count for the max travel.
	long   SoftMinLimit;     // Count for the min travel.
	BOOL   CanHome;          // Can this motor home?
	BOOL   Enabled;          // Is this motor enabled?
	long   EnableDelay;      // ms to delay the enable signal for this motor.
};
typedef struct motorinfo motorinfo_t;
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
motorinfo_t minf;
mcMotorGetInfoStruct(mInst, m, &minf);
// Get data for motor2.
minf.CountsPerUnit /= 2;
//Divid motor counts per unit by 2.
mcMotorSetInfoStruct(mInst, m, &minf);
// Set data for motor2.



================================================================================
[733/904] mcMotorSetMaxAccel
Source: mcMotorSetMaxAccel.htm
================================================================================

mcMotorSetMaxAccel
mcMotorSetMaxAccel
C/C++ Syntax:
int mcMotorSetMaxAccel(
		MINSTANCE mInst, 
		int motorId, 
		double maxAccel);
LUA Syntax:
rc = mc.mcMotorSetMaxAccel(
		number mInst, 
		number motorId, 
		number maxAccel)
Description:
Set the maximum acceleration value for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxAccel
A double specifying the maximum acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set a new accel value for motor 0.
MINSTANCE mInst = 0;
int mcMotorSetMaxAccel(mInst, 0, 75);



================================================================================
[734/904] mcMotorSetMaxVel
Source: mcMotorSetMaxVel.htm
================================================================================

mcMotorSetMaxVel
mcMotorSetMaxVel
C/C++ Syntax:
int mcMotorSetMaxVel(
		MINSTANCE mInst, 
		int motorId, 
		double maxVel);
LUA Syntax:
rc = mc.mcMotorSetMaxVel(
		number mInst, 
		number motorId,
		number maxVel)
Description:
Set the maximum velocity for the given motor.
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
An integer specifying the motor.
maxVel
A double specifying the maximum velocity value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
None.
Usage:
// Set the maximum velocity for motor 0.
MINSTANCE mInst = 0;
int rc = mcMotorSetMaxVel(mInst, 0, 500);



================================================================================
[735/904] mcMotorUnregister
Source: mcMotorUnregister.htm
================================================================================

mcMotorUnregister
mcMotorUnregister
C/C++ Syntax:
int mcMotorUnregister(
		MINSTANCE mInst, 
		int motorId);
LUA Syntax:
N/A
Description:
Unregister a motor from the core (usually not used.)
Parameters:
Parameter
Description
mInst
The controller instance.
motorId
The motor id.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_MOTOR_NOT_FOUND
The motor specified by
motorId
was not found.
Notes:
Remove motor from the core, this should only be done by the owner of the motor (Motion plugin).
Usage:
MINSTANCE mInst = 0;
int m = MOTOR2;
mcMotorUnregister(mInst, m);
// Unregister motor2 from the Core.



================================================================================
[736/904] mcMpgGetAccel
Source: mcMpgGetAccel.htm
================================================================================

mcMpgGetAccel
mcMpgGetAccel
C/C++ Syntax:
int mcMpgGetAccel(
		MINSTANCE mInst, 
		int mpg, 
		double *percentMaxAccel);
LUA Syntax:
percentMaxAccel, rc = mc.mcMpgGetAccel(
		number mInst, 
		number mpg)
Description:
Get the percentage of the maximum acceleration for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxAccel
The address of a double to receive the max acceleration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentMaxAccel
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the current accel for MPG 0.
MINSTANCE mInst = 0;
double percentMaxAccel = 0;
int rc;
rc = mcMpgGetAccel(mInst, 0, &percentMaxAccel);



================================================================================
[737/904] mcMpgGetAxis
Source: mcMpgGetAxis.htm
================================================================================

mcMpgGetAxis
mcMpgGetAxis
C/C++ Syntax:
int mcMpgGetAxis(
		MINSTANCE mInst, 
		int mpg, 
		int *axisId);
LUA Syntax:
axisId, rc = mc.mcMpgGetAxis(
		number mInst, 
		number mpg)
Description:
Retrieve the current axis for the specified MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
axisId
the address of a integer to revceive the axis ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
axisId
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the currently selected axis for MPG 0.
MINSTANCE mInst = 0;
int axisId;
int rc = mcMpgGetAxis(mInst, 0, &axisId);



================================================================================
[738/904] mcMpgGetCountsPerDetent
Source: mcMpgGetCountsPerDetent.htm
================================================================================

mcMpgGetCountsPerDetent
mcMpgGetCountsPerDetent
C/C++ Syntax:
int mcMpgGetCountsPerDetent(
		MINSTANCE mInst, 
		int mpg, 
		int *pulses);
LUA Syntax:
pulses, rc = mc.mcMpgGetCountsPerDetent(
		number mInst, 
		number mpg)
Description:
Retrieves the number of pulse required to move 1 unit for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
pulses
The address of an integer to receive the pulse count.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
pulses
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the counts per detent for MPG 0.
MINSTANCE mInst = 0;
int cnts;
int rc = mcMpgGetCountsPerDetent(mInst, 0, &cnts);



================================================================================
[739/904] mcMpgGetEnable
Source: mcMpgGetEnable.htm
================================================================================

mcMpgGetEnable
mcMpgGetEnable
C/C++ Syntax:
int mcMpgGetEnable(
		MINSTANCE mInst, 
		int mpg, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcMpgGetEnable(
		number mInst, 
		number mpg)
Description:
Get the enabled status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
enabled
The address of a BOOL to receive the MPG's enabled status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the enabled status of MPG 0.
MINSTANCE mInst = 0;
BOOL enabled = MC_FALSE;

int rc = mcMpgGetEnable(mInst, 0, &enabled);



================================================================================
[740/904] mcMpgGetEncoderReg
Source: mcMpgGetEncoderReg.htm
================================================================================

mcMpgGetEncoderReg
mcMpgGetEncoderReg
C/C++ Syntax:
int mcMpgGetEncoderReg(
		MINSTANCE mInst, 
		int mpg, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcMpgGetEncoderReg(
		number mInst, 
		number mpg)
Description:
Get the current encoder register that is associated to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
hReg
The address of a MCHREG to receive the encoder register's handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
hReg
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the current encoder associated with MPG 0.
MINSTANCE mInst = 0;
HMCREG hReg = 0;

int rc = mcMpgGetEncoderReg(mInst, 0, &hReg);



================================================================================
[741/904] mcMpgGetInc
Source: mcMpgGetInc.htm
================================================================================

mcMpgGetInc
mcMpgGetInc
C/C++ Syntax:
int mcMpgGetInc(
		MINSTANCE mInst, 
		int mpg, 
		double *inc);
LUA Syntax:
inc, rc = mc.mcMpgGetInc(
		number mInst, 
		number mpg)
Description:
Retrieve the increment for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
inc
The address of a double to receive the increment value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
inc
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the incremnt for MPG 0.
MINSTANCE mInst = 0;
double inc;
int rc = mcMpgGetInc(mInst, 0, &inc);



================================================================================
[742/904] mcMpgGetRate
Source: mcMpgGetRate.htm
================================================================================

mcMpgGetRate
mcMpgGetRate
C/C++ Syntax:
int mcMpgGetRate(
		MINSTANCE mInst, 
		int mpg, 
		double *percentMaxVel);
LUA Syntax:
percentMaxVel, rc = mc.mcMpgGetRate(
		number mInst, 
		number mpg)
Description:
Retrieve the percentage of the maximum velocity for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxVel
The address of a double to receive the percentage of max velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentMaxVel
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the velocity percentage for MPG 0.
MINSTANCE mInst = 0;
double velPercent;
int rc = mcMpgGetRate(mInst, 0, &velPercent);



================================================================================
[743/904] mcMpgGetReversed
Source: mcMpgGetReversed.htm
================================================================================

mcMpgGetReversed
mcMpgGetReversed
C/C++ Syntax:
int mcMpgGetReversed(
		MINSTANCE mInst, 
		int mpg, 
		BOOL *reversed);
LUA Syntax:
reversed, rc = mc.mcMpgGetReversed(
		number mInst, 
		number mpg)
Description:
Get the reveresed status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
reversed
The address of a BOOL to receive the MPG's reversed status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
reversed
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the reversed status of MPG 0.
MINSTANCE mInst = 0;
BOOL reversed = MC_FALSE;

int rc = mcMpgGetReversed(mInst, 0, &reversed);



================================================================================
[744/904] mcMpgGetShuttleMode
Source: mcMpgGetShuttleMode.htm
================================================================================

mcMpgGetShuttleMode
mcMpgGetShuttleMode
C/C++ Syntax:
int mcMpgGetShuttleMode(
		MINSTANCE mInst, 
		BOOL *on);
LUA Syntax:
on, rc = mc.mcMpgGetShuttleMode(
		number mInst)
Description:
Determine the state of MPG shuttle mode.
Parameters:
Parameter
Description
mInst
The controller instance.
on
The address of a BOOL to receive the state of MPG shuttle mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
on
is NULL.
Notes:
None.
Usage:
// Check the state of MPG shuttle mode.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcMpgGetShuttleMode(mInst, &enabled);



================================================================================
[745/904] mcMpgGetShuttlePercent
Source: mcMpgGetShuttlePercent.htm
================================================================================

mcMpgGetShuttlePercent
mcMpgGetShuttlePercent
C/C++ Syntax:
int mcMpgGetShuttlePercent(
		MINSTANCE mInst, 
		int mpg, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcMpgGetShuttlePercent(
		number mInst, 
		number mpg)
Description:
Retrieve the shuttle mode rate percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percent
The address of a double to receive the shuttle rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentage
is NULL or
mpg
is out of range.
Notes:
None.
Usage:
// Get the shuttle percentage for MPG 0.
MINSTANCE mInst = 0;
double percent;
int rc = mcMpgGetShuttlePercentage(mInst, 0, &percent);



================================================================================
[746/904] mcMpgMoveCounts
Source: mcMpgMoveCounts.htm
================================================================================

mcMpgMoveCounts
mcMpgMoveCounts
C/C++ Syntax:
int mcMpgMoveCounts(
		MINSTANCE mInst, 
		int mpg, 
		int deltaCounts);
LUA Syntax:
rc = mc.mcMpgMoveCounts(
		number mInst, 
		number mpg, 
		number deltaCounts)
Description:
Move the axis mapped to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
deltaCounts
An integer specifying the number of counts the MPG has moved.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
This is the main MPG function that a plugin that supports encoders will use.  All the plugin has to do is report the delta difference between reads of the encoder.
Usage:
// Move the MPG 0 "n" counts.
MINSTANCE mInst = 0;
int n = 16;
int rc = mcMpgMoveCounts(mInst, 0, n);



================================================================================
[747/904] mcMpgSetAccel
Source: mcMpgSetAccel.htm
================================================================================

mcMpgSetAccel
mcMpgSetAccel
C/C++ Syntax:
int mcMpgSetAccel(
		MINSTANCE mInst, 
		int mpg, 
		double percentMaxAccel);
LUA Syntax:
rc = mc.mcMpgSetAccel(
		number mInst, 
		number mpg, 
		number percentMaxAccel)
Description:
Set the acceration percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxAccel
A double specifying the accelration percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
The accelation percentage is based off of the maximum acceleration values for the currently mapped axis.
The percentage is expressed as a whole percentage.  e.g. 20.5 for 20 and a half percent.
Usage:
// Set the acceleration value for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetAccel(mInst, 0, 20.5);



================================================================================
[748/904] mcMpgSetAxis
Source: mcMpgSetAxis.htm
================================================================================

mcMpgSetAxis
mcMpgSetAxis
C/C++ Syntax:
int mcMpgSetAxis(
		MINSTANCE mInst, 
		int mpg, 
		int axisId);
LUA Syntax:
rc = mc.mcMpgSetAxis(
		number mInst, 
		number mpg, 
		number axis)
Description:
Set the current driven axis for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
axisId
An integer specifying the axis.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set MPG 0 to move the X axis.
MINSTANCE mInst = 0;
int rc = mcMpgSetAxis(mInst, 0, X_AXIS);



================================================================================
[749/904] mcMpgSetCountsPerDetent
Source: mcMpgSetCountsPerDetent.htm
================================================================================

mcMpgSetCountsPerDetent
mcMpgSetCountsPerDetent
C/C++ Syntax:
int mcMpgSetCountsPerDetent(
		MINSTANCE mInst, 
		int mpg, 
		int pulses);
LUA Syntax:
rc = mc.mcMpgSetCountsPerDetent(
		number mInst, 
		number mpg, 
		number pulses);
Description:
Set the number of counts the MPG outputs for 1 detent. (usually 4)
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
pulses
An integer specifying the number of counts per detent.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the number of counts per detent for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetCountsPerDetent(mInst, 0, 4);



================================================================================
[750/904] mcMpgSetEnable
Source: mcMpgSetEnable.htm
================================================================================

mcMpgSetEnable
mcMpgSetEnable
C/C++ Syntax:
int mcMpgSetEnable(
		MINSTANCE mInst, 
		int mpg, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcMpgSetEnable(
		number mInst, 
		number mpg
		number enabled)
Description:
Get the current encoder register that is associated to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
enabled
The MPG's enabled status. (MC_TRUE or MC_FALSE)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the enabled status of MPG 0.
MINSTANCE mInst = 0;
BOOL enabled = MC_FALSE;

int rc = mcMpgSetEnable(mInst, 0, MC_TRUE);



================================================================================
[751/904] mcMpgSetEncoderReg
Source: mcMpgSetEncoderReg.htm
================================================================================

mcMpgSetEncoderReg
mcMpgSetEncoderReg
C/C++ Syntax:
int mcMpgSetEncoderReg(
		MINSTANCE mInst, 
		int mpg, 
		HMCREG hReg);
LUA Syntax:
rc = mc.mcMpgSetEncoderReg(
		number mInst, 
		number mpg
		number hReg)
Description:
Associate an encoder register to the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
hReg
A MCHREG to associate to the given MPG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Associate an encoder with MPG 0.
MINSTANCE mInst = 0;
HMCREG hReg = 0;
int rc
rc = mcRegGetHandle(mInst, "/Sim0/Encoder0", &hReg);
if (rc == MERROR_NOERROR) {
	rc = mcMpgSetEncoderReg(mInst, 0, hReg);
}



================================================================================
[752/904] mcMpgSetInc
Source: mcMpgSetInc.htm
================================================================================

mcMpgSetInc
mcMpgSetInc
C/C++ Syntax:
int mcMpgSetInc(
		MINSTANCE mInst, 
		int mpg, 
		double inc);
LUA Syntax:
rc = mc.mcMpgSetInc(
		number mInst, 
		number mpg, 
		number inc);
Description:
Set the desired incremnt (.100, .010, .001, etc...) for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
inc
A double specifying the increment.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Set the increment to .001 for MPG 0.
MINSTANCE mInst = 0;
int rc = mcMpgSetInc(mInst, 0, .001);



================================================================================
[753/904] mcMpgSetRate
Source: mcMpgSetRate.htm
================================================================================

mcMpgSetRate
mcMpgSetRate
C/C++ Syntax:
int mcMpgSetRate(
		MINSTANCE mInst, 
		int mpg, 
		double percentMaxVel);
LUA Syntax:
rc = mc.mcMpgSetRate(
		number mInst, 
		number mpg, 
		number percentMaxVel)
Description:
Set the percentage of the maximum velocity for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percentMaxVel
A double specifying the percentage of the maximum velocity.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
The velocity percentage is based off of the maximum velocity value for the currently mapped axis.
The percentage is expressed as a whole percentage.  e.g. 20.5 for 20 and a half percent.
Usage:
// Set the rate for MPG 0 to 25.0%
MINSTANCE mInst = 0;
int rc = mcMpgSetRate(mInst, 0, 25.0);



================================================================================
[754/904] mcMpgSetReversed
Source: mcMpgSetReversed.htm
================================================================================

mcMpgSetReversed
mcMpgSetReversed
C/C++ Syntax:
int mcMpgSetReversed(
		MINSTANCE mInst, 
		int mpg, 
		BOOL reversed);
LUA Syntax:
rc = mc.mcMpgGetReversed(
		number mInst, 
		number mpg
		number reversed)
Description:
Set the reveresed status for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
reversed
The MPG's reversed status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
mpg
is out of range.
Notes:
None.
Usage:
// Get the reversed status of MPG 0.
MINSTANCE mInst = 0;
BOOL reversed = MC_FALSE;

int rc = mcMpgSetReversed(mInst, 0, reversed);
// MC_TRUE



================================================================================
[755/904] mcMpgSetShuttleMode
Source: mcMpgSetShuttleMode.htm
================================================================================

mcMpgSetShuttleMode
mcMpgSetShuttleMode
C/C++ Syntax:
int mcMpgSetShuttleMode(
		MINSTANCE mInst, 
		BOOL on);
LUA Syntax:
rc = mc.mcMpgSetShuttleMode(
		number mInst, 
		number on);
Description:
Set the state of MPG shuttle mode.
Parameters:
Parameter
Description
mInst
The controller instance.
on
A BOOL specifying the state of the MPG shuttle mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on MPG shuttle mode.
MINSTANCE mInst = 0;
int rc = mcMpgSetShuttleMode(mInst, MC_ON);



================================================================================
[756/904] mcMpgSetShuttlePercent
Source: mcMpgSetShuttlePercent.htm
================================================================================

mcMpgSetShuttlePercent
mcMpgSetShuttlePercent
C/C++ Syntax:
int mcMpgSetShuttlePercent(
		MINSTANCE mInst, 
		int mpg, 
		double percent);
LUA Syntax:
rc = mc.mcMpgGetShuttlePercent(
		number mInst, 
		number mpg
		number percent)
Description:
Set the shuttle mode rate percentage for the given MPG.
Parameters:
Parameter
Description
mInst
The controller instance.
mpg
An integer specifying the MPG.
percent
The desired shuttle rate percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percentage
is out of range or
mpg
is out of range.
Notes:
None.
Usage:
// Set the shuttle percentage for MPG 0.
MINSTANCE mInst = 0;
double percent = 200.5;
int rc = mcMpgGetShuttlePercentage(mInst, 0, percent);



================================================================================
[757/904] mcPluginConfigure
Source: mcPluginConfigure.htm
================================================================================

mcPluginConfigure
mcPluginConfigure
C/C++ Syntax:
int mcPluginConfigure(
		MINSTANCE mInst, 
		int plugId);
LUA Syntax:
N/A
Description:
Display the plugin configuration dialog for the given plugin ID.
Parameters:
Parameter
Description
mInst
The controller instance.
plugId
An integer specifying the plugin ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
plugId
was not found.
Notes:
Plugins can contain multiple devices.  However, only one configuration dialog is used so plugins must have a dialog that is capable of configuring every device that belongs to it (if needed).
Usage:
MINSTANCE mInst = 0;
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc = mcPluginGetInfoStruct(hPlug, &pluginf);
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
// Call the configuration dialog.
rc =
mcPluginConfigure(mInst, pluginId);
;
	}
}



================================================================================
[758/904] mcPluginCoreLoad
Source: mcPluginCoreLoad.htm
================================================================================

mcPluginCoreLoad
mcPluginCoreLoad
C/C++ Syntax:
int mcPluginCoreLoad(
		const char *shortName);
LUA Syntax:
N/A
Description:
Load a plugin into the core.
Parameters:
Parameter
Description
shortName
A string buffer specifying the base name of the plugin.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
shortName
was not found.
Notes:
Normally, all plugins are found and loaded by the core at stratup.  This function provides a means to load a plugin after startup.  For instance, if the plugin was installed after startup.  The function uses the base name of the plugin to locate it by appending the platform specific extension (
m4pw
for Windows,
m4pl
for Linux, and
m4pm
for Mac).
Usage:
// Load the mcGalil plugin.
int rc = mcPluginCoreLoad("mcGalil");



================================================================================
[759/904] mcPluginCoreUnload
Source: mcPluginCoreUnload.htm
================================================================================

mcPluginCoreUnload
mcPluginCoreUnload
C/C++ Syntax:
int mcPluginCoreUnload(
		const char *shortName);
LUA Syntax:
N/A
Description:
Unload a plugin from the core.
Parameters:
Parameter
Description
shortName
A string buffer specifying the base name of the plugin.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
shortName
was not found.
Notes:
About the only reason to unload a plugin from the core is if it is being uninstalled.  Plugins should be tested during their development to ensure that they can be unloaded safely without causing crashes or other abnormal behavior.
Usage:
// Unload the mcGalil plugin.
int rc = mcPluginCoreUnload("mcGalil");



================================================================================
[760/904] mcPluginDiagnostic
Source: mcPluginDiagnostic.htm
================================================================================

mcPluginDiagnostic
mcPluginDiagnostic
C/C++ Syntax:
int mcPluginDiagnostic(
		MINSTANCE mInst, 
		int pluginId);
LUA Syntax:
N/A
Description:
Display the plugin diagnostic dialog for the given plugin ID.
Parameters:
Parameter
Description
mInst
The controller instance.
plugId
An integer specifying the plugin ID.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
plugId
was not found.
Notes:
Plugins can contain multiple devices.  However, only one diagnostic dialog is used so plugins must have a dialog that is capable of diagnosing every device that belongs to it (if needed).
Usage:
MINSTANCE mInst = 0;
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins looking for plugins
// that have diagnostic dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_DIAG, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc = mcPluginGetInfoStruct(hPlug, &pluginf);
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
// Call the diagnostics dialog.
rc =
mcPluginDiagnostic(mInst, pluginId);
;
	}
}



================================================================================
[761/904] mcPluginEnable
Source: mcPluginEnable.htm
================================================================================

mcPluginEnable
mcPluginEnable
C/C++ Syntax:
int mcPluginEnable(
		HMCPLUG hPlug, 
		BOOL enable);
LUA Syntax:
N/A
Description:
Enable a plugin.
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
enable
A BOOL specifying the plugin enable state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
Notes:
None.
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// Enable the plugin.
rc =
mcPluginEnable(hPlug, TRUE)
;
}



================================================================================
[762/904] mcPluginGetEnabled
Source: mcPluginGetEnabled.htm
================================================================================

mcPluginGetEnabled
mcPluginGetEnabled
C/C++ Syntax:
int mcPluginGetEnabled(
		HMCPLUG hPlug, 
		BOOL *enabled);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
enabled
The address of a BOOL to receive plugin enable state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_INVALID_ARG
enabled
is NULL.
Notes:
Usage:
HMCPLUG hPlug = 0;
BOOL enabled = FALSE;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs.
while (mcPluginGetNextHandle(PLUG_TYPE_CONFIG, hPlug, &hPlug) == MERROR_NOERROR) {
// See if the plugin is enabled..
rc =
mcPluginGetEnabled(hPlug, &enabled)
;
	if (rc == MERROR_NOERROR) {
		if (enabled == TRUE) {
// The plugin is enabled!!!
} else {
// The plugin is not enabled!!!
}
	}
}



================================================================================
[763/904] mcPluginGetInfoStruct
Source: mcPluginGetInfoStruct.htm
================================================================================

mcPluginGetInfoStruct
mcPluginGetInfoStruct
C/C++ Syntax:
mcPluginGetInfoStruct(HMCPLUG hPlug, pluginfo_t *pluginf);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle specifying the plugin.
pluginf
The address of a pluginfo_t struct to receive the plugin information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_INVALID_ARG
pluginf
is NULL.
Notes:
Usage:
HMCPLUG hPlug = 0;
pluginfo_t pluginf;
// Loop through all of the plugins.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Get the plugin info that contains the plugin ID.
rc =
mcPluginGetInfoStruct(hPlug, &pluginf)
;
	if (rc == MERROR_NOERROR) {
		int pluginId = pluginf.plugId;
		...
	}
}



================================================================================
[764/904] mcPluginGetLicenseFeature
Source: mcPluginGetLicenseFeature.htm
================================================================================

mcPluginGetLicenseFeature
mcPluginGetLicenseFeature
C/C++ Syntax:
int mcPluginGetLicenseFeature(
		HMCPLUG hPlug, 
		int index, 
		char *buf, 
		int bufSize, 
		BOOL *status);
LUA Syntax:
N/A
Description:
Get the plugin licensed features by the given index and return their status (licensed or not).
Parameters:
Parameter
Description
mInst
The controller instance.
index
An integer specifying the index of the license feature to retrieve.
buf
A string buffer to receive the license feature name.
bufSize
The length of the string buffer.
status
The address of a BOOL to receive the license status of the feature (TRUE/FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hPlug
is zero,
buf
or
status
is NULL,
bufSize
is <= 0.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
was not found.
MERROR_NODATA
No more licensed features can be found.
Notes:
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Get all of the plugin license features
int index = 0;
	char buf[80];
	BOOL licensed = FALSE;
	while (
mcPluginGetLicenseFeature(hPlug, index, buf, sizeof(buf), &licensed)
== MERROR_NOERROR) {
		printf("license feature %s is %s.\n", buf, licensed == TRUE ? "licensed" : "not licensed");
		index++;
	}
}



================================================================================
[765/904] mcPluginGetNextHandle
Source: mcPluginGetNextHandle.htm
================================================================================

mcPluginGetNextHandle
mcPluginGetNextHandle
C/C++ Syntax:
int mcPluginGetNextHandle(
		int plugType, 
		HMCPLUG startPlug, 
		HMCPLUG *hPlug);
LUA Syntax:
N/A
Description:
Provides a means of looping through all or only plugins with specific attributes.
Parameters:
Parameter
Description
plugType
An integer specifying the plugin attributes. (PLUG_TYPE_NONE, PLUG_TYPE_MOTION, PLUG_TYPE_IO, PLUG_TYPE_SCRIPT, PLUG_TYPE_CONFIG, PLUG_TYPE_DIAG, PLUG_TYPE_REG, PLUG_TYPE_JOG, PLUG_TYPE_ALL)
startPlug
The starting HMCPLUG handle with which to retrieve the next handle in the list. (Must be 0 to retrieve the first handle in the list)
hPlug
The address of a HMCPLUG to receive the next plugin handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_NODATA
No more plugins with the specified attributes can be found.
Notes:
Usage:
HMCPLUG hPlug = 0;
// Loop through all of the plugins looking for plugins
// that have configuration dialogs and privide I/O.
int attr = PLUG_TYPE_CONFIG | PLUG_TYPE_IO;
while (
mcPluginGetNextHandle(attr, hPlug, &hPlug)
== MERROR_NOERROR) {
// Enable the plugin.
rc = mcPluginEnable(hPlug, TRUE);
}



================================================================================
[766/904] mcPluginGetValid
Source: mcPluginGetValid.htm
================================================================================

mcPluginGetValid
mcPluginGetValid
C/C++ Syntax:
int mcPluginGetValid(
		HMCPLUG hPlug, 
		BOOL *valid);
LUA Syntax:
N/A
Description:
Check to see if the plugin is valid.
Parameters:
Parameter
Description
hPlug
A HMCPLUG specifying the plugin handle.
valid
The address of a BOOL to receive the plugins validity status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hPlug
is 0 or
valid
is NULL
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
cannot be found.
Notes:
Plugin validity is a function of the plugin signature resolving to a certified Mach developer.  If no signature file is provided with the plugin or it is invalid, the plugin will not function.
Plugin signatures are generated with a developer key.  Developer keys can be requested by contacting Newfangled Solutions, LLC.
Usage:
HMCPLUG hPlug = 0;
BOOL valid = FALSE;
// Loop through all of the plugins checking to see if they are valid.
while (mcPluginGetNextHandle(PLUG_TYPE_ALL, hPlug, &hPlug) == MERROR_NOERROR) {
// Check the plugin validity.
rc =
mcPluginGetValid(hPlug, &valid)
;
	if (rc == MERROR_NOERROR) {
		if (valid == TRUE) {
// The plugin is valid and will function.
} else {
// The plugin is invalid and will not function.
}
	}
}



================================================================================
[767/904] mcPluginInstall
Source: mcPluginInstall.htm
================================================================================

mcPluginInstall
mcPluginInstall
C/C++ Syntax:
int mcPluginInstall(
		const char *m4plug);
LUA Syntax:
N/A
Description:
Provides a means of installing a plugin from a plugin archive.
Parameters:
Parameter
Description
m4Plug
A string buffer specifying the plugin archive to install.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin archive specified by
m4Plug
is not valid.
Notes:
Plugin archive name extentions vary by the plafrom.
m4plugw
for Windows,
m4plugl
for Linux,
m4plugm
for Mac.  If one were to try and install a windows plugin archive on a Linux machine, then MERROR_PLUGIN_NOT_FOUND would be returned.
Usage:
// Install the Windows mcGalil plugin from an installation archive.
int rc = mcPluginInstall("mcGalil.m4Plugw");
if (rc == MERROR_NOERROR) {
//The plugin installed successfully.
}



================================================================================
[768/904] mcPluginRegister
Source: mcPluginRegister.htm
================================================================================

mcPluginRegister
mcPluginRegister
C/C++ Syntax:
int mcPluginRegister(
		HMCPLUG hPlug, 
		const char *DeveloperId, 
		const char *Desc, 
		const char *Version, 
		int Type);
LUA Syntax:
N/A
Description:
Registers the plugin to the core.
Parameters:
Parameter
Description
hPlug
A HMCPLUG handle (generated and provided by the core) that defines the current plugin.
DeveloperId
A string buffer specifying the developer ID.
Desc
A string buffer specifying the plugins description.
Version
A string buffer specifying the plugins version.
Type
A integer specifying the plugins attributes (or capabilities).  It can be the logical
OR
combination of PLUG_TYPE_MOTION, PLUG_TYPE_IO, PLUG_TYPE_SCRIPT, PLUG_TYPE_CONFIG, PLUG_TYPE_DIAG, PLUG_TYPE_REG, and PLUG_TYPE_JOG.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_PLUGIN_NOT_FOUND
The plugin specified by
hPlug
is not valid.
Notes:
Once a plugin is found by the core, the core loads the plugin and calls its mcPluginLoad() entry point function.  The plugin should then register itself with the core at this time.
Usage:
// This function gets called (only once) when the Plugin is loaded by Mach Core.
MCP_API int MCP_APIENTRY mcPluginLoad(HMCPLUG id)
{
	...
mcPluginRegister(id, "Newfangled", 
		"Simulator - Newfangled Solutions", MC_VERSION_STR, 
		PLUG_TYPE_MOTION | PLUG_TYPE_IO  | PLUG_TYPE_REG | PLUG_TYPE_CONFIG | PLUG_TYPE_DIAG)
;
	return(MERROR_NOERROR);
}



================================================================================
[769/904] mcPluginRemove
Source: mcPluginRemove.htm
================================================================================

mcPluginRemove
mcPluginRemove
C/C++ Syntax:
int mcPluginRemove(const char *shortName);
LUA Syntax:
N/A
Description:
Unloads a plugin and then rmoves the plugin from the core's Plugins directory.
Parameters:
Parameter
Description
shortName
A string buffer specifying the short name (base name).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
If the plugin sepcified by
shortName
was installed using a plugin archive, then all of the files installed by said archive are removed.  Otherwise, only the plugin itself is removed from the Plugins directory.
Usage:
// Remove the mcGalil plugin.
MINSTANCE mInst = 0;
int rc = mcPluginRemove("mcGalil");



================================================================================
[770/904] mcProfileDeleteKey
Source: mcProfileDeleteKey.htm
================================================================================

mcProfileDeleteKey
mcProfileDeleteKey
C/C++ Syntax:
int mcProfileDeleteKey(
		MINSTANCE mInst, 
		const char *section, 
		const char *key);
LUA Syntax:
rc = mc.mcProfileDeleteKey(
		number mInst, 
		string section, 
		string key)
Description:
Delete key from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A pointer to a char buffer with section string.
key
A pointer to a char buffer with key string.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
mcProfileDeleteKey(mInst , "P_Port", "Frequency");



================================================================================
[771/904] mcProfileDeleteSection
Source: mcProfileDeleteSection.htm
================================================================================

mcProfileDeleteSection
mcProfileDeleteSection
C/C++ Syntax:
int mcProfileDeleteSection(
		MINSTANCE mInst, 
		const char *section);
LUA Syntax:
rc = mc.mcProfileDeleteSection(
		number mInst, 
		string section)
Description:
Delete the specified section from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer buffer specifying the section.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
mcProfileDeleteKey(mInst , "P_Port");



================================================================================
[772/904] mcProfileExists
Source: mcProfileExists.htm
================================================================================

mcProfileExists
mcProfileExists
C/C++ Syntax:
int mcProfileExists(
		MINSTANCE mInst, 
		const char *section, 
		const char *key);
LUA Syntax:
rc = mc.mcProfileExists(
		number mInst, 
		string section, 
		string key)
Description:
Determine if the section or section and key are in the profiles INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
Returns:
Return Code
Description
MC_TRUE
The item pecified by
section
and
key
was found in INI file.
MC_FALSE
The item pecified by
section
and
key
was not found in INI file.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
section
cannot be NULL.
Notes:
If you wish to check only for the existence of a section, use NULL for the value of
key
.
Usage:
MINSTANCE mInst = 0;
mcProfileWriteInt(mInst, "P_Port", "Frequency");



================================================================================
[773/904] mcProfileFlush
Source: mcProfileFlush.htm
================================================================================

mcProfileFlush
mcProfileFlush
C/C++ Syntax:
int mcProfileFlush(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileFlush(
		number mInst)
Description:
Forces the core to commit any profile changes.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This can be used after writing profile entries to make them "stick" immediately instead of lazily being written.
Usage:
MINSTANCE mInst = 0;
mcProfileFlush(mInst);
// Flush changes to the INI file.



================================================================================
[774/904] mcProfileGetDouble
Source: mcProfileGetDouble.htm
================================================================================

mcProfileGetDouble
mcProfileGetDouble
C/C++ Syntax:
mcProfileGetDouble(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		double *retval, 
		double defval);
LUA Syntax:
retval, rc = mc.mcProfileGetDouble(
		number mInst, 
		string section, 
		string key, 
		number defval)
Description:
Read a double value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
retval
The address of a double to receive the value from the section and key location.
defval
The default value if the item is not found.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
double rval=0;
MINSTANCE mInst = 0;
mcProfileGetDouble(mInst , "P_Port", "Frequency", &rval, 25.34);



================================================================================
[775/904] mcProfileGetInt
Source: mcProfileGetInt.htm
================================================================================

mcProfileGetInt
mcProfileGetInt
C/C++ Syntax:
int mcProfileGetInt(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		long *retval, 
		long defval);
LUA Syntax:
retval, rc = mc.mcProfileGetInt(
		number mInst, 
		string section, 
		string key, 
		number defval)
Description:
Read a long value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
retval
The address of a long to receive the value from the section and key location.
defval
The default value if the item is not found.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
long rval=0;
int mInst=0;
mcProfileGetInt(mInst , "P_Port", "Frequency", &rval, 25000);



================================================================================
[776/904] mcProfileGetName
Source: mcProfileGetName.htm
================================================================================

mcProfileGetName
mcProfileGetName
C/C++ Syntax:
int mcProfileGetName(
		MINSTANCE mInst, 
		char *buff, 
		size_t bufsize);
LUA Syntax:
name, rc = mc.mcProfileGetName(
		number mInst)
Description:
Retrieve the current profile name.
Parameters:
Parameter
Description
mInst
The controller instance.
buff
A string buffer to receive the profile's name.
buffsize
The length of the buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
None
Usage:
MINSTANCE mInst = 0;
char buff[80];
memset(buff, 0, 80);
mcProfileGetName(mInst, buff, 80);



================================================================================
[777/904] mcProfileGetString
Source: mcProfileGetString.htm
================================================================================

mcProfileGetString
mcProfileGetString
C/C++ Syntax:
int mcProfileGetString(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		char *buff, 
		long buffsize, 
		const char *defval);
LUA Syntax:
buff, rc = mc.mcProfileGetString(
		MINSTANCE mInst, 
		string section, 
		string key, 
		string defval);
Description:
Read a string value from the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
buff
A string buffer to receive the string from the section and key location.
buffsize
The length of the buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Reading the profile settings can be done at any time.  If
section
and
key
are not in the file, they are created and assigned the default value.
Usage:
MINSTANCE m_inst = 0;
char *key = "BufferedTime";
char buff[80];
memset(buff, 0, 80);
mcProfileGetString(mInst , "SomeSection", key, buff, 80, "0.100");



================================================================================
[778/904] mcProfileReload
Source: mcProfileReload.htm
================================================================================

mcProfileReload
mcProfileReload
C/C++ Syntax:
int mcProfileReload(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileReload(
		number mInst)
Description:
Forces the core to reload the current profile.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The operation could not be completed at this time.
Notes:
Reloading the profile forces the core to pickup external changes.  It must only be called in the idle state.
Usage:
MINSTANCE mInst = 0;
mcProfileReload(mInst);
// Reload the settings from the INI file.



================================================================================
[779/904] mcProfileSave
Source: mcProfileSave.htm
================================================================================

mcProfileSave
mcProfileSave
C/C++ Syntax:
int mcProfileSave(
		INSTANCE mInst);
LUA Syntax:
rc = mc.mcProfileSave(
		number mInst)
Description:
Save the profile's settings to the INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Saving the profile will write the settings to the profile's INI file. This will ensure that a power failue will not result in lost settings.  The settings that are saved are the core settings.  Plugin and GUI settings fall under the responsability of the GUI or plugin programmer.
Usage:
MINSTANCE mInst = 0;
mcProfileSave(mInst);
// Flush the settings to the INI file.



================================================================================
[780/904] mcProfileWriteDouble
Source: mcProfileWriteDouble.htm
================================================================================

mcProfileWriteDouble
mcProfileWriteDouble
C/C++ Syntax:
int mcProfileWriteDouble(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		double val);
LUA Syntax:
rc = mc.mcProfileWriteDouble(
		number mInst, 
		string section, 
		string key, 
		double val)
Description:
Write a double value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A double specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE mInst=0;
mcProfileWriteDouble(m_cid , "P_Port", "Frequency", 45000);



================================================================================
[781/904] mcProfileWriteInt
Source: mcProfileWriteInt.htm
================================================================================

mcProfileWriteInt
mcProfileWriteInt
C/C++ Syntax:
int mcProfileWriteInt(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		long val);
LUA Syntax:
int mcProfileWriteInt(
		number mInst, 
		string section, 
		string key, 
		number val)
Description:
Write a long value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A long specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE mInst = 0;
mcProfileWriteInt(m_cid , "P_Port", "Frequency", 45000);



================================================================================
[782/904] mcProfileWriteString
Source: mcProfileWriteString.htm
================================================================================

mcProfileWriteString
mcProfileWriteString
C/C++ Syntax:
int mcProfileWriteString(
		MINSTANCE mInst, 
		const char *section, 
		const char *key, 
		const char *val);
LUA Syntax:
rc = mc.mcProfileWriteString(
		number mInst, 
		string section, 
		string key, 
		string val)
Description:
Write a string value to the profile's INI file.
Parameters:
Parameter
Description
mInst
The controller instance.
section
A string buffer specifying the section.
key
A string buffer specifying the key.
val
A string buffer specifying the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
One or more of the parameters had a NULL value.
Notes:
Writing to the profile settings can be done at any time.
Usage:
MINSTANCE m_inst = 0;
char *key = "BufferedTime"
double BuffTime = .250;
char val[80];
sprintf(val, "%.4f", BuffTime);
mcProfileWriteString(mInst, "Darwin", key, val);



================================================================================
[783/904] mcRegGetCommand
Source: mcRegGetCommand.htm
================================================================================

mcRegGetCommand
mcRegGetCommand
C/C++ Syntax:
int mcRegGetCommand(
		HMCREG hReg, 
		char *cmd, 
		size_t cmdLen)
LUA Syntax:
N/A
Description:
Retrieve a command from the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
cmd
A string buffer to receive the command.
cmdLen
The sized of the command buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
cmd
is NULL.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
Notes:
The function will not return a command larger than 1024 bytes.
See Also:
mcRegSendCommand
and
mcRegSetResponse
Usage:
// Retrieve the register command.
int simControl::ProcessMsg(long msg, long param1, long param2)
{
	HMCREG hReg = (HMCREG)param1;
	long RegVal;
	switch (msg) {
	case MSG_REG_COMMAND:
		mcRegGetValueLong(hReg, &RegVal);
		if (hReg = m_RegCommand) {
// Is this our command register?
char command[1024];
			mcRegGetCommand(hReg, command, sizeof(command));
			wxString cmd(command);
			cmd.MakeUpper();
			if (cmd == wxT("THC ON")) {
				m_thc = true;
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC OFF")) {
				m_thc = false;
				mcMotionSync(m_cid);
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC STATUS")) {
				if (m_thc) {
					mcRegSetResponse(hReg, "1");
				} else {
					mcRegSetResponse(hReg, "0");
				}
			}
		}
		break;
	default:
		;
	}
	return(MERROR_NOERROR);
}



================================================================================
[784/904] mcRegGetHandle
Source: mcRegGetHandle.htm
================================================================================

mcRegGetHandle
mcRegGetHandle
C/C++ Syntax:
int mcRegGetHandle(
		MINSTANCE mInst, 
		const char *path, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcRegGetHandle(
		number mInst, 
		string path)
Description:
Retrieve a handle to a register give its path.
Parameters:
Parameter
Description
mInst
The controller instance.
path
A string buffer specifying the register path.
hReg
The address of a HMCREG to receive the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
path
or
hReg
is NULL.
Notes:
None.
Usage:
// Get the register handle.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
double value;
if (
mcRegGetHandle(mInst, "core/global/Version", &hReg)
== MERROR_NOERROR) {
	rc = mcRegGetValue(hReg, &value);
}



================================================================================
[785/904] mcRegGetInfo
Source: mcRegGetInfo.htm
================================================================================

mcRegGetInfo
mcRegGetInfo
C/C++ Syntax:
int mcRegGetInfo(
		HMCREG hReg, 
		char *nameBuf, 
		size_t nameBuflen, 
		char *descBuf, 
		size_t descBuflen, 
		int *type, 
		HMCDEV *hDev);
LUA Syntax:
nameBuf, descBuf, type, hDev, rc = mc.mcRegGetInfo(
		number hReg)
Description:
Return infromation about a register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
nameBuf
A string buffer to receive the name of the register.
nameBuflen
The length of the name buffer.
descBuf
A string buffer to receive the description of the register.
descBuflen
The length of the description buffer.
type
The address of an integer to receive the register type.
hDev
The address of an integer to receive the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
nameBuf
,
descBuf
,
type
, or
hDev
can be NULL depending on the amout of information required.
Usage:
HMCREG hReg = 0;
char name[80];
char desc[80];
int type;
HMCDEV hDev;

while (mcSignalGetNextHandle(hDev, hReg, &hReg) == MERROR_NOERROR) {
	if (hSig != 0) {
// Get the info on the register.
mcRegGetInfo(hReg, name, sizeof(name), desc, sizeof(desc), &type, &hDev));
	} else {
		break;
	}
}



================================================================================
[786/904] mcRegGetInfoStruct
Source: mcRegGetInfoStruct.htm
================================================================================

mcRegGetInfoStruct
mcRegGetInfoStruct
C/C++ Syntax:
int mcRegGetInfoStruct(
		HMCREG hReg, 
		reginfo_t *reginf);
LUA Syntax:
reginf, rc = mc.mcRegGetInfoStruct(
		number hReg)
Description:
Return infromation about a register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
reginf
The adress of a reginfo struct to receive the register information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
reginf
is NULL
Notes:
The hReg parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct reginfo {
	char regName[80];
	char regDesc[80];
	int  regType;
	HMCDEV regDev;
	void *regUserData;
	int regInput;
};
typedef struct reginfo reginfo_t;
Usage:
HMCREG hReg = 0;
reginfo_t reginf;

while (mcSignalGetNextHandle(hDev, hReg, &hReg) == MERROR_NOERROR) {
	if (hSig != 0) {
// Get the info on the register.
mcRegGetInfoStruct(hReg, ®inf);
	} else {
		break;
	}
}



================================================================================
[787/904] mcRegGetNextHandle
Source: mcRegGetNextHandle.htm
================================================================================

mcRegGetNextHandle
mcRegGetNextHandle
C/C++ Syntax:
int mcRegGetNextHandle(
		HMCDEV hDev, 
		HMCREG startReg, 
		HMCREG *hReg);
LUA Syntax:
hReg, rc = mc.mcRegGetNextHandle(
		number hDev, 
		number startReg)
Description:
Provides a means of looping through the available registers.
Parameters:
Parameter
Description
hDev
the register's parent device handle.
startReg
The starting register handle.
hReg
The address of a hMCREG to receive the next register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_INVALID_ARG
hReg
is NULL.
MERROR_NODATA
No more register handles can be found.
Notes:
To start, call mcRegGetNextHandle() with startReg = 0. hDev MUST be valid or the application can crash.
Usage:
HMCSIG hReg = 0;
HMCDEV hDev;
mcDeviceGetHandle(0, 0,&hDev);
while (
mcRegisterGetNextHandle(hDev, hReg, &hReg)
== MERROR_NOERROR) {
	if (hSig != 0) {
// do something with hReg.
} else {
		break;
	}
}



================================================================================
[788/904] mcRegGetUserData
Source: mcRegGetUserData.htm
================================================================================

mcRegGetUserData
mcRegGetUserData
C/C++ Syntax:
int mcRegGetUserData(
		HMCREG hReg, 
		void **data);
LUA Syntax:
N/A
Description:
Retrieve the user data pointer for the hReg.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
data
The address of a void pointer receive the user data pointer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
data
is NULL.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function allows the programmer to retreive a pointer to asscoiated private data that is local to the register's parent plugin/device.
Usage:
struct myDataStruct {
	int myInt;
	char myString[80];
	...
};

HMCREG hReg;
int mInst=0;
myDataStruct *data = NULL;
void *dataPtr;
// Get the handle to holding register 1 on SIM0.
if (mcRegGetHandle(mInst, "SIM0/HoldingReg1", &hReg) == MERROR_NOERROR) {
	mcRegGetUserData(hReg, &dataPtr);
	data = (myDataStruct *) dataPtr;
}



================================================================================
[789/904] mcRegGetValue
Source: mcRegGetValue.htm
================================================================================

mcRegGetValue
mcRegGetValue
C/C++ Syntax:
int mcRegGetValue(
		HMCREG hReg, 
		double *value);
LUA Syntax:
value, rc = mcRegGetValue(
		number hReg)
Description:
Retrieve a register's double value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
The address of a double to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
double value;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValue(hReg, &value);
}



================================================================================
[790/904] mcRegGetValueLong
Source: mcRegGetValueLong.htm
================================================================================

mcRegGetValueLong
mcRegGetValueLong
C/C++ Syntax:
int mcRegGetValueLong(
		HMCREG hReg, 
		double *value);
LUA Syntax:
value, rc = mcRegGetValueLong(
		number hReg)
Description:
Retrieve a register's long value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
The address of a long to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
long value;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueLong(hReg, &value);
}



================================================================================
[791/904] mcRegGetValueString
Source: mcRegGetValueString.htm
================================================================================

mcRegGetValueString
mcRegGetValueString
C/C++ Syntax:
int mcRegGetValueString(
		HMCREG hReg, 
		char *buf,
		size_t bufSize);
LUA Syntax:
buf, rc = mcRegGetValueString(
		number hReg)
Description:
Retrieve a register's string value.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
buf
A string buffer to receive the value.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
None.
Usage:
// Get the register value.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
char value[80];
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueString(hReg, &value, sizeof(value));
}



================================================================================
[792/904] mcRegGetValueStringClear
Source: mcRegGetValueStringClear.htm
================================================================================

mcRegGetValueStringClear
mcRegGetValueStringClear
C/C++ Syntax:
int mcRegGetValueStringClear(
		HMCREG hReg, 
		char *buf,
		size_t bufSize);
LUA Syntax:
buf, rc = mcRegGetValueString(
		number hReg)
Description:
Retrieve a register's string value and then clear the register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
buf
A string buffer to receive the value.
bufSize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
buf
is NULL.
Notes:
None.
Usage:
// Get the register value and clear it.
MINSTANCE mInst = 0;
HMCREG hReg;
int rc;
char value[80];
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc = mcRegGetValueStringClear(hReg, &value, sizeof(value));
}



================================================================================
[793/904] mcRegRegister
Source: mcRegRegister.htm
================================================================================

mcRegRegister
mcRegRegister
C/C++ Syntax:
int mcRegRegister(
		HMCDEV hDev, 
		const char *regName, 
		const char *regDesc, 
		int regType, 
		HMCREG *hReg);
LUA Syntax:
N/A
Description:
Adds a register to the core.
Parameters:
Parameter
Description
hDev
The handle of the register's parent device.
regName
A string buffer specifying the name of the register.
regDesc
A string buffer specifying the description of the register.
regType
REG_TYPE_NONE, REG_TYPE_INPUT, REG_TYPE_OUTPUT, REG_TYPE_HOLDING, REG_TYPE_COMMAND, REG_TYPE_ENCODER.
hReg
The address of a HMCREG that receives the register handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_INVALID_ARG
regName
,
regDesc
, or
hReg
is NULL.
Notes:
The hDev parameter
MUST
be a valid device handle.  Otherwise, the function will crash.
Registers can contain data of any type, even string data.  The maximum string length is 4096 bytes for registers other than
REG_TYPE_COMMAND
type registers and 1024 bytes for the
REG_TYPE_COMMAND
type registers.
REG_TYPE_NONE
specifies a register that is not typed.  This kind of register is basically just a data container that will not notify any process if the data it stores changes.
REG_TYPE_INPUT
specifies a register that can be mapped to a Mach input signal.  Mach and any GUI front end is notified if the data in this type of register is changed with a
MSG_REG_CHANGED
message.  This type of register usually contains boolean data.
REG_TYPE_OUTPUT
specifies a register that can be mapped to a Mach output signal.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.
REG_TYPE_HOLDING
specifies a general purpose register that cannot be mapped to either an input or output signal.  The plugin that owns this register is notified with a
MSG_REG_CHANGED
synchronous message.  All other plugins and the GUI are notified asynchronously with
MSG_REG_CHANGED
.  This type of register usually contains boolean data.
REG_TYPE_COMMAND
specifies a special purpose register that can be used to implement a simple command/response communication mechanism.  Only the plugin that owns the register is notified with a
MSG_REG_COMMAND
synchronous message.  It works with
mcRegSendCommand
on the client side of the communication and
mcRegGetCommand
and
mcRegSetResponse
on the plguin side.
REG_TYPE_ENCODER
specifies a register that can be mapped to a MPG or used to display the encoder counts in the GUI.  Only Mach and the GUI are notified with a
MSG_REG_CHANGED
synchronous message.
Usage:
HMCREG m_hReg;
HMCDEV m_hDev;
// Contains the device handle from the device registration.
int rc =
mcRegRegister(m_hDev, "HoldingReg1", "HoldingReg1", REG_TYPE_HOLDING, &hReg)
;



================================================================================
[794/904] mcRegSendCommand
Source: mcRegSendCommand.htm
================================================================================

mcRegSendCommand
mcRegSendCommand
C/C++ Syntax:
int mcRegSendCommand(
		HMCREG hReg, 
		const char *command, 
		char *response, 
		size_t responseLen);
LUA Syntax:
response, rc = mc.mcRegSendCommand(
		hReg, 
		command)
Description:
Sends a text command to a plugin register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
command
A string buffer specifying the command to be sent.
response
A string buffer that receives the response.
responseLen
The length of the response buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
command
or
response
is NULL.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
This function would primarily be used in scripts to control device features or provide a direct communication mechanism to the device.
The buffer pointed to by cmd cannot exceed 1024 bytes.
See Also:
mcRegGetCommand
and
mcRegSetResponse
Usage:
// Send a command via a register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "Sim0/SimCommand", &hReg) == MERROR_NOERROR) {
	char response[1024];
	rc =
mcRegSendCommand(hReg, "THC ON", response, sizeof(response))
;
	if (rc == MERROR_NOERROR) {
// check response.
}
}



================================================================================
[795/904] mcRegSetDesc
Source: mcRegSetDesc.htm
================================================================================

mcRegSetDesc
mcRegSetDesc
C/C++ Syntax:
int mcRegSetDesc(
		HMCREG hReg, 
		const char *desc);
LUA Syntax:
rc = mc.mcRegSetDesc(
		number hReg, 
		string desc)
Description:
Sets the description of the given ragister.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
desc
A string buffer specifying the register description.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
desc
is NULL.
Notes:
None.
Usage:
// Set/change the description of the register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetDesc(hReg, "Core Version")
;
}



================================================================================
[796/904] mcRegSetName
Source: mcRegSetName.htm
================================================================================

mcRegSetName
mcRegSetName
C/C++ Syntax:
int mcRegSetName(
		HMCREG hReg, 
		const char *name);
LUA Syntax:
rc = mc.mcRegSetName(
		number hReg, 
		string name)
Description:
Set the name of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
name
A string buffer specifying the name of the register.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
name
is NULL.
Notes:
None.
Usage:
// Set/change the name of the register.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetName(hReg, "Version2")
;
// The register path is now "core/global/Version2"
}



================================================================================
[797/904] mcRegSetResponse
Source: mcRegSetResponse.htm
================================================================================

mcRegSetResponse
mcRegSetResponse
C/C++ Syntax:
int mcRegSetResponse(
		HMCREG hReg, 
		char *response);
LUA Syntax:
N/A
Description:
Set the reponse to the command register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
response
A string buffer that specifies the response to the command.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_TYPE
The register is not of type
REG_TYPE_COMMAND
.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
See Also:
mcRegSendCommand
and
mcRegGetCommand
Usage:
// Set the response to a register command.
int simControl::ProcessMsg(long msg, long param1, long param2)
{
	HMCREG hReg = (HMCREG)param1;
	long RegVal;
	switch (msg) {
	case MSG_REG_COMMAND:
		mcRegGetValueLong(hReg, &RegVal);
		if (hReg = m_RegCommand) {
// Is this our command register?
char command[1024];
			mcRegGetCommand(hReg, command, sizeof(command));
			wxString cmd(command);
			cmd.MakeUpper();
			if (cmd == wxT("THC ON")) {
				m_thc = true;
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC OFF")) {
				m_thc = false;
				mcMotionSync(m_cid);
				mcRegSetResponse(hReg, "OK");
			} else if (cmd == wxT("THC STATUS")) {
				if (m_thc) {
					mcRegSetResponse(hReg, "1");
				} else {
					mcRegSetResponse(hReg, "0");
				}
			}
		}
		break;
	default:
		;
	}
	return(MERROR_NOERROR);
}



================================================================================
[798/904] mcRegSetType
Source: mcRegSetType.htm
================================================================================

mcRegSetType
mcRegSetType
C/C++ Syntax:
int mcRegSetType(
		HMCREG hReg, 
		int regType);
LUA Syntax:
rc = mc.mcRegSetType(
		number hReg, 
		number regType)
Description:
Set the type of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
regType
An integer specifying the register type. (REG_TYPE_NONE, IO_TYPE_REG_INPUT, REG_TYPE_OUTPUT, REG_TYPE_HOLDING, REG_TYPE_COMMAND, REG_TYPE_ENCODER)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
regType
is out of range.
Notes:
None.
Usage:
// Set the register type.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetType(hReg, REG_TYPE_HOLDING)
;
}



================================================================================
[799/904] mcRegSetUserData
Source: mcRegSetUserData.htm
================================================================================

mcRegSetUserData
mcRegSetUserData
C/C++ Syntax:
int mcRegSetUserData(
		HMCREG hReg, 
		void *data);
LUA Syntax:
N/A
Description:
Set the user pointer for hReg.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
The address of a void pointer so user can have there own data.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
data
is NULL.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function allows the programmer to asscoiate private data that is local to the register's parent plugin/device.
Usage:
struct myDataStruct {
	int myInt;
	char myString[80];
	...
};

HMCREG hReg;
MINSTANCE mInst = 0;
myDataStruct data;
// Get the handle to holding register 1 on SIM0.
mcRegGetHandle(mInst, "SIM0/HoldingReg1", &hReg);
// Set the user data pointer to the address of data.
mcRegSetUserData(hReg, &data)
;



================================================================================
[800/904] mcRegSetValue
Source: mcRegSetValue.htm
================================================================================

mcRegSetValue
mcRegSetValue
C/C++ Syntax:
int mcRegSetValue(
		HMCREG hReg, 
		double value);
LUA Syntax:
rc = mc.mcRegSetValue(
		number hReg, 
		number value)
Description:
Sets the double value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A double specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValue(hReg, 4.0)
;
}



================================================================================
[801/904] mcRegSetValueLong
Source: mcRegSetValueLong.htm
================================================================================

mcRegSetValueLong
mcRegSetValueLong
C/C++ Syntax:
int mcRegSetValueLong(
		HMCREG hReg, 
		double value);
LUA Syntax:
rc = mc.mcRegSetValueLong(
		number hReg, 
		number value)
Description:
Sets the long value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A long specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValueLong(hReg, 4)
;
}



================================================================================
[802/904] mcRegSetValueString
Source: mcRegSetValueString.htm
================================================================================

mcRegSetValueString
mcRegSetValueString
C/C++ Syntax:
int mcRegSetValueString(
		HMCREG hReg, 
		const char *value);
LUA Syntax:
rc = mc.mcRegSetValueString(
		number hReg, 
		string value)
Description:
Sets the string value of the given register.
Parameters:
Parameter
Description
hReg
A HMCREG specifying the register handle.
value
A string buffer specifying the register value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
MERROR_INVALID_ARG
value
is NULL.
Notes:
The hReg parameter
MUST
be a valid register handle.  Otherwise, the function will crash.
This function should only be used upon a value change.  It is a programming error otherwise and will cause messages to SPAM the core and GUI.  MSG_REG_CHANGED is sent to the GUI and the plugin owning the device that owns the register.
Usage:
// Set the register value.
MINSTANCE mInst = 0;
if (mcRegGetHandle(mInst, "core/global/Version", &hReg) == MERROR_NOERROR) {
	rc =
mcRegSetValueString(hReg, "4.0")
;
}



================================================================================
[803/904] mcRegUnregister
Source: mcRegUnregister.htm
================================================================================

mcRegUnregister
mcRegUnregister
C/C++ Syntax:
int mcRegUnregister(
		HMCDEV hDev, 
		HMCREG hReg);
LUA Syntax:
N/A
Description:
Remove a register from the core.
Parameters:
Parameter
Description
hDev
A HMCDEV specifying the register's parent device.
hReg
A HMCREG specifying the register to remove.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_DEVICE_NOT_FOUND
The
hDev
parameter was 0 or invlaid.
MERROR_REG_NOT_FOUND
The
hReg
parameter was 0 or invlaid.
Notes:
When register is removed all data in that register will be lost.
Usage:
MINSTANCE mInst = 0; 
HMCREG hReg
char *path = "Sim0/Register1";

mcRegGetHandle(mInst, path, &hReg);
mcRegUnregister(m_hDev, hReg);



================================================================================
[804/904] mcScriptDebug
Source: mcScriptDebug.htm
================================================================================

mcScriptDebug
mcScriptDebug
C/C++ Syntax:
int mcScriptDebug(
		MINSTANCE mInst, 
		const char *filename);
LUA Syntax:
N/A
Description:
Debug a script.
Parameters:
Parameter
Description
mInst
The controller instance.
(filename, A string buffer specifying the script file to debug.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
There was no registered script plugin for the given script's extension.
Notes:
Script debugging is a function of script plugins.  Script plugins register file extensions to identify what script can be used.
Usage:
// Debug the M6 macro
MINSTANCE mInst = 0;
int rc = mcScriptDebug(mInst, "m6.mcs");



================================================================================
[805/904] mcScriptEngineRegister
Source: mcScriptEngineRegister.htm
================================================================================

mcScriptEngineRegister
mcScriptEngineRegister
C/C++ Syntax:
int mcScriptEngineRegister(
		MINSTANCE mInst, 
		HMCPLUG plugid, 
		const char *EngineName, 
		const char *EngineDesc, 
		const char *FileExtensions);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
plugid
A HMCPLUG handle specifying the plugin.
EngineName
A string buffer specifying the script engine name.
EngineDesc
A string buffer specifying the script engine description.
FileExtensions
A string buffer specifying the file extenstions that the script engine uses.  Each extension is separated with the pipe symbol "|".
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
plugid
is invalid.
Notes:
Script plugins register file extensions to identify what script can be used.
Usage:
// Register the LUA script engine.
MINSTANCE mInst = 0;
HMCPLUG id;
// From mcPluginInit()
;
int rc = mcScriptEngineRegister(mInst, id, "wxLua", "wxLua script engine", "mcs|lua|wx.lua");



================================================================================
[806/904] mcScriptExecute
Source: mcScriptExecute.htm
================================================================================

mcScriptExecute
mcScriptExecute
C/C++ Syntax:
int mcScriptExecute(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecute(
		number mInst, 
		string filename, 
		number async)
Description:
Execute a script in the global script context.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute the M6 script and wait on it to complete.
MINSTANCE mInst = 0;
rc = mcScriptExecute(mInst, "m6.mcs", FALSE);



================================================================================
[807/904] mcScriptExecuteIfExists
Source: mcScriptExecuteIfExists.htm
================================================================================

mcScriptExecuteIfExists
mcScriptExecuteIfExists
C/C++ Syntax:
int mcScriptExecuteIfExists(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecuteIfExists(
		number mInst, 
		string filename, 
		number async)
Description:
Execute a script in the global script context if the specified script exists in the filesystem.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time, this error may be returned which would be an indication of a script syntax error.
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute the M6 script and wait on it to complete.
MINSTANCE mInst = 0;
rc = mcScriptExecute(mInst, "m6.mcs", FALSE);



================================================================================
[808/904] mcScriptExecutePrivate
Source: mcScriptExecutePrivate.htm
================================================================================

mcScriptExecutePrivate
mcScriptExecutePrivate
C/C++ Syntax:
int mcScriptExecutePrivate(
		MINSTANCE mInst, 
		const char *filename, 
		BOOL async);
LUA Syntax:
rc = mc.mcScriptExecutePrivate(
		number mInst, 
		string filename, 
		BOOL async)
Description:
Execute a script in the private script context.
Parameters:
Parameter
Description
mInst
The controller instance.
filename
A string buffere specifying the script file to execute.
async
A BOOL specifying whether the script should be executed asynchronously (TRUE == no waiting on completion
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_PLUGIN_NOT_FOUND
No registered script plugins where found for the the specified script's file name extension.
MERROR_NOT_COMPILED
If the script engine compiles the scripts before run-time, this error may be returned which would be an indication of a script syntax error.
Notes:
No error is returned if the specified script file does not exist.  If the file does not exist, or there is a sharing violation preventing the file from being read, this API function simply returns as a NO-OP.
Usage:
// Execute myScript.mcs asynchronously in it's own private environment.
MINSTANCE mInst = 0;
int rc = mcScriptExecutePrivate(mInst, "myScript.mcs", TRUE);



================================================================================
[809/904] mcScriptGetExtensions
Source: mcScriptGetExtensions.htm
================================================================================

mcScriptGetExtensions
mcScriptGetExtensions
C/C++ Syntax:
int mcScriptGetExtensions(MINSTANCE mInst, 
		char *buf, 
		long bufsize);
LUA Syntax:
N/A
Description:
Retrieves all registered script engine file name extensions.
Parameters:
Parameter
Description
mInst
The controller instance.
buf
A string buffer to receive the script file name extensions.
bufsize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
buf
is NULL or
bufsize
is <= 0.
Notes:
All returned extensions are delimited by pipe symbols ("|").
Usage:
// Retrieve all of the registered script extensions.
MINSTANCE mInst = 0;
mcScriptGetExtensions(MINSTANCE mInst, char *buf, long bufsize);



================================================================================
[810/904] mcSignalEnable
Source: mcSignalEnable.htm
================================================================================

mcSignalEnable
mcSignalEnable
C/C++ Syntax:
int mcSignalEnable(
	HMCSIG hSig, 
	BOOL enabled);
LUA Syntax:
rc = mc.mcSignalEnable(
	number hSig, 
	number enabled)
Description:
Enable or disable a signal mapping.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
enabled
TRUE to enable, FALSE to disable.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Signals have to be mapped to an IO handle before they can be enabled.  It is important to note that the signal itself is always enabled.  What is enabled it the signal mapping.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (mcSignalGetHandle(m_cid, ISIG_INPUT1, int sigid, &hSig) == MERROR_NOERROR) {
		if (mcSignalMap(hSig, m_Input0) == MERROR_NOERROR) {
// Signal mapped successfuly
mcSignalEnable(hSig, TRUE);
// Enable the signal.
}
	}
}



================================================================================
[811/904] mcSignalGetHandle
Source: mcSignalGetHandle.htm
================================================================================

mcSignalGetHandle
mcSignalGetHandle
C/C++ Syntax:
int mcSignalGetHandle(
		MINSTANCE mInst, 
		int sigid, 
		HMCSIG *hSig);
LUA Syntax:
hSig, rc = mc.mcSignalGetHandle(
		number mInst, 
		number sigid)
Description:
Register the IO device in Mach4Core so it can be mapped by the user and other plugins
Parameters:
Parameter
Description
mInst
The controller instance.
sigid
The integer ID of the desired signal.
hSig
A pointer to a HMCSIG to receive the sginal handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SIGNAL_NOT_FOUND
The signal identified by sigid was not found.
Notes:
None.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (
mcSignalGetHandle(m_cid, ISIG_INPUT1, &hSig)
== MERROR_NOERROR) {
		if (mcSignalMap(hSig, m_Input0) == MERROR_NOERROR) {
// Signal mapped successfuly.
mcSignalEnable(hSig, true);
// Enable the signal.
}
	}
}



================================================================================
[812/904] mcSignalGetInfo
Source: mcSignalGetInfo.htm
================================================================================

mcSignalGetInfo
mcSignalGetInfo
C/C++ Syntax:
int mcSignalGetInfo(
		HMCSIG hSig, 
		int *enabled, 
		char *name, 
		size_t namelen,
		char *desc, 
		size_t desclen, 
		int *activelow);
LUA Syntax:
enabled, name, desc, activelow, rc = mc.mcSignalGetInfo(number hSig)
Description:
Return infromation about a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
enabled
The address of an integer to receive the enabled status of the signal.
name
A buffer to receive the name of the signal.
namelen
A value specifiying the length of the name buffer.
desc
A buffer to receive the description of the signal.
desclen
A value specifiying the length of the description buffer.
activelow
The address of an integer to receive the active low status of the signal.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
int enabled = 0;
int nameLen = 20
char nameBuf[nameLen];
int descLen = 40;
char descBuf[descLen];
int activeLow = 0;

while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalGetInfo(hSig, &enabled, nameBuf, nameLen, descBuf, descLen, &activeLow)
;
	} else {
		break;
	}
}



================================================================================
[813/904] mcSignalGetInfoStruct
Source: mcSignalGetInfoStruct.htm
================================================================================

mcSignalGetInfoStruct
mcSignalGetInfoStruct
C/C++ Syntax:
int mcSignalGetInfoStruct(
		HMCSIG hSig, 
		siginfo_t *siginf);
LUA Syntax:
siginf, rc = mc.mcSignalGetInfoStruct(
		number hSig)
Description:
Return infromation about a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
siginf
The adress of a siginfo struct to receive the signal information.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.  In LUA, this function will return a table.
struct siginfo {
	char sigName[80];
	char sigDesc[80];
	int  sigEnabled;
	int  sigActiveLow;
	HMCIO sigMappedIoHandle;
};
typedef struct siginfo siginfo_t;
Usage:
HMCSIG hSig = 0;
siginfo_t siginf;

while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalGetInfoStruct(hSig, &siginf);
} else {
		break;
	}
}



================================================================================
[814/904] mcSignalGetNextHandle
Source: mcSignalGetNextHandle.htm
================================================================================

mcSignalGetNextHandle
mcSignalGetNextHandle
C/C++ Syntax:
int mcSignalGetNextHandle(
		MINSTANCE mInst, 
		int sigtype, 
		HMCSIG startSig, 
		HMCSIG *hSig);
LUA Syntax:
hSig, rc = mc.mcSignalGetNextHandle(
	number mInst, 
	number sigtype, 
	number startSig)
Description:
Provides a means of looping through the available signals.
Parameters:
Parameter
Description
mInst
The controller instance.
sigtype
The signal type for which to look (SIG_TYPE_INPUT or SIG_TYPE_OUTPUT).
startSig
The current signal handle.
hSig
A pointer to a HMCSIG to receive the signal handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sigtype was not SIG_TYPE_INPUT or SIG_TYPE_OUTPUT.
MERROR_NODATA
No more signals can be found.
Notes:
To start, call mcSignalGetNextHandle() with startSig = 0.
Usage:
HMCSIG hSig = 0;

while (
mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig)
== MERROR_NOERROR) {
    if (hSig != 0) {
// Do something with hSig.
} else {
        break;
    }
}



================================================================================
[815/904] mcSignalGetState
Source: mcSignalGetState.htm
================================================================================

mcSignalGetState
mcSignalGetState
C/C++ Syntax:
int mcSignalGetState(
		HMCSIG hSig, 
		BOOL *state)
LUA Syntax:
state, rc = mc.mcSignalGetState(
		number hSig)
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
state
Defines the desired state of the signal. TRUE is active
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0 or invalid.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
BOOL sigState = FALSE;
// Get the state of all input signals.
while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
    if (hSig != 0) {
mcSignalGetState(hSig, &sigState);
} else {
        break;
    }
}



================================================================================
[816/904] mcSignalHandleWait
Source: mcSignalHandleWait.htm
================================================================================

mcSignalHandleWait
mcSignalHandleWait
C/C++ Syntax:
int mcSignalHandleWait(
		HMCSIG hSig, 
		int waitMode, 
		double timeoutSecs);
LUA Syntax:
rc = mc.mcSignalHandleWait(
		number hSig, 
		number waitMode, 
		number timeoutSecs);
Description:
Wait on a signal to change state.
Parameters:
Parameter
Description
hSig
The handle for the signal.
waitMode
An integer specifying whether to wait on the signal to go high (WAIT_MODE_HIGH) or low (WAIT_MODE_LOW).
timeoutSecs
A double specifying a timeout period.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
hSig
or
wiatMode
is out of range or
timeoutSecs
is negative.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_TIMED_OUT
The timeout period was reached without a change of state.
Notes:
Specifying 0 for
timeoutSecs
will wait indefinitely until the signal changes state. Decimals are allowed.  e.g. .5 is half of a second.)
If the control is diabled while waiting on a signal to change state, the function stops waiting and returns MERROR_NOT_ENABLED.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;
int rc;
rc = mcSignalGetHandle(mInst, ISIG_INPUT1 &hSig);
if (rc == MERROR_NOERROR) {
	rc =
mcSignalHandleWait(hSig, WAIT_MODE_HIGH, .5)
;
	switch (rc) {
	case MERROR_NOERROR:
// Signal changed state from low to high
break;
	case MERROR_TIMED_OUT:
// The signal didn't change state in the alotted time.
break;
	case MERROR_NOT_ENABLED:
// The control was not enabled at the time of the 
		function call or the control was disabled during the function call.
break;
	}
}



================================================================================
[817/904] mcSignalMap
Source: mcSignalMap.htm
================================================================================

mcSignalMap
mcSignalMap
C/C++ Syntax:
int mcSignalMap(
		HMCSIG hSig, 
		HMCIO hIo);
LUA Syntax:
rc = mc.mcSignalMap(
		number hSig, 
		number hIo)
Description:
Map a core signal to a registered I/O handle.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
hIo
A registered IO handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0.
Notes:
The hSig and hIo parameters
MUST
be a valid handles.  Otherwise, the function will crash.
Mapping an input IO handle to an output signal handle or an output IO handle to an input signal handle is a programming error.
Usage:
simControl::simControl(MINSTANCE mInst, HMCPLUG id)
{
	m_cid = mInst;
	m_id = id;
	m_timer = new simTimer(this);
	m_cycletime = .001;
	HMCSIG hSig;
	
	mcDeviceRegister(m_cid, m_id, "Sim0", "Simulation Device", DEV_TYPE_MOTION | DEV_TYPE_IO, &m_hDev);
	
	mcIoRegister(m_hDev, "Input0", "Input0", IO_TYPE_INPUT, &m_Input0);
	mcIoRegister(m_hDev, "Output0", "Output0", IO_TYPE_OUTPUT, &m_Output0)

	if (mcSignalGetHandle(m_cid, ISIG_INPUT1, &hSig) == MERROR_NOERROR) {
		if (
mcSignalMap(hSig, m_Input0)
== MERROR_NOERROR) {
// Signal mapped successfuly
}
	}
}



================================================================================
[818/904] mcSignalSetActiveLow
Source: mcSignalSetActiveLow.htm
================================================================================

mcSignalSetActiveLow
mcSignalSetActiveLow
C/C++ Syntax:
int mcSignalSetActiveLow(
		HMCSIG hSig, 
		BOOL activelow);
LUA Syntax:
rc = mc.mcSignalSetActiveLow(
		number hSig, 
		number activelow)
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
activelow
TRUE to set the signal as negated.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0 or invalid.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
BOOL activeLow = TRUE;
// Set all input signals active low.
while (mcSignalGetNextHandle(0, SIG_TYPE_INPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalSetActiveLow(hSig, activeLow);
} else {
		break;
	}
}



================================================================================
[819/904] mcSignalSetState
Source: mcSignalSetState.htm
================================================================================

mcSignalSetState
mcSignalSetState
C/C++ Syntax:
int mcSignalSetState(
		HMCSIG hSig, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcSignalSetState(
		number hSig, 
		number enabled)
mcSignalSetState(
	HMCSIG hSig, 
	bool enabled);
Description:
Set the state of a signal.
Parameters:
Parameter
Description
hSig
The handle for the signal.
enabled
TRUE is active
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The hSig parameter was 0.
Notes:
The hSig parameter
MUST
be a valid signal handle.  Otherwise, the function will crash.
Usage:
HMCSIG hSig = 0;
// Set all output signals inactive.
while (mcSignalGetNextHandle(0, SIG_TYPE_OUTPUT, hSig, &hSig) == MERROR_NOERROR) {
	if (hSig != 0) {
mcSignalSetState(hSig, FALSE);
} else {
		break;
	}
}



================================================================================
[820/904] mcSignalUnmap
Source: mcSignalUnmap.htm
================================================================================

mcSignalUnmap
mcSignalUnmap
C/C++ Syntax:
int mcSignalUnmap(
		HMCSIG hSig);
LUA Syntax:
rc = mc.mcSignalUnmap(
		number hSig)
Description:
Unmap any I/O objects from the specified core signal.
Parameters:
Parameter
Description
hSig
A sginal handle obtained from mcSignalGetHandle().
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_ARG
The signal parameter was 0 or invalid.
Notes:
The hSig parameters
MUST
be a valid handle.  Otherwise, the function will crash.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;

if (mcSignalGetHandle(mInst, ISIG_INPUT1, &hSig) == MERROR_NOERROR) {
	if (
mcSignalUnmap(hSig)
== MERROR_NOERROR) {
// Signal now has no I/O mappings
}
}



================================================================================
[821/904] mcSignalWait
Source: mcSignalWait.htm
================================================================================

mcSignalWait
mcSignalWait
C/C++ Syntax:
int mcSignalWait(
		MINSTANCE mInst, 
		int sigId, 
		int waitMode, 
		double timeoutSecs);
LUA Syntax:
rc = mc.mcSignalWait(
		number mInst, 
		number sigId, 
		number waitMode, 
		number timeoutSecs);
Description:
Wait on a signal to change state.
Parameters:
Parameter
Description
mInst
The controller instance.
sigId
A valid signal ID. (
NOT a signal handle
)
waitMode
An integer specifying whether to wait on the signal to go high (WAIT_MODE_HIGH) or low (WAIT_MODE_LOW).
timeoutSecs
A double specifying a timeout period.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
sigId
or
wiatMode
is out of range or
timeoutSecs
is negative.
MERROR_NOT_ENABLED
The control is not enabled.
MERROR_TIMED_OUT
The timeout period was reached without a change of state.
Notes:
Specifying 0 for
timeoutSecs
will wait indefinitely until the signal changes state. Decimals are allowed.  e.g. .5 is half of a second.)
If the control is diabled while waiting on a signal to change state, the function stops waiting and returns MERROR_NOT_ENABLED.
Usage:
MINSTANCE mInst = 0;
HMCSIG hSig;
int rc;

rc =
mcSignalWait(mInst, ISIG_INPUT1, WAIT_MODE_HIGH, .5)
;
switch (rc) {
case MERROR_NOERROR:
// Signal changed state from low to high
break;
case MERROR_TIMED_OUT:
// The signal didn't change state in the alotted time.
break;
case MERROR_NOT_ENABLED:
// The control was not enabled at the time of the 
	  function call or the control was disabled during the function call.
break;
}



================================================================================
[822/904] mcSoftLimitGetState
Source: mcSoftLimitGetState.htm
================================================================================

mcSoftLimitGetState
mcSoftLimitGetState
C/C++ Syntax:
int mcSoftLimitGetState(
		MINSTANCE mInst, 
		int axis, 
		double *ison);
LUA Syntax:
ison, rc = mc.mcSoftLimitGetState(
		number mInst, 
		number axis)
Description:
Used to check if the Softlimit for an axis is on or off.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis from which to to get the Softlimit state.
ison
A pointer to a double to receive the status of Softlimit (on or off).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Can be used to display to the user what the status of the Softlimit for an axis is.
Usage:
int mInst = 0;
int axis = Z_AXIS;
dobule IsOn = 0;
// DO_OFF to turn off.
mcSoftLimitSetState(mInst, axis, &IsOn);
// Get the softlimit for the Z axis return will be 1 or 0 1==on.



================================================================================
[823/904] mcSoftLimitMaxMinsClear
Source: mcSoftLimitMaxMinsClear.htm
================================================================================

mcSoftLimitMaxMinsClear
mcSoftLimitMaxMinsClear
C/C++ Syntax:
int mcSoftLimitMaxMinsClear(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcSoftLimitMaxMinsClear(
		number mInst)
Description:
Clear the Softlimits for a loaded Gcode file
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Clear the Min and Max SoftLimits for a File. This should be done by modules that do the toolpath display.
Usage:
int mInst=0;
// Clear the Softlimits for the file so they will be recalculated when a regen is done.
mcSoftLimitMaxMinsClear(mInst);



================================================================================
[824/904] mcSoftLimitSetState
Source: mcSoftLimitSetState.htm
================================================================================

mcSoftLimitSetState
mcSoftLimitSetState
C/C++ Syntax:
int mcSoftLimitSetState(
		MINSTANCE mInst, 
		int axis, 
		int on);
LUA Syntax:
rc = mc.mcSoftLimitSetState(
		number mInst, 
		number axis, 
		number on)
Description:
Set softlimits to be on or off for an axis.
Parameters:
Parameter
Description
mInst
The controller instance.
axis
The axis to set the softlimit to be on or off.
on
Set the softlimit to be on or off ( MC_ON, MC_OFF ).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_AXIS_NOT_FOUND
The axis specified by
axisId
was not found.
Notes:
Can be used at any time. If you enable the softlimits when  you are out of bounds any jog will move it back to the softlimit.
Usage:
int mInst=0;
int axis = Z_AXIS;
int TurnOn = MC_ON;
// MC_OFF to turn off.
mcSoftLimitSetState(mInst, axis, TurnOn);
// Set the softlimit forthe Z axis to be ON.



================================================================================
[825/904] mcSpindleCalcCSSToRPM
Source: mcSpindleCalcCSSToRPM.htm
================================================================================

mcSpindleCalcCSSToRPM
mcSpindleCalcCSSToRPM
C/C++ Syntax:
int mcSpindleCalcCSSToRPM(
		MINSTANCE mInst, 
		double DiaOfCut, 
		BOOL Inch);
LUA Syntax:
rc = mc.mcSpindleCalcCSSToRPM(
		number mInst, 
		number DiaOfCut, 
		number Inch);
Description:
A utility function to implement Constant Surface Speed (CSS) for lathe operation.
Parameters:
Parameter
Description
mInst
The controller instance.
DiaOfCut
A double specifying the diameter of the next cut.
inch
A BOOL specifying if the diameter is in inches (TRUE) or millimiters (FALSE).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The spindle is not in CSS mode.
Notes:
None.
Usage:
// make the spindle speed calc the correct RPM for a .550" inch cut.
MINSTANCE mInst = 0;
int rc = mcSpindleCalcCSSToRPM(mInst, .550, TRUE);



================================================================================
[826/904] mcSpindleGetAccelTime
Source: mcSpindleGetAccelTime.htm
================================================================================

mcSpindleGetAccelTime
mcSpindleGetAccelTime
C/C++ Syntax:
int mcSpindleGetAccelTime(
		MINSTANCE mInst, 
		int Range, 
		double *Sec);
LUA Syntax:
Sec, rc = mc.mcSpindleGetAccelTime(
		number mInst, 
		number Range)
Description:
Retrieve the spindle acceleration time in seconds for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
The address to a double to receive the acceleration time.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Sec
cannot be NULL.
Notes:
None.
Usage:
// Get the accel time for spindle range 2.
MINSTANCE mInst = 0;
double sec = 0;
int rc = mcSpindleGetAccelTime(mInst, 2, &sec);



================================================================================
[827/904] mcSpindleGetCommandRPM
Source: mcSpindleGetCommandRPM.htm
================================================================================

mcSpindleGetCommandRPM
mcSpindleGetCommandRPM
C/C++ Syntax:
int mcSpindleGetCommandRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetCommandRPM(
		number mInst)
Description:
Retrieve the commanded RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the commanded RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
None.
Usage:
// Get the current commanded RPM
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetCommandRPM(mInst, &rpm);



================================================================================
[828/904] mcSpindleGetCurrentRange
Source: mcSpindleGetCurrentRange.htm
================================================================================

mcSpindleGetCurrentRange
mcSpindleGetCurrentRange
C/C++ Syntax:
int mcSpindleGetCurrentRange(
		MINSTANCE mInst, 
		int *Range);
LUA Syntax:
Range, rc = mc.mcSpindleGetCurrentRange(
		number mInst)
Description:
Retrieve the current spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
The address of an integer to receive the current spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
Range
cannot be NULL.
Notes:
None.
Usage:
// Get the current spindle range.
MINSTANCE mInst = 0;
int range = 0;
int rc = mcSpindleGetCurrentRange(mInst, ⦥);



================================================================================
[829/904] mcSpindleGetDecelTime
Source: mcSpindleGetDecelTime.htm
================================================================================

mcSpindleGetDecelTime
mcSpindleGetDecelTime
C/C++ Syntax:
int mcSpindleGetDecelTime(
		MINSTANCE mInst, 
		int Range, 
		double *Sec);
LUA Syntax:
Sec, rc = mc.mcSpindleGetDecelTime(
		number mInst, 
		number Range)
Description:
Retrieve the decel. time in seconds for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
The address of a double to receive the decel. time.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Sec
cannot be NULL.
Notes:
None.
Usage:
// Get the decel. time for spindle range 3
MINSTANCE mInst = 0;
double sec = 0.0;
int rc = mcSpindleGetDecelTime(mInst, 3, &ec);



================================================================================
[830/904] mcSpindleGetDirection
Source: mcSpindleGetDirection.htm
================================================================================

mcSpindleGetDirection
mcSpindleGetDirection
C/C++ Syntax:
int mcSpindleGetDirection(
		MINSTANCE mInst, 
		int *dir);
LUA Syntax:
dir, rc = mc.mcSpindleGetDirection(
		number mInst)
Description:
Retrieve the current spindle direction.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An address to an integer to receive the current spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
dir
cannot be NULL.
Notes:
None.
Usage:
// Get the current spindle direction.
MINSTANCE mInst = 0;
int dir = MC_SPINDLE_OFF;
int rc = mcSpindleGetDirection(mInst, &dir);



================================================================================
[831/904] mcSpindleGetFeedbackRatio
Source: mcSpindleGetFeedbackRatio.htm
================================================================================

mcSpindleGetFeedbackRatio
mcSpindleGetFeedbackRatio
C/C++ Syntax:
int mcSpindleGetFeedbackRatio(
		MINSTANCE mInst, 
		int Range, 
		double *Ratio);
LUA Syntax:
Ratio, rc = mc.mcSpindleGetFeedbackRatio(
		number mInst, 
		number Range)
Description:
Retrieve the spindle feedback ratio for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Ratio
The address of a double to receive the feedback ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Ratio
cannot be NULL.
Notes:
None.
Usage:
// Get the feedback ratio for spindle range 0.
MINSTANCE mInst = 0;
double ratio = 0.0;
int rc = mcSpindleGetFeedbackRatio(mInst, 0, ∶);



================================================================================
[832/904] mcSpindleGetMaxRPM
Source: mcSpindleGetMaxRPM.htm
================================================================================

mcSpindleGetMaxRPM
mcSpindleGetMaxRPM
C/C++ Syntax:
int mcSpindleGetMaxRPM(
		MINSTANCE mInst, 
		int Range, 
		double *MaxRPM);
LUA Syntax:
MaxRPM, rc = mc.mcSpindleGetMaxRPM(
		number mInst, 
		number Range)
Description:
Retrieve the maximum RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
MaxRPM
the address of a double to receive the maximum RPM for the given spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
MaxRPM
cannot be NULL.
Notes:
None.
Usage:
// Get the max RPM for range 0.
MINSTANCE mInst = 0;
double mrpm = 0.0
int rc = mcSpindleGetMaxRPM(mInst, 0, &mrpm);



================================================================================
[833/904] mcSpindleGetMinRPM
Source: mcSpindleGetMinRPM.htm
================================================================================

mcSpindleGetMinRPM
mcSpindleGetMinRPM
C/C++ Syntax:
int mcSpindleGetMinRPM(
		MINSTANCE mInst, 
		int Range, 
		double *MinRPM);
LUA Syntax:
MinRPM, rc = mc.mcSpindleGetMinRPM(
		number mInst, 
		number Range)
Description:
Retrieve the minimum RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
MaxRPM
the address of a double to receive the minimum RPM for the given spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
MinRPM
cannot be NULL.
Notes:
None.
Usage:
// Get the min RPM for range 0.
MINSTANCE mInst = 0;
double mrpm = 0.0
int rc = mcSpindleGetMinRPM(mInst, 0, &mrpm);



================================================================================
[834/904] mcSpindleGetMotorAccel
Source: mcSpindleGetMotorAccel.htm
================================================================================

mcSpindleGetMotorAccel
mcSpindleGetMotorAccel
C/C++ Syntax:
int mcSpindleGetMotorAccel(
		MINSTANCE mInst, 
		int Range, 
		double *Accel);
LUA Syntax:
Accel, rc = mc.mcSpindleGetMotorAccel(
		number mInst, 
		number Range)
Description:
Retrieve the spindle motor acceleration value.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Accel
The address to a deouble to receive the spindle acceleration for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Accel
cannot be NULL.
Notes:
None.
Usage:
// Get the spindle acceleration for range 1.
MINSTANCE mInst = 0;
double accel = 0.0;
int rc = mcSpindleGetMotorAccel(mInst, 1, &accel);



================================================================================
[835/904] mcSpindleGetMotorMaxRPM
Source: mcSpindleGetMotorMaxRPM.htm
================================================================================

mcSpindleGetMotorMaxRPM
mcSpindleGetMotorMaxRPM
C/C++ Syntax:
int mcSpindleGetMotorMaxRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetMotorMaxRPM(
		number mInst)
Description:
Retrieve the maximum defined RPM for the spindle motor.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
None.
Usage:
// Get the maximum spindle motor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetMotorMaxRPM(mInst, &rpm);



================================================================================
[836/904] mcSpindleGetMotorRPM
Source: mcSpindleGetMotorRPM.htm
================================================================================

mcSpindleGetMotorRPM
mcSpindleGetMotorRPM
C/C++ Syntax:
int mcSpindleGetMotorRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
rpm, rc = mc.mcSpindleGetMotorRPM(
		number mInst)
Description:
Retrieve the current motor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address to a double to receive the motor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
This is not the spidnle RPM!!!  It is the motor RPM without any ratios for ranges (pulleys), etc...
Usage:
// Get the current motor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetMotorRPM(mInst, &rpm);



================================================================================
[837/904] mcSpindleGetOverride
Source: mcSpindleGetOverride.htm
================================================================================

mcSpindleGetOverride
mcSpindleGetOverride
C/C++ Syntax:
int mcSpindleGetOverride(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mcSpindleGetOverride(
		number mInst)
Description:
Retrieve the current spindle override value as a percentage of the commanded RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address to a double to receive the override decimal percentage.
;
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the spindle override. .5 == 50%
MINSTANCE mInst = 0;
double percent = 0.0;
int rc = mcSpindleGetOverride(mInst, &percent);



================================================================================
[838/904] mcSpindleGetOverrideEnable
Source: mcSpindleGetOverrideEnable.htm
================================================================================

mcSpindleGetOverrideEnable
mcSpindleGetOverrideEnable
C/C++ Syntax:
int mcSpindleGetOverrideEnable(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mcSpindleGetOverrideEnable(
		number mInst)
Description:
Retrieve the current spindle override status.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the override status.
;
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the spindle override status.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcSpindleGetOverrideEnable(mInst, &enabled);



================================================================================
[839/904] mcSpindleGetReverse
Source: mcSpindleGetReverse.htm
================================================================================

mcSpindleGetReverse
mcSpindleGetReverse
C/C++ Syntax:
int mcSpindleGetReverse(
		MINSTANCE mInst, 
		int Range, 
		BOOL *Reversed);
LUA Syntax:
Rreversed, rc = mc.mcSpindleGetReverse(
		number mInst, 
		number Range)
Description:
Retrieve whether the spindle is reversed for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Reversed
The address of a BOOL to receive if the spindle is reversed for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
MERROR_INVALID_ARG
Reversed
cannot be NULL.
Notes:
None.
Usage:
// See if the spindle is reversed in range 1
MINSTANCE mInst = 0;
BOOL reversed = FALSE;
int mcSpindleGetReverse(mInst, 1, &reversed);



================================================================================
[840/904] mcSpindleGetSensorRPM
Source: mcSpindleGetSensorRPM.htm
================================================================================

mcSpindleGetSensorRPM
mcSpindleGetSensorRPM
C/C++ Syntax:
int mcSpindleGetSensorRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetSensorRPM(
		number mInst)
Description:
Retrieve the RPM at the spindle sensor.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
This API function will report RPM of the spindle at the spindle sensor and does not include any feedback ratio.
Usage:
// Get the spindle sensor RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetSensorRPM(mInst, &rpm);



================================================================================
[841/904] mcSpindleGetSpeedCheckEnable
Source: mcSpindleGetSpeedCheckEnable.htm
================================================================================

mcSpindleGetSpeedCheckEnable
mcSpindleGetSpeedCheckEnable
C/C++ Syntax:
int mcSpindleGetSpeedCheckEnable(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcSpindleGetSpeedCheckEnable(
		number mInst)
Description:
Determine if spindle speed check is enabled.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL that receives the spindle speed check status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
enabled
cannot be NULL.
Notes:
None.
Usage:
// Check the staus of spindle speed check.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcSpindleGetSpeedCheckEnable(mInst, &enabled);



================================================================================
[842/904] mcSpindleGetSpeedCheckPercent
Source: mcSpindleGetSpeedCheckPercent.htm
================================================================================

mcSpindleGetSpeedCheckPercent
mcSpindleGetSpeedCheckPercent
C/C++ Syntax:
int mcSpindleGetSpeedCheckPercent(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcSpindleGetSpeedCheckPercent(
		number mInst)
Description:
Retrieve the spindle speed check percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a double to receive the speed check percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
percent
cannot be NULL.
Notes:
None.
Usage:
// Get the speed check percentage.
MINSTANCE mInst = 0;
double percent = 0.0;
int rc = mcSpindleGetSpeedCheckPercent(mInst, &percent);



================================================================================
[843/904] mcSpindleGetTrueRPM
Source: mcSpindleGetTrueRPM.htm
================================================================================

mcSpindleGetTrueRPM
mcSpindleGetTrueRPM
C/C++ Syntax:
int mcSpindleGetTrueRPM(
		MINSTANCE mInst, 
		double *RPM);
LUA Syntax:
RPM, rc = mc.mcSpindleGetTrueRPM(
		number mInst)
Description:
Retrieve the true RPM of the spindle, includeing any feedback ratio.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
The address of a double to receive the true RPM of the spindle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
RPM
cannot be NULL.
Notes:
Calling this API function includes any feedback ratio.
Usage:
// Get the true spindle RPM.
MINSTANCE mInst = 0;
double rpm = 0.0;
int rc = mcSpindleGetTrueRPM(mInst, &rpm);



================================================================================
[844/904] mcSpindleSetAccelTime
Source: mcSpindleSetAccelTime.htm
================================================================================

mcSpindleSetAccelTime
mcSpindleSetAccelTime
C/C++ Syntax:
int mcSpindleSetAccelTime(
		MINSTANCE mInst, 
		int Range, 
		double Sec);
LUA Syntax:
rc = mc.mcSpindleSetAccelTime(
		number mInst, 
		number Range, 
		number Sec);
Description:
Sets the spindle accel. time for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
A double specifying the time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the accel. time for spindle range 0.
MINSTANCE mInst = 0;
int rc = mcSpindleSetAccelTime(mInst, 0, 5.0);



================================================================================
[845/904] mcSpindleSetCommandRPM
Source: mcSpindleSetCommandRPM.htm
================================================================================

mcSpindleSetCommandRPM
mcSpindleSetCommandRPM
C/C++ Syntax:
int mcSpindleSetCommandRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetCommandRPM(
		number mInst, 
		number RPM)
Description:
Set the commanded RPM for the spindle.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the spindle RPM to 5000.
MINSTANCE mInst = 0;
int rc = mcSpindleSetCommandRPM(mInst, 5000);



================================================================================
[846/904] mcSpindleSetDecelTime
Source: mcSpindleSetDecelTime.htm
================================================================================

mcSpindleSetDecelTime
mcSpindleSetDecelTime
C/C++ Syntax:
int mcSpindleSetDecelTime(
		MINSTANCE mInst, 
		int Range, 
		double Sec);
LUA Syntax:
rc = mc.mcSpindleSetDecelTime(
		number mInst, 
		number Range, 
		number Sec)
Description:
Set the decel. time for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Sec
A double specifying the time in seconds.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the decel. time for spindle range 0.
MINSTANCE mInst = 0;
in rc = mcSpindleSetDecelTime(mInst, 0, 5);



================================================================================
[847/904] mcSpindleSetDirection
Source: mcSpindleSetDirection.htm
================================================================================

mcSpindleSetDirection
mcSpindleSetDirection
C/C++ Syntax:
int mcSpindleSetDirection(
		MINSTANCE mInst, 
		int dir);
LUA Syntax:
rc = mc.mcSpindleSetDirection(
		number mInst, 
		number dir)
Description:
Set the desired spindle direction.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An integer specifying the spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
An attempt was made to set the direction to MC_SPINDLE_FWD or MC_SPINDLE_REV when the control is disabled.
MERROR_INVALID_ARG
dir
is out of range.
Notes:
None.
Usage:
// Set the spindle direction to FWD
MINSTANCE mInst = 0;
int rc = mcSpindleSetDirection(mInst, MC_SPINDLE_FWD);



================================================================================
[848/904] mcSpindleSetDirectionWait
Source: mcSpindleSetDirectionWait.htm
================================================================================

mcSpindleSetDirectionWait
mcSpindleSetDirectionWait
C/C++ Syntax:
int mcSpindleSetDirectionWait(
		MINSTANCE mInst, 
		int dir);
LUA Syntax:
rc = mc.mcSpindleSetDirectionWait(
		number mInst, 
		number dir)
Description:
Set the desired spindle direction and wait for the spindle to come to speed.  The function will wait for up to 20 seconds before returning MERROR_TIMED_OUT.
The type of spindle wait is determined by the system configuration.
Parameters:
Parameter
Description
mInst
The controller instance.
dir
An integer specifying the spindle direction. (MC_SPINDLE_OFF, MC_SPINDLE_FWD, and MC_SPINDLE_REV)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_TIMED_OUT
The wait timed out.
MERROR_NOT_NOW
An attempt was made to set the direction to MC_SPINDLE_FWD or MC_SPINDLE_REV when the control is disabled.
MERROR_INVALID_ARG
dir
is out of range.
Notes:
None.
Usage:
// Set the spindle direction to FWD and wait
MINSTANCE mInst = 0;
int rc = mcSpindleSetDirectionWait(mInst, MC_SPINDLE_FWD);



================================================================================
[849/904] mcSpindleSetFeedbackRatio
Source: mcSpindleSetFeedbackRatio.htm
================================================================================

mcSpindleSetFeedbackRatio
mcSpindleSetFeedbackRatio
C/C++ Syntax:
int mcSpindleSetFeedbackRatio(
		MINSTANCE mInst, 
		int Range, 
		double Ratio);
LUA Syntax:
rc = mc.mcSpindleSetFeedbackRatio(
		number mInst, 
		number Range, 
		number Ratio)
Description:
Set the feedback ratio for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Ratio
A double specifying the feedback ratio.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the feedback ratio for spindle range 0.
MINSTANCE mInst = 0;
int mcSpindleSetFeedbackRatio(mInst, 0, 1.2);
// 1.2 : 1



================================================================================
[850/904] mcSpindleSetMaxRPM
Source: mcSpindleSetMaxRPM.htm
================================================================================

mcSpindleSetMaxRPM
mcSpindleSetMaxRPM
C/C++ Syntax:
int mcSpindleSetMaxRPM(
		MINSTANCE mInst, 
		int Range, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMaxRPM(
		number mInst, 
		number Range, 
		number RPM);
Description:
Set the max RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
RPM
A double specifying the maximum RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the max RPM for spindle range 0 to 5000
MINSTANCE mInst = 0;
int mcSpindleSetMaxRPM(mInst, 0, 5000);



================================================================================
[851/904] mcSpindleSetMinRPM
Source: mcSpindleSetMinRPM.htm
================================================================================

mcSpindleSetMinRPM
mcSpindleSetMinRPM
C/C++ Syntax:
int mcSpindleSetMinRPM(
		MINSTANCE mInst, 
		int Range, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMinRPM(
		number mInst, 
		number Range, 
		number RPM);
Description:
Set the min RPM for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
RPM
A double specifying the minimum RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the min RPM for spindle range 0 to 60
MINSTANCE mInst = 0;
int mcSpindleSetMinRPM(mInst, 0, 60);



================================================================================
[852/904] mcSpindleSetMotorAccel
Source: mcSpindleSetMotorAccel.htm
================================================================================

mcSpindleSetMotorAccel
mcSpindleSetMotorAccel
C/C++ Syntax:
int mcSpindleSetMotorAccel(
		MINSTANCE mInst, 
		int Range, 
		double Accel);
LUA Syntax:
rc = mc.mcSpindleSetMotorAccel(
		number mInst, 
		number Range, 
		number Accel);
Description:
Set the spindle motor acceleration for the given spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Accel
A double sepcifying the acceleration value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the acceleration for the spindle motor for range 0
MINSTANCE mInst = 0;
int rc = mcSpindleSetMotorAccel(mInst, 0, 10000);



================================================================================
[853/904] mcSpindleSetMotorMaxRPM
Source: mcSpindleSetMotorMaxRPM.htm
================================================================================

mcSpindleSetMotorMaxRPM
mcSpindleSetMotorMaxRPM
C/C++ Syntax:
int mcSpindleSetMotorMaxRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetMotorMaxRPM(
		number mInst, 
		number RPM)
Description:
Set the maximum spindle motor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the maximum spindle motor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Cap the spindle motor RPM to 6000.
MINSTANCE mInst = 0;
int rc = mcSpindleSetMotorMaxRPM(mInst, 6000);



================================================================================
[854/904] mcSpindleSetOverride
Source: mcSpindleSetOverride.htm
================================================================================

mcSpindleSetOverride
mcSpindleSetOverride
C/C++ Syntax:
int mcSpindleSetOverride(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcSpindleSetOverride(
		number mInst, 
		number percent)
Description:
Set the spindle override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the decimal percentage of spindle override.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the spindle override to 50% (.5 == 50%)
MINSTANCE mInst = 0;
int rc = mcSpindleSetOverride(mInst, 0.5);



================================================================================
[855/904] mcSpindleSetOverrideEnable
Source: mcSpindleSetOverrideEnable.htm
================================================================================

mcSpindleSetOverrideEnable
mcSpindleSetOverrideEnable
C/C++ Syntax:
int mcSpindleSetOverrideEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcSpindleSetOverrideEnable(
		number mInst, 
		number enable)
Description:
Set the spindle override percentage.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the desired spindle override status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Enable spindle override.
MINSTANCE mInst = 0;
int rc = mcSpindleSetOverrideEnable(mInst, TRUE);



================================================================================
[856/904] mcSpindleSetRange
Source: mcSpindleSetRange.htm
================================================================================

mcSpindleSetRange
mcSpindleSetRange
C/C++ Syntax:
int mcSpindleSetRange(
		MINSTANCE mInst, 
		int Range);
LUA Syntax:
rc = mc.mcSpindleSetRange(
		number mInst, 
		number Range)
Description:
Set the current spindle range.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set the current spindle range to the first range (0).
MINSTANCE mInst = 0;
mcSpindleSetRange(mInst, 0);



================================================================================
[857/904] mcSpindleSetReverse
Source: mcSpindleSetReverse.htm
================================================================================

mcSpindleSetReverse
mcSpindleSetReverse
C/C++ Syntax:
int mcSpindleSetReverse(
		MINSTANCE mInst, 
		int Range, 
		BOOL Reversed);
LUA Syntax:
rc = mc.mcSpindleSetReverse(
		number mInst, 
		number Range, 
		number Reversed)
Description:
Set the spindle as being reversed for the given spindle range.  e.g back gear.
Parameters:
Parameter
Description
mInst
The controller instance.
Range
An integer specifying the spindle range.
Reversed
A BOOL specifying whether the spindle is reversed for the given range.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_SPIN_RANGE_NOT_FOUND
Range
specified an invalid spindle range.
Notes:
None.
Usage:
// Set spindle range 1 as being reversed.
MINSTANCE mInst = 0;
int rc = mcSpindleSetReverse(mInst, 1, TRUE);



================================================================================
[858/904] mcSpindleSetSensorRPM
Source: mcSpindleSetSensorRPM.htm
================================================================================

mcSpindleSetSensorRPM
mcSpindleSetSensorRPM
C/C++ Syntax:
int mcSpindleSetSensorRPM(
		MINSTANCE mInst, 
		double RPM);
LUA Syntax:
rc = mc.mcSpindleSetSensorRPM(
		number mInst, 
		number RPM)
Description:
Set the spindle sensor RPM.
Parameters:
Parameter
Description
mInst
The controller instance.
RPM
A double specifying the spindle sensor RPM.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is what spindle control plugins should use to report the spindle speed.
Usage:
// Set the spindle sensor RPM to 1000
MINSTANCE mInst = 0;
int rc = mcSpindleSetSensorRPM(mInst, 1000);



================================================================================
[859/904] mcSpindleSetSpeedCheckEnable
Source: mcSpindleSetSpeedCheckEnable.htm
================================================================================

mcSpindleSetSpeedCheckEnable
mcSpindleSetSpeedCheckEnable
C/C++ Syntax:
int mcSpindleSetSpeedCheckEnable(
		MINSTANCE mInst, 
		BOOL enable);
LUA Syntax:
rc = mc.mcSpindleSetSpeedCheckEnable(
		number mInst, 
		number enable)
Description:
Enable or disable the spindle speed check before feed moves.
Parameters:
Parameter
Description
mInst
The controller instance.
enable
A BOOL specifying the state of spindle speed check.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Spindle speed check is used to make sure the spindle is at an acceptable speed before a feed move.
See also:
mcSpindleSetSpeedCheckPercent() and mcSpindleGetSpeedCheckPercent().
Usage:
// Enable spindle speed checking.
MINSTANCE mInst = 0;
int rc = mcSpindleSetSpeedCheckEnable(mInst, TRUE);



================================================================================
[860/904] mcSpindleSetSpeedCheckPercent
Source: mcSpindleSetSpeedCheckPercent.htm
================================================================================

mcSpindleSetSpeedCheckPercent
mcSpindleSetSpeedCheckPercent
C/C++ Syntax:
int mcSpindleSetSpeedCheckPercent(
		MINSTANCE mInst, 
		double percent);
LUA Syntax:
rc = mc.mcSpindleSetSpeedCheckPercent(
		number mInst, 
		number percent)
Description:
Set the allowable percentage tha the spindle speed can fluctuate.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
A double specifying the percentage.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Set the speed check percentage to 5%.  100 == 100%
MINSTANCE mInst = 0;
int rc = mcSpindleSetSpeedCheckPercent(mInst, 5);



================================================================================
[861/904] mcSpindleSpeedCheck
Source: mcSpindleSpeedCheck.htm
================================================================================

mcSpindleSpeedCheck
mcSpindleSpeedCheck
C/C++ Syntax:
int mcSpindleSpeedCheck(
		MINSTANCE mInst, 
		int *SpeedOk);
LUA Syntax:
SpeedOk, rc = mc.mcSpindleSpeedCheck(
		number mInst)
Description:
Check if the spindle speed is withing the allowable range.
Parameters:
Parameter
Description
mInst
The controller instance.
SpeedOk
The address of a BOOL to receive the spindle speed check status.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_NOT_NOW
The spindle is currently off.
Notes:
None.
Usage:
// Check to see if the spidnle speed is in the allowed range.
MINSTANCE mInst = 0;
BOOL speedOk;
int rc = mcSpindleSpeedCheck(mInst, &speedOk);



================================================================================
[862/904] mcToolGetCurrent
Source: mcToolGetCurrent.htm
================================================================================

mcToolGetCurrent
mcToolGetCurrent
C/C++ Syntax:
int mcToolGetCurrent(
		MINSTANCE mInst, 
		int *toolnum);
LUA Syntax:
toolnum, rc = mc.mcToolGetCurrent(
		number mInst)
Description:
Retrieve the current tool number.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
The address of an integer to receive the current tool number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Tool numbers start at 1 (base 1).
Usage:
// Get the current tool.
MINSTANCE mInst = 0;
int toolnum = 0;
int rc = mcToolGetCurrent(mInst, &toolnum);



================================================================================
[863/904] mcToolGetData
Source: mcToolGetData.htm
================================================================================

mcToolGetData
mcToolGetData
C/C++ Syntax:
int mcToolGetData(
		MINSTANCE mInst, 
		int type, 
		int toolNumber, 
		double *value);
LUA Syntax:
value, rc = mc.mcToolGetData(
		number mInst, 
		number type, 
		number toolNumber)
Description:
Retrieve the offset values for mill and turn tools.
Parameters:
Parameter
Description
mInst
The controller instance.
type
MTOOL_MILL_X, MTOOL_MILL_X_W, MTOOL_MILL_Y, MTOOL_MILL_Y_W, MTOOL_MILL_HEIGHT, MTOOL_MILL_HEIGHT_W, MTOOL_MILL_RAD, MTOOL_MILL_RAD_W, MTOOL_MILL_POCKET, MTOOL_LATHE_X, MTOOL_LATHE_X_W, MTOOL_LATHE_Y, MTOOL_LATHE_Y_W, MTOOL_LATHE_Z, MTOOL_LATHE_Z_W, MTOOL_LATHE_POCKET, MTOOL_LATHE_TIPRAD, MTOOL_MILL_RAD, MTOOL_LATHE_TIPDIR, MTOOL_MILL_RAD_W, MTOOL_LATHE_TOOLSLIDE, MTOOL_TYPE
toolNumber
Specifies the tool number.
value
The address of a double to receive the value for the specified offset type and the specified tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the offset of a tool and can be used at anytime.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Get the tool height offset for tool number 5.
int rc = mcToolGetData(mInst, MTOOL_MILL_HEIGHT, toolnum, &val);



================================================================================
[864/904] mcToolGetDataExDbl
Source: mcToolGetDataExDbl.htm
================================================================================

mcToolGetDataExDbl
mcToolGetDataExDbl
C/C++ Syntax:
int mcToolGetDataExDbl(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		double *value);
LUA Syntax:
value, rc = mc.mcToolGetDataExDbl(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of a double with witch to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExDbl(mInst, toolnum, "MyUserField", &val);



================================================================================
[865/904] mcToolGetDataExInt
Source: mcToolGetDataExInt.htm
================================================================================

mcToolGetDataExInt
mcToolGetDataExInt
C/C++ Syntax:
int mcToolGetDataExInt(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		int *value);
LUA Syntax:
value, rc = mc.mcToolGetDataExInt(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of an integer with witch to receive the value.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
int val = 0;
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExInt(mInst, toolnum, "MyUserField", &val);



================================================================================
[866/904] mcToolGetDataExStr
Source: mcToolGetDataExStr.htm
================================================================================

mcToolGetDataExStr
mcToolGetDataExStr
C/C++ Syntax:
int mcToolGetDataExStr(
		MINSTANCE mInst, 
		int toolnum, 
		const char *fieldName, 
		char *value, 
		size_t valueLen);
LUA Syntax:
value, rc = mc.mcToolGetDataExStr(
		number mInst, 
		number toolNumber,
		string fieldName)
Description:
Retrieve user and special (extended) tool table field values.
Parameters:
Parameter
Description
mInst
The controller instance.
toolNumber
Specifies the tool number.
fieldName
The address of a string buffer specifying the field name.
value
The address of a char buffer with which to receive the string value.
valueLen
The size of the char buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNumber
is out of range.
Notes:
Used to get the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
char val[128];
// Get the contents of "MyUserField" for tool number 5.
int rc = mcToolGetDataExStr(mInst, toolnum, "MyUserField", val, sizeof(val));



================================================================================
[867/904] mcToolGetDesc
Source: mcToolGetDesc.htm
================================================================================

mcToolGetDesc
mcToolGetDesc
C/C++ Syntax:
int mcToolGetDesc(
		MINSTANCE mInst, 
		int toolnum, 
		char *buff, 
		size_t bufsize);
LUA Syntax:
buff, rc = mc.mcToolGetDesc(
		number mInst, 
		number toolnum)
Description:
Get the text string to describe the tool
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
An integer specifying the tool number for which to get the description.
buff
The address of a string buffer to receive the tool description.
bufsize
The length of the string buffer.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnum
is out of range.
Notes:
Used to get the tool description for the tool table or run screen.
Usage:
MINSTANCE mInst = 0;
char desc[128];
int toolnum = 5;
// Get the description of tool number 5 for controller 0.
int rc = mcToolGetDesc(mInst, toolnum, desc, sizeof(desc));



================================================================================
[868/904] mcToolGetSelected
Source: mcToolGetSelected.htm
================================================================================

mcToolGetSelected
mcToolGetSelected
C/C++ Syntax:
int mcToolGetSelected(
		MINSTANCE mInst, 
		int *toolnum);
LUA Syntax:
toolnum, rc = mc.mcToolGetSelected(
		number mInst)
Description:
Retrieve the selected (next) tool number.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
The address of an integer to receive the selected tool number.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the selected tool number.
MINSTANCE mInst = 0;
int toolnum = 0;
int rc = mcToolGetSelected(mInst, &toolnum);



================================================================================
[869/904] mcToolLoadFile
Source: mcToolLoadFile.htm
================================================================================

mcToolLoadFile
mcToolLoadFile
C/C++ Syntax:
int mcToolLoadFile(
		MINSTANCE mInst, 
		const char *FileToLoad);
LUA Syntax:
rc = mc.mcToolLoadFile(
		number mInst, 
		string FileToLoad)
Description:
Load a tool table into the core.
Parameters:
Parameter
Description
mInst
The controller instance.
FileToLoad
A string buffer specifying the tool table file to load.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_EMPTY
The specified tool table file was empty.
Notes:
Used to load a tool table file on a per profile basis.
Usage:
// Load a tool table.
MINSTANCE mInst = 0;
int rc = mcToolLoadFile(mInst, "tooltable.tls");



================================================================================
[870/904] mcToolPathCreate
Source: mcToolPathCreate.htm
================================================================================

mcToolPathCreate
mcToolPathCreate
C/C++ Syntax:
int mcToolPathCreate(
		MINSTANCE mInst, 
		void *window);
LUA Syntax:
N/A
Description:
Create an OpenGL window to display the tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
window
The parent window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
Passing the window handle is all that is needed to draw the toolpath.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
wxPanel* m_tpTP;

MINSTANCE mInst = 0;
m_tpTP = new wxPanel(itemPanel129, ID_TOOLPATH_PANEL, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
rc = m_tpTP->Show();
// Pass the handle of the tool path.
mcToolPathCreate(mInst, m_tpTP->GetHWND());



================================================================================
[871/904] mcToolPathDelete
Source: mcToolPathDelete.htm
================================================================================

mcToolPathDelete
mcToolPathDelete
C/C++ Syntax:
int mcToolPathDelete(
		MINSTANCE mInst, 
		void *parent);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The handle of the tool paths parent window.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
// Delete an existing tool path.
MINSTANCE mInst = 0;
HWND parent;
// A previously valid window handle.
int rc = mcToolPathDelete(mInst, parent);



================================================================================
[872/904] mcToolPathGenerate
Source: mcToolPathGenerate.htm
================================================================================

mcToolPathGenerate
mcToolPathGenerate
C/C++ Syntax:
int mcToolPathGenerate(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcToolPathGenerate(
		number mInst)
Description:
Generates the toolpath to refresh any changes that may have been done (like cutter comp or fixure offset changes).
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Generation of the tool path should only be done with the Gocd file is not running.
Usage:
MINSTANCE mInst = 0;
// Regenerate the toolpaths for controller instance 0
int rc = mcToolPathGenerate(mInst);



================================================================================
[873/904] mcToolPathGenerateAbort
Source: mcToolPathGenerateAbort.htm
================================================================================

mcToolPathGenerateAbort
mcToolPathGenerateAbort
C/C++ Syntax:
int mcToolPathGenerateAbort(
		MINSTANCE mInst);
LUA Syntax:
rc = mc.mcToolPathGenerateAbort(
		number mInst);
Description:
Abort tool path generation.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used if there is an endless loop in the Gcode or if a file regen needs to be stopped.
Usage:
MINSTANCE mInst = 0;
// Abort the regeneration of the toolpath for controller 0.
int rc = mcToolPathGenerateAbort(mInst);



================================================================================
[874/904] mcToolPathGeneratedPercent
Source: mcToolPathGeneratedPercent.htm
================================================================================

mcToolPathGeneratedPercent
mcToolPathGeneratedPercent
C/C++ Syntax:
int mcToolPathGeneratedPercent(
		MINSTANCE mInst, 
		double *percent);
LUA Syntax:
percent, rc = mc.mcToolPathGeneratedPercent(
		number mInst)
Description:
Retrieve the tool path generation percentage completed.
Parameters:
Parameter
Description
mInst
The controller instance.
percent
The address of a double to receive the tool path completion percentage. (0 to 100)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This function is to be used to show the path generation progress in a progress dialog when a regen has been initiated.
Usage:
MINSTANCE mInst = 0; 
double pdone = 0;

while (pdone != 100) {
// Get the percent of the file that is loaded.
mcToolPathGeneratedPercent(mInst, &pdone);
// Post the pdone to some dialog.
Sleep(250);
}



================================================================================
[875/904] mcToolPathGetAAxisPosition
Source: mcToolPathGetAAxisPosition.htm
================================================================================

mcToolPathGetAAxisPosition
mcToolPathGetAAxisPosition
C/C++ Syntax:
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);
LUA Syntax:
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathGetAAxisPosition(MINSTANCE mInst, double *xPos, double *yPos, double *zPos);



================================================================================
[876/904] mcToolPathGetARotationAxis
Source: mcToolPathGetARotationAxis.htm
================================================================================

mcToolPathGetARotationAxis
mcToolPathGetARotationAxis
C/C++ Syntax:
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);
LUA Syntax:
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathGetARotationAxis(MINSTANCE mInst, int *axis);



================================================================================
[877/904] mcToolPathGetAxisColor
Source: mcToolPathGetAxisColor.htm
================================================================================

mcToolPathGetAxisColor
mcToolPathGetAxisColor
C/C++ Syntax:
int mcToolPathGetAxisColor(
		MINSTANCE mInst, 
		unsigned long *axiscolor, 
		unsigned long *limitcolor);
LUA Syntax:
axiscolor, limitcolor, rc = mc.mcToolPathGetAxisColor(
		number mInst)
Description:
Retrieve the current axis and limit tool path colors.
Parameters:
Parameter
Description
mInst
The controller instance.
axiscolor
The address of an unsigned long to receive the axis color.
limitcolor
The address of an unsigned long to receive the sof limit color.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
// Get the axis and limit colors.
MINSTANCE mInst = 0;
int rc = mcToolPathGetAxisColor(MINSTANCE mInst, unsigned long *axiscolor, unsigned long *limitcolor);



================================================================================
[878/904] mcToolPathGetBackColor
Source: mcToolPathGetBackColor.htm
================================================================================

mcToolPathGetBackColor
mcToolPathGetBackColor
C/C++ Syntax:
int mcToolPathGetBackColor(
		MINSTANCE mInst, 
		unsigned long *topcolor, 
		unsigned long *botcolor);
LUA Syntax:
topcolor, botcolor, rc = mc.mcToolPathGetBackColor(
		number mInst)
Description:
Get the background  top and bottom colors.
Parameters:
Parameter
Description
mInst
The controller instance.
topcolor
The address of an unsigned long that receives the top color of the background.
botcolor
The address of an unsigned long that receives the bottom color of the background.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
MINSTANCE mInst = 0;
unsigned long topcol, botcol;
// Get the tool background top and bottom colors
int rc = mcToolPathGetBackColor(m_inst, &topcol, &botcol);



================================================================================
[879/904] mcToolPathGetDrawLimits
Source: mcToolPathGetDrawLimits.htm
================================================================================

mcToolPathGetDrawLimits
mcToolPathGetDrawLimits
C/C++ Syntax:
int mcToolPathGetDrawLimits(
		MINSTANCE mInst, 
		BOOL *drawlimits);
LUA Syntax:
drawlimits, rc = mcToolPathGetDrawLimits(
		number mInst)
Description:
Retrieve the status of the soft limit display.
Parameters:
Parameter
Description
mInst
The controller instance.
drawlimits
The address of a BOOL to receives the state of soft limit display.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
MINSTANCE mInst = 0;
BOOL drawlimits = FALSE;
// See if the soft limits bounding box is beeing shown in the toolpath.
int rc = mcToolPathGetDrawLimits(mInst, &drawlimits);



================================================================================
[880/904] mcToolPathGetExecution
Source: mcToolPathGetExecution.htm
================================================================================

mcToolPathGetExecution
mcToolPathGetExecution
C/C++ Syntax:
int mcToolPathGetExecution(
		MINSTANCE mInst, 
		unsigned long exNum, 
		void **data, 
		unsigned long *len);
LUA Syntax:
N/A
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
exNum
An unsigned long specifying the execution number.
data
The address of a void pointer to receive the move execution info structure.
len
The address of an unsigned long the receive the length of the move execution infomation.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This structure is not in the MachAPI.h header file.  And it is subject to change without notice.  Any new items will be added onto the end of the structure thus it is important to use this API call correctly and not rely on the length of the structure given below.
struct Executions
{
	bool linear : 1;	//Is this a linear move?
	bool rapid : 1;		//Is it a Rapid move?
	bool inc : 1;		//Is this an inc move?
	bool comp : 1;	
	bool rotation : 1;      //arc direction
	bool UsedAxis0 : 1;	
	bool UsedAxis1 : 1;	
	bool UsedAxis2 : 1;	
	bool UsedAxis3 : 1;	
	bool UsedAxis4 : 1;	
	bool UsedAxis5 : 1;	
	bool UsedAxis6 : 1;	
	bool UsedAxis7 : 1;	
	bool UsedAxis8 : 1;	
	bool UsedAxis9 : 1;	
	bool UsedAxis10 : 1;		
	float end[6];
	float center[3];
	float normal[3];
	unsigned int LineNumber;	// Line number in the file... 
	unsigned int ExecutionID;	// Number of the move from the Gcode interperter
	float FeedRate;			// Feedrate of the move
	unsigned char ToolNumber;	// Tool number of the move used to show offsets.. 
	unsigned char Fixture;		// The fixture.
};
Usage:
//
MINSTANCE mInst = 0;
unsigned long exNum = 0;
unsigned long len;
void *data;
int rc;
struct Executions *ex;
// Get the length of the move execution structure first.
while (mcToolPathGetExecution(mInst, exNum, NULL, &len) == MERROR_NOERROR) {
// Allocate some mem to receive the data.
data = malloc(len);
	if (data != NULL) {
// Get the data.
if (mcToolPathGetExecution(mInst, exNum, &data, &len) == MERROR_NOERROR) {
// cast the void pointer to the current structure.
ex = (struct Executions *)data;
			...
			free(data);
		}
	}
}



================================================================================
[881/904] mcToolPathGetFollowMode
Source: mcToolPathGetFollowMode.htm
================================================================================

mcToolPathGetFollowMode
mcToolPathGetFollowMode
C/C++ Syntax:
int mcToolPathGetFollowMode(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mc.mcToolPathGetFollowMode(
		number mInst)
Description:
Retrieve the status of the tool path jog follow mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the jog follow mode state.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// See if jog follow is enabled.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcToolPathGetFollowMode(mInst, &enabled);



================================================================================
[882/904] mcToolPathGetGenerating
Source: mcToolPathGetGenerating.htm
================================================================================

mcToolPathGetGenerating
mcToolPathGetGenerating
C/C++ Syntax:
int mcToolPathGetGenerating(
		MINSTANCE mInst, 
		int *pathGenerating);
LUA Syntax:
pathGenerating, rc = mc.mcToolPathGetGenerating(
		number mInst)
Description:
Retrieve the state of the tool path generation.
Parameters:
Parameter
Description
mInst
The controller instance.
pathGenerating
The address A pointer to an int to receive the path generation state (MC_ON, MC_OFF).
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
pathGenerating
is NULL.
Notes:
This function is used after a file load, or regen to keep the user from using any controles as the machine is loading.
Usage:
MINSTANCE mInst = 0;
BOOL IsGen = FALSE;
// See if the tool path is generating.
int rc = mcGetPathGenerating(mInst, &IsGen);



================================================================================
[883/904] mcToolPathGetLeftMouseDn
Source: mcToolPathGetLeftMouseDn.htm
================================================================================

mcToolPathGetLeftMouseDn
mcToolPathGetLeftMouseDn
C/C++ Syntax:
int mcToolPathGetLeftMouseDn(
		MINSTANCE mInst, 
		double *x, 
		double *y, 
		double *z);
LUA Syntax:
x, y, z, rc = mc.mcToolPathGetLeftMouseDn(
		number mInst)
Description:
Retrieve the xyz coordinates of the mouse in the tool path when the left button goes down.
Parameters:
Parameter
Description
mInst
The controller instance.
x
The address to a double to revceive the x coordinate.
y
The address to a double to revceive the y coordinate.
z
The address to a double to revceive the z coordinate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mouse coordinates in the tool path.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcToolPathGetLeftMouseDn(MINSTANCE mInst, double *x, double *y, double *z);



================================================================================
[884/904] mcToolPathGetLeftMouseUp
Source: mcToolPathGetLeftMouseUp.htm
================================================================================

mcToolPathGetLeftMouseUp
mcToolPathGetLeftMouseUp
C/C++ Syntax:
int mcToolPathGetLeftMouseUp(
		MINSTANCE mInst, 
		double *x, 
		double *y, 
		double *z);
LUA Syntax:
x, y, z, rc = mc.mcToolPathGetLeftMouseUp(
		number mInst)
Description:
Retrieve the xyz coordinates of the mouse in the tool path when the left button comes up.
Parameters:
Parameter
Description
mInst
The controller instance.
x
The address to a double to revceive the x coordinate.
y
The address to a double to revceive the y coordinate.
z
The address to a double to revceive the z coordinate.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Get the mouse coordinates in the tool path.
MINSTANCE mInst = 0;
double x, y, z;
int rc = mcToolPathGetLeftMouseUp(MINSTANCE mInst, double *x, double *y, double *z);



================================================================================
[885/904] mcToolPathGetPathColor
Source: mcToolPathGetPathColor.htm
================================================================================

mcToolPathGetPathColor
mcToolPathGetPathColor
C/C++ Syntax:
int mcToolPathGetPathColor(
		MINSTANCE mInst, 
		unsigned long *rapidcolor, 
		unsigned long *linecolor, 
		unsigned long *arccolor, 
		unsigned long *highlightcolor);
LUA Syntax:
rapidcolor, linecolor, arccolor, highlightcolor, rc = mcToolPathGetPathColor(
		number mInst)
Description:
Retrieve the tool path display colors.
Parameters:
Parameter
Description
mInst
The controller instance.
rapidcolor
The address of an unsigned long that receives the rapid (G00) color of the toolpath.
linecolor
The address of an unsigned long that receives the line (G01) color of the toolpath.
arccolor
The address of an unsigned long that receives the arc (G02/G03) color of the toolpath.
highlightcolor
The address of an unsigned long that receives the past moves color of the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
MINSTANCE mInst = 0;
unsigned long rapcol, lincol, arccol, highcol;
// Get the tool path colors
int rc = mcToolPathGetPathColor(m_inst, &rapcol, &lincol, &arccol, &highcol);



================================================================================
[886/904] mcToolPathIsSignalMouseClicks
Source: mcToolPathIsSignalMouseClicks.htm
================================================================================

mcToolPathIsSignalMouseClicks
mcToolPathIsSignalMouseClicks
C/C++ Syntax:
int mcToolPathIsSignalMouseClicks(
		MINSTANCE mInst, 
		BOOL *enabled);
LUA Syntax:
enabled, rc = mcToolPathIsSignalMouseClicks(
		number mInst)
Description:
Determine if tool path mouse click events are signaled.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
The address of a BOOL to receive the state of the tool path mouse clicks.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// See if we are signaling mouse click events in the tool path.
MINSTANCE mInst = 0;
BOOL enabled = FALSE;
int rc = mcToolPathIsSignalMouseClicks(mInst, &enabled);



================================================================================
[887/904] mcToolPathSetAAxisPosition
Source: mcToolPathSetAAxisPosition.htm
================================================================================

mcToolPathSetAAxisPosition
mcToolPathSetAAxisPosition
C/C++ Syntax:
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);
LUA Syntax:
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathSetAAxisPosition(MINSTANCE mInst, double xPos, double yPos, double zPos);



================================================================================
[888/904] mcToolPathSetARotationAxis
Source: mcToolPathSetARotationAxis.htm
================================================================================

mcToolPathSetARotationAxis
mcToolPathSetARotationAxis
C/C++ Syntax:
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);
LUA Syntax:
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);
Description:
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
//
MINSTANCE mInst = 0;
mcToolPathSetARotationAxis(MINSTANCE mInst, int axis);



================================================================================
[889/904] mcToolPathSetAxisColor
Source: mcToolPathSetAxisColor.htm
================================================================================

mcToolPathSetAxisColor
mcToolPathSetAxisColor
C/C++ Syntax:
int mcToolPathSetAxisColor(
		MINSTANCE mInst, 
		unsigned long axiscolor, 
		unsigned long limitcolor);
LUA Syntax:
rc = mc.mcToolPathSetAxisColor(
		number mInst, 
		number axiscolor, 
		number limitcolor)
Description:
Set the tool path axis and limit colors.
Parameters:
Parameter
Description
mInst
The controller instance.
axiscolor
The color of the top of the axis lines in the toolpath.
limitcolor
The color of the softlimits color bounding box in the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned long.
Usage:
MINSTANCE mInst = 0;
unsigned long axiscolor;
unsigned long limitcolor;

//red
axiscolor =  (255<<0);//red
axiscolor += (0<<8);//green
axiscolor += (0<<16);//blue

//Yellow
limitcolor =  (255<<0);//red
limitcolor += (255<<8);//green 
limitcolor += (128<<16);//blue
// Set the axis and limit colors
int rc = mcToolPathSetAxisColor(mInst, axiscolor, limitcolor);



================================================================================
[890/904] mcToolPathSetBackColor
Source: mcToolPathSetBackColor.htm
================================================================================

mcToolPathSetBackColor
mcToolPathSetBackColor
C/C++ Syntax:
int mcToolPathSetBackColor(
		MINSTANCE mInst, 
		unsigned long topcolor, 
		unsigned long botcolor);
LUA Syntax:
rc = mc.mcToolPathSetBackColor(
		number mInst, 
		number topcolor, 
		number botcolor)
Description:
Set the tool path background color.
Parameters:
Parameter
Description
mInst
The controller instance.
topcolor
The color of the top of the background.
botcolor
The color of the bottom of the background.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Used to set the top and botom background color of toolpath. The colors are in RGB format converted into unsigned long.
Usage:
MINSTANCE mInst = 0;
unsigned long topcolor;
unsigned long botcolor

//Dark Blue Top
topcolor = (28<<0);
topcolor += (28<<8);
topcolor += (213<<16);
//Light Blue Bottom
botcolor = (164<<0);
botcolor += (156<<8);
botcolor += (228<<16);
// Set the background color
int rc = mcToolPathSetBackColor(mInst, topcolor, botcolor);



================================================================================
[891/904] mcToolPathSetDrawLimits
Source: mcToolPathSetDrawLimits.htm
================================================================================

mcToolPathSetDrawLimits
mcToolPathSetDrawLimits
C/C++ Syntax:
int mcToolPathSetDrawLimits(
		MINSTANCE mInst, 
		BOOL drawlimits);
LUA Syntax:
rc = mc.mcToolPathSetDrawLimits(
		number mInst, 
		number drawlimits)
Description:
Enable or disable the drawing of soft limits on the tool paths.
Parameters:
Parameter
Description
mInst
The controller instance.
(drawlimits, A BOOL specifying whether soft limits are drawn on the tool path.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on soft limits in the tool path.
MINSTANCE mInst = 0;
int rc = mcToolPathSetDrawLimits(mInst, TRUE);



================================================================================
[892/904] mcToolPathSetFollowMode
Source: mcToolPathSetFollowMode.htm
================================================================================

mcToolPathSetFollowMode
mcToolPathSetFollowMode
C/C++ Syntax:
int mcToolPathSetFollowMode(
		MINSTANCE mInst, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcToolPathSetFollowMode(
		number mInst, 
		number enabled)
Description:
Enable or disable tool path jog follow mode.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
A BOOL specifying the state of the tool path jog follow mode.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
None.
Usage:
// Turn on tool path jog following.
MINSTANCE mInst = 0;
int rc = mcToolPathSetFollowMode(mInst, TRUE);



================================================================================
[893/904] mcToolPathSetPathColor
Source: mcToolPathSetPathColor.htm
================================================================================

mcToolPathSetPathColor
mcToolPathSetPathColor
C/C++ Syntax:
int mcToolPathSetPathColor(
		MINSTANCE mInst, 
		unsigned long rapidcolor, 
		unsigned long linecolor, 
		unsigned long arccolor, 
		unsigned long highlightcolor);
LUA Syntax:
rc = mc.mcToolPathSetPathColor(
		number mInst, 
		number rapidcolor, 
		number linecolor, 
		number arccolor, 
		number highlightcolor)
Description:
Set the tool path line display colors.
Parameters:
Parameter
Description
mInst
The controller instance.
rapidcolor
The color of the rapid (G00) moves in the toolpath.
linecolor
The color of the linear feed (G01) moves in the toolpath.
arccolor
The color of the arc (G03/G02) moves in the toolpath.
highlightcolor
The color of the moves that have been done in the toolpath.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
The colors are in RGB format converted into unsigned longs.
Usage:
// Set the tool path colors
MINSTANCE mInst = 0;
unsigned long rapidcolor;
unsigned long linecolor;
unsigned long arccolor;
unsigned long highlightcolor;

rapidcolor =  (254<<0);//Red
rapidcolor += (0<<8);//Green
rapidcolor += (0<<16);//Blue

linecolor =  (0<<0);//Red
linecolor += (254<<8);//Green
linecolor += (0<<16);//Blue

arccolor =  (0<<0);//Red
arccolor += (254<<8);//Green
arccolor += (0<<16);//Blue

highlightcolor =  (254<<0);//Red
highlightcolor += (254<<8);//Green
highlightcolor += (254<<16);//Blue

int rc = mcToolPathSetPathColor(mInst, rapidcolor, linecolor, arccolor, highlightcolor);



================================================================================
[894/904] mcToolPathSetSignalMouseClicks
Source: mcToolPathSetSignalMouseClicks.htm
================================================================================

mcToolPathSetSignalMouseClicks
mcToolPathSetSignalMouseClicks
C/C++ Syntax:
int mcToolPathSetSignalMouseClicks(
		MINSTANCE mInst, 
		BOOL enabled);
LUA Syntax:
rc = mc.mcToolPathSetSignalMouseClicks(
		number mInst, 
		number enabled)
Description:
Enable or Disable the tool path mouse click events.
Parameters:
Parameter
Description
mInst
The controller instance.
enabled
A BOOL specifying the state of the tool path mouse click event signaling.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
Usage:
// Turn on mouse click events in the tool path.
MINSTANCE mInst = 0;
int rc = mcToolPathSetSignalMouseClicks(mInst, TRUE);



================================================================================
[895/904] mcToolPathSetView
Source: mcToolPathSetView.htm
================================================================================

mcToolPathSetView
mcToolPathSetView
C/C++ Syntax:
int mcToolPathSetView(
		MINSTANCE mInst, 
		void *parent, 
		int view);
LUA Syntax:
N/A
Description:
Set the tool path view orientation.
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
view
An integer specifying the tool path view orientation. (MC_TPVIEW_TOP, MC_TPVIEW_BOTTOM, MC_TPVIEW_LEFT, MC_TPVIEW_RIGHT, or MC_TPVIEW_ISO)
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
// Set the tool path orientation to the ISO view.
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int rc = mcToolPathSetView(mInst, parent, MCTPVIEW_ISO);



================================================================================
[896/904] mcToolPathSetZoom
Source: mcToolPathSetZoom.htm
================================================================================

mcToolPathSetZoom
mcToolPathSetZoom
C/C++ Syntax:
int mcToolPathSetZoom(
		MINSTANCE mInst, 
		void *parent, 
		double zoom);
LUA Syntax:
N/A
Description:
Set the zoom of the given tool path
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
zoom
A double specifying the zoom percentage as a decimal.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
Notes:
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
zoom
should be a decimal percentage.  e.g. 1.5 == 150%.
Usage:
// Set the toop path zoom percentage to 150%
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int rc = mcToolPathSetZoom(mInst, parent, 1.5);



================================================================================
[897/904] mcToolPathUpdate
Source: mcToolPathUpdate.htm
================================================================================

mcToolPathUpdate
mcToolPathUpdate
C/C++ Syntax:
int mcToolPathUpdate(
		MINSTANCE mInst, 
		void *parent);
LUA Syntax:
N/A
Description:
Redraw/update the OpenGL tool path.
Parameters:
Parameter
Description
mInst
The controller instance.
parent
The tool path parent window handle.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
The mInst parameter was out of range.
Notes:
Updates need to be run at every .1 sec or faseter to have a smooth tool path.
This API function is specific to GUI programming.
For the Windows Platform,
window
should be the HWND of the parent window.  For Linux and Mac, the wxWidgets wxWindow handle must be used.
Usage:
MINSTANCE mInst = 0;
HWND parent;
// A valid window handle.
int mcToolPathUpdate(mInst, parent);



================================================================================
[898/904] mcToolSaveFile
Source: mcToolSaveFile.htm
================================================================================

mcToolSaveFile
mcToolSaveFile
C/C++ Syntax:
int mcToolSaveFile(
		MINSTANCE mInst);
LUA Syntax:
rc =  mcToolSaveFile(
		number mInst)
Description:
Save a previously loaded tool table file.
Parameters:
Parameter
Description
mInst
The controller instance.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_FILE_INVALID
No tool table fie was previously loaded.
Notes:
None.
Usage:
// Save the previously loaded tool table file.
MINSTANCE mInst = 0;
int rc = mcToolSaveFile(mInst);



================================================================================
[899/904] mcToolSetCurrent
Source: mcToolSetCurrent.htm
================================================================================

mcToolSetCurrent
mcToolSetCurrent
C/C++ Syntax:
int mcToolSetCurrent(
		MINSTANCE mInst, 
		int toolnum);
LUA Syntax:
rc = mc.mcToolSetCurrent(
		number mInst, 
		number toolnum)
Description:
Set the current tool to the specified tool.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
An integer specifying the tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnum
is out of range.
Notes:
None.
Usage:
// Set the current tool to tool #1.
MINSTANCE mInst = 0;
int rc = mcToolSetCurrent(mInst, 1);



================================================================================
[900/904] mcToolSetData
Source: mcToolSetData.htm
================================================================================

mcToolSetData
mcToolSetData
C/C++ Syntax:
int mcToolSetData(
		MINSTANCE mInst, 
		int Type, 	
		int Toolnumber, 
		double val);
LUA Syntax:
rc = mc.mcToolSetData(
		number mInst, 
		number Type, 	
		number Toolnumber, 
		number val);
Description:
Set the offset values for each tool.
Parameters:
Parameter
Description
mInst
The controller instance.
Type
MTOOL_MILL_X, MTOOL_MILL_X_W, MTOOL_MILL_Y, MTOOL_MILL_Y_W, MTOOL_MILL_HEIGHT, MTOOL_MILL_HEIGHT_W, MTOOL_MILL_RAD, MTOOL_MILL_RAD_W, MTOOL_MILL_POCKET, MTOOL_LATHE_X, MTOOL_LATHE_X_W, MTOOL_LATHE_Y, MTOOL_LATHE_Y_W, MTOOL_LATHE_Z, MTOOL_LATHE_Z_W, MTOOL_LATHE_POCKET, MTOOL_LATHE_TIPRAD, MTOOL_MILL_RAD, MTOOL_LATHE_TIPDIR
Toolnumber
Tool number to be set
val
Value to set the selected offset.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
Toolnumber
is out of range.
Notes:
Used to set the offest of a tool and shouldn't be changed as Gcode is running.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Set the tool height wear offset to zero.
int rc = mcToolSetData(mInst, MTOOL_MILL_HEIGHT_W, toolnum, val);



================================================================================
[901/904] mcToolSetDataExDbl
Source: mcToolSetDataExDbl.htm
================================================================================

mcToolSetDataExDbl
mcToolSetDataExDbl
C/C++ Syntax:
int mcToolSetDataExDbl(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		double value);
LUA Syntax:
rc = mc.mcToolSetDataExDbl(
		number mInst, 
		number toolNum, 
		string fieldName,
		number val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the double value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
double val = 0;
// Set the user field "MyUserField" to zero.
int rc = mcToolSetDataExDbl(mInst, toolnum, "MyUserField", val);



================================================================================
[902/904] mcToolSetDataExInt
Source: mcToolSetDataExInt.htm
================================================================================

mcToolSetDataExInt
mcToolSetDataExInt
C/C++ Syntax:
int mcToolSetDataExInt(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		int value);
LUA Syntax:
rc = mc.mcToolSetDataExInt(
		number mInst, 
		number toolNum, 
		string fieldName,
		number val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the integer value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
int val = 0;
// Set the user field "MyUserField" to zero.
int rc = mcToolSetDataExInt(mInst, toolnum, "MyUserField", val);



================================================================================
[903/904] mcToolSetDataExStr
Source: mcToolSetDataExStr.htm
================================================================================

mcToolSetDataExStr
mcToolSetDataExStr
C/C++ Syntax:
int mcToolSetDataExStr(
		MINSTANCE mInst, 
		int toolNum, 
		const char *fieldName, 
		const char *value);
LUA Syntax:
rc = mc.mcToolSetDataExStr(
		number mInst, 
		number toolNum, 
		string fieldName,
		string val);
Description:
Set user and special (extended) tool table fields..
Parameters:
Parameter
Description
mInst
The controller instance.
toolNum
The tool number to be set.
filedName
Specifies the name of the field in the tool table to update.
val
Specifies the integer value for the specified field..
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolNum
is out of range.
Notes:
Used to set the extended tool table information.
Usage:
MINSTANCE mInst = 0;
int toolnum = 5;
char val[128];
// Set the user field "MyUserField" to zero.
strcpy(val, "0");
int rc = mcToolSetDataExStr(mInst, toolnum, "MyUserField", val);



================================================================================
[904/904] mcToolSetDesc
Source: mcToolSetDesc.htm
================================================================================

mcToolSetDesc
mcToolSetDesc
C/C++ Syntax:
int mcToolSetDesc(
		MINSTANCE mInst, 
		int toolnum, 
		const char *tdsc);
LUA Syntax:
rc = mc.mcToolSetDesc(
		number mInst, 
		number toolnum, 
		string tdsc);
Description:
Set the description for the specified tool in the tool table.
Parameters:
Parameter
Description
mInst
The controller instance.
toolnum
Tool number to which to set the description.
tdsc
A string buffer that specifies the description of the tool.
Returns:
Return Code
Description
MERROR_NOERROR
No Error.
MERROR_INVALID_INSTANCE
The
mInst
parameter was out of range.
MERROR_INVALID_ARG
toolnumber
is out of range.
Notes:
Used to set the description of a tool for the tool table or it can be used to allow the user to change it on the program run page.
Usage:
MINSTANCE mInst = 0;
char desc[128] = "My Best 1/2 inch endmill";
int toolnum = 5;
// Set the description of tool number 5.
int rc = mcToolSetDesc(mInst, toolnum, desc);


