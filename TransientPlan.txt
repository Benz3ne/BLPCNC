PLC PV normalization – findings and rationale

Summary
- Error: bad argument #1 to 'tonumber' (string expected, got number) in PLC_Tick while building the UI sync signature.
- Root cause: pv() and P.pvGet() sometimes returned numbers and sometimes strings. Call sites then wrapped them with tonumber(...). In this runtime, calling tonumber on a number throws, causing the repeated PLC_Tick error.
- Fix: Normalize pv() and P.pvGet() to always return a single number, and stop double‑converting at the call sites.

What I found
- Error log pointed to PLC.txt line(s) reading AUTO PVs (#400/#401/#402):
  - local a400 = tonumber(pv(400)) or 0
  - local a401 = tonumber(pv(401)) or 0
  - local a402 = tonumber(pv(402)) or 0
- Similar pattern appeared elsewhere:
  - local need    = tonumber(P.pvGet(496))  or 3
  - local activeH = tonumber(P.pvGet(4120)) or 0
- Library behavior check (Dependencies):
  - SystemLib.PoundVarGet returns a single numeric value or nil (no rc tuple).
  - AuxLib reads PVs as numbers and clamps to 0/1 as needed.
  - Therefore, returning numbers from our helpers is the correct contract and aligns with both libraries.

Changes made in PLC.txt
- Normalized P.pvGet(id) near PLC_Init:
  - Now prefers P.SystemLib.PoundVarGet when present, else mc.mcCntlGetPoundVar.
  - Returns a number with a type‑guard: numbers pass through; strings are tonumber(...)’d; nil becomes 0.
- Normalized the local pv(n) inside the UI sync block the same way, preferring P.SystemLib first, then mc.*; returns a number.
- Removed double‑conversion at call sites:
  - UI sync: a400/a401/a402 now use pv(400/401/402) directly (no tonumber).
  - Spin‑up delay and H‑offset reads now use P.pvGet(...) directly (no tonumber).

Why this is the root‑cause fix
- Establishes a consistent numeric contract at the PV helper boundary, eliminating the string/number ambiguity that caused tonumber(...) to receive numbers.
- Avoids repeating conversions throughout PLC and prevents future regressions when a source returns numbers.
- Keeps behavior consistent with SystemLib and AuxLib, so no library modifications or semantic changes are required.

Notes on “[Degraded Mode] Missing lib ...” messages
- These messages originate from System\ScreenLoad.txt’s safeRequire() when require(...) fails to load a module before globals are set.
- The libraries exist in Scripts\Dependencies (SystemLib.txt, ToolLib.txt, AuxLib.txt, UILib.txt), and package.path is configured there to include “Dependencies\\?.txt;Dependencies\\?.lua”.
- The warnings are independent of the PV normalization. If they persist after a full screen/profile reload, next checks are:
  - Confirm ScreenLoad.txt runs (it sets package.path and binds globals).
  - Ensure filenames match module names exactly (e.g., SystemLib.txt provides return SystemLib).
  - If desired, augment safeRequire to mc.mcCntlSetLastError the actual require error for diagnostics.

Next steps
- Reload the screen (or restart Mach4) to allow ScreenLoad to bind libraries and clear any stale require cache.
- Watch the message console; the prior tonumber errors should be gone. If “Degraded Mode” remains, capture the first few console lines after load so we can pinpoint require timing/order.

