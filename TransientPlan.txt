Startup Outputs + UI Control — Root Cause and Minimal Fixes

Goal
- Fix the actual causes of “dust/vacs energize on Enable” and “UI feels unresponsive”, with correct, minimal changes.
- Keep libraries (SystemLib/AuxLib/ToolLib/UILib) as the single source of truth for execution (IO/state); put policy and ordering in scripts (ScreenLoad/PLC).

What’s Happening (Root Causes)
- Policy: ScreenLoad registers dust with auto = (spindle == 1 OR inCycle == 1). Some controllers briefly report inCycle == 1 around Enable, so dust auto evaluates true even with spindle off.
- Ordering: PV defaults are intended (#400/#402=1, #401=0, all targets OFF), but first updates can run before defaults fully settle, letting stale #411/#412 (vac targets) energize outputs.
- Design: In AUTO, manual clicks are correctly overridden by AuxLib.Update; if autos are ON, buttons can feel “dead”.
- Robustness: ScreenLoad uses tonumber(...) in places where values can already be numbers; in this runtime tonumber(number) can throw and interrupt UI repaint.

Minimal, Correct Changes (Scripts own logic; Libs execute)
1) Dust auto policy (ScreenLoad)
   - Change to spindle-only to avoid Enable-time inCycle blips.
     From: auto = function(ctx) return (ctx.spindle == 1 or ctx.inCycle == 1) and 1 or 0 end
     To:   auto = function(ctx) return (ctx.spindle == 1) and 1 or 0 end
   - Rationale: Keeps desired behavior (dust follows spindle) without false ON at Enable.

2) Deterministic PV defaults (ScreenLoad, once, before any updates)
   - Immediately after libs load, set once per session:
     #400=1 (dust auto ON), #402=1 (boot auto ON), #401=0 (vac auto OFF)
     #404/#403/#411/#412 = 0 (all manual targets OFF)
   - Guard with _G.__pv_defaults to ensure it runs only once.
   - Rationale: Ensures vacs and all targets start OFF before the first AuxLib.Update; eliminates stale startup states.

3) Numeric safety in ScreenLoad (prevents UI repaint aborts)
   - Add helper: local function num(v, d) return (type(v)=="number") and v or (tonumber(v) or d or 0) end
   - Use in b01 and hotspots currently calling tonumber on possibly numeric values:
     - b01(x): return (num(x) == 1) and 1 or 0
     - Interlocks (virtualActive/m6Active) and Enable handler (vt)
     - Tool helpers and Soft-limits seed (enable flag)
   - Rationale: Avoids exceptions when value is already numeric in this runtime; keeps UI Sync stable.

4) Optional ordering tweak in PLC (reduce races)
   - Remove the immediate AuxLib.Update(inst) at the end of the PV defaults block in PLC_Init.
   - Let the first PLC_Tick drive updates after ScreenLoad/UI have stabilized.
   - Rationale: Fewer enable-time races without touching libraries.

Why This Solves It (and preserves SoT)
- Dust: With spindle-only auto, Enable no longer triggers a false ON; dust follows spindle state as intended.
- Vacs: With #401=0 and targets cleared before the first update, vac outputs remain OFF until the operator enables AUTO or toggles manual.
- UI: In manual (AUTO=0), AuxLib.Update respects pv.target; coupled with numeric safety in ScreenLoad, repaint runs reliably and buttons reflect true state.
- Separation of concerns: Libraries remain the single source of truth for execution (IO/state and ctx formation). Scripts define policy (when devices should run) and startup ordering — which is where the issues originated. No library behavior is altered.

Verification Steps
- Restart Mach4 (or reload the screen).
- Enable with spindle OFF: dust/vacs remain OFF; UI buttons respond and reflect state.
- Start spindle: dust engages; stop spindle: dust disengages.
- Toggle Vac Auto (#401) ON: both vacs become AUTO-controlled (still no auto rule by default); manual toggles are overridden only while AUTO is ON, by design.

Notes
- The prior PLC tonumber() errors were resolved by normalizing PV reads to numbers and removing double-conversion.
- Library syntax error in SystemLib.txt was fixed (newline literal), clearing degraded-mode messages.
