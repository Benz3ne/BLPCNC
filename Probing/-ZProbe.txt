-- Probe -Z - Button Left-Down Script for Mach4 v3.0
-- Compatible with M311 v1.4.0+ with sentinel mode and H-compensation
-- Updated to use ProbeLib v2.1 enhanced library functions

-- Required Pound Variables:
-- #303 = Fast feedrate for probing
-- #304 = Slow feedrate for final probe
-- #305 = Maximum probe travel distance
-- #388 = Probe mode state (0=normal, 1=sentinel mode active)
-- #389 = Machine coordinate of final probe contact (sentinel on failure)
-- #391 = Edge position (adjusted for probe radius)
-- #394 = TRUE surface Z in machine coords (H-compensated for datum setting)

-- Required Macro:
-- m311.mcs must exist in your profile's Macros folder

-- Load libraries
local ProbeLib = require("ProbeLib")
local SystemLib = require("SystemLib")
local UILib = require("UILib")

local inst = ProbeLib.Core.GetInstance()

-- ============================================
-- CONSTANTS
-- ============================================
local SENTINEL_VALUE = ProbeLib.CONSTANTS.SENTINEL_VALUE
local PROBE_SIGNAL = ProbeLib.CONSTANTS.PROBE_SIGNAL

-- ============================================
-- ROTATION CHECK
-- ============================================
if not ProbeLib.Safety.CheckRotation(inst, "warn") then
    return  -- User cancelled due to rotation
end

-- ============================================
-- TOOL CHECK (using ProbeLib)
-- ============================================
if not ProbeLib.Core.ActivateProbeTool(inst) then
    return  -- User cancelled tool activation
end

-- ============================================
-- PROBE PRECHECK
-- ============================================
if not ProbeLib.Safety.EnsureProbeNotTripped(inst) then
    return  -- Probe is stuck triggered
end

-- ============================================
-- LOAD SAVED SETTINGS (using ProbeLib)
-- ============================================
local settings = SystemLib.Storage.CreateSettings(inst, "ProbeZ", {
    ActionMode = 1
})

local lastAction = settings:getInt("ActionMode", 1)

-- ============================================
-- CREATE DIALOG
-- ============================================
-- Determine parent window
local parent = wx.NULL
local app = wx.wxGetApp()
if app then
    local ok, top = pcall(function() return app:GetTopWindow() end)
    if ok and top then parent = top end
end

-- Create resizable dialog with saved geometry
local dlg, panel, mainSizer = UILib.ResizableDialog.CreateWithPanel(
    parent, "Probe -Z Setup", "ZProbeDialog", 300, 200
)

-- Declare UI elements
local instructText, datumText
local actionRadio

-- Create controls
instructText = wx.wxStaticText(panel, wx.wxID_ANY,
    "Position the probe above the surface:\n" ..
    "• Ensure adequate clearance below probe\n" ..
    "• Probe will move down to find surface")
instructText:SetFont(wx.wxFont(9, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))

datumText = wx.wxStaticText(panel, wx.wxID_ANY, "")
datumText:SetFont(wx.wxFont(9, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))

actionRadio = UILib.Controls.ActionRadio(panel, lastAction - 1)

-- Function to update datum description
local function UpdateDatumDescription()
    local action = actionRadio:GetSelection() + 1
    
    -- Use library function for consistent formatting
    local axes = {z = true}  -- Only Z axis for this probe
    local description = ProbeLib.UI.DatumSummary(action, axes)
    
    -- Add more detailed description
    if action == 1 then  -- Set Datum
        description = description .. "\n• Z0 at surface\n• X Y unchanged"
    else  -- Print Coords
        description = description .. "\n• Surface (machine Z)\n• Surface (work Z)"
    end
    
    datumText:SetLabel(description)
    panel:Layout()
end

-- Build the UI layout
-- Instructions (plain text, no box)
mainSizer:Add(instructText, 0, wx.wxALL, 10)

-- Options section
local optionsBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "Options")
optionsBox:Add(actionRadio, 0, wx.wxEXPAND + wx.wxALL, 5)
mainSizer:Add(optionsBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- Update datum description when control changes
actionRadio:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_RADIOBOX_SELECTED, function(event)
    UpdateDatumDescription()
end)

-- Initial update of datum description
UpdateDatumDescription()

-- Add datum text at bottom (no box, just text)
mainSizer:Add(datumText, 0, wx.wxALL + wx.wxALIGN_CENTER, 10)

-- Buttons
local buttonSizer = wx.wxStdDialogButtonSizer()
local okBtn = wx.wxButton(panel, wx.wxID_OK, "OK")
local cancelBtn = wx.wxButton(panel, wx.wxID_CANCEL, "Cancel")

okBtn:SetMinSize(wx.wxSize(90, 28))
cancelBtn:SetMinSize(wx.wxSize(90, 28))

buttonSizer:AddButton(okBtn)
buttonSizer:AddButton(cancelBtn)
buttonSizer:Realize()

mainSizer:Add(buttonSizer, 0, wx.wxALL + wx.wxALIGN_CENTER, 8)

-- Apply layout
panel:SetSizer(mainSizer)
mainSizer:Fit(panel)
dlg:Fit()
dlg:Centre()

-- ============================================
-- SHOW DIALOG AND PROCESS
-- ============================================
if dlg:ShowModal() == wx.wxID_OK then
    -- Get values
    local actionSel = actionRadio:GetSelection() + 1
    
    -- Save settings
    settings:setInt("ActionMode", actionSel)
    
    dlg:Destroy()
    
    -- ============================================
    -- MAIN PROBE EXECUTION WITH CLEANUP
    -- ============================================
    local function ExecuteZProbe()
        -- Capture complete machine state using new ProbeLib function
        local startState = ProbeLib.Core.CaptureState(inst)
        
        -- Main probe sequence variables
        local success = false
        local datumWasSet = false
        local errorMsg = nil
        
        -- Cleanup function that ALWAYS runs
        local function ProbeCleanup()
            -- Use ProbeLibrary cleanup
            ProbeLib.Cleanup.Standard(inst, success, errorMsg)
            -- Success messages are handled by Set Datum or Print Coords modes
        end
        
        -- Main probe logic with xpcall for better error handling
        local ok, err = xpcall(
            function()
                -- Check if probe is already triggered
                if mc.mcSignalGetState(inst, PROBE_SIGNAL) == 1 then
                    local msg = "Z PROBE STUCK\n\n" ..
                                "Probe is already triggered before starting.\n\n" ..
                                "Possible causes:\n" ..
                                "• Probe tip is touching something\n" ..
                                "• Probe cable fault or short circuit\n" ..
                                "• Probe needs to be reset\n\n" ..
                                "Clear the probe and retry."
                    wx.wxMessageBox(msg, "Probe Stuck", wx.wxOK + wx.wxICON_ERROR)
                    error("Probe is already triggered")
                end
                
                -- Initialize probe log
                local profileName = mc.mcProfileGetName(inst)
                local probeLogPath = mc.mcCntlGetMachDir(inst) .. "\\Profiles\\" .. profileName .. "\\ProbeLog.csv"
                local logFile = io.open(probeLogPath, "a")
                if logFile then
                    -- Write header if file is new/empty
                    local fileSize = logFile:seek("end")
                    if fileSize == 0 then
                        logFile:write("Timestamp,Method,X,Y,Z\n")
                    end
                    logFile:close()
                end
                
                -- Helper function to log probe events
                local function LogProbeEvent(method, x, y, z)
                    local ok, err = pcall(function()
                        local logFile = io.open(probeLogPath, "a")
                        if logFile then
                            local timestamp = os.date("%Y-%m-%d %H:%M:%S")
                            local logEntry = string.format("%s,%s,%.4f,%.4f,%.4f\n",
                                timestamp, method, x, y, z)
                            logFile:write(logEntry)
                            logFile:close()
                        end
                    end)
                    -- Silent fail on logging errors
                end
                
                -- Get validated probe parameters using new ProbeLib function
                local params = ProbeLib.Core.GetProbeParameters(inst)
                
                -- No status message before probing
                
                -- Execute Z probe using ProbeLib (S5 = probe -Z direction)
                mc.mcCntlGcodeExecuteWait(inst, "G4 P0.1")  -- Small dwell to let system settle
                local success, surfaceWorkZ, surfaceMachZ = ProbeLib.Movement.ExecuteProbe(inst, 5, "Z surface")
                
                if not success then
                    local msg = string.format(
                        "Z PROBE FAILURE\n\n" ..
                        "The probe did not make contact within %.3f inches.\n\n" ..
                        "Possible causes:\n" ..
                        "• Probe not connected or not triggered\n" ..
                        "• Surface is beyond probe travel distance\n" ..
                        "• Probe may be damaged or disconnected\n\n" ..
                        "The probe sequence has stopped.",
                        params.maxTravel)
                    
                    wx.wxMessageBox(msg, "Probe Failure", wx.wxOK + wx.wxICON_ERROR)
                    error("Z probe failed - no surface detected")
                end
                
                -- Validate results
                if type(surfaceWorkZ) ~= "number" or surfaceWorkZ < -1e300 then
                    local msg = "Z PROBE ERROR\n\n" ..
                                "Invalid surface position returned from probe.\n" ..
                                "The probe may not have completed successfully.\n\n" ..
                                "Please check probe configuration and retry."
                    wx.wxMessageBox(msg, "Probe Error", wx.wxOK + wx.wxICON_ERROR)
                    error("Invalid surface position from probe")
                end
                
                -- Log the Z probe
                LogProbeEvent("S5 M311", startState.work.x, startState.work.y, surfaceWorkZ)
                
                -- Return to safe height after Z probe (using machine coordinates)
                mc.mcCntlGcodeExecuteWait(inst, string.format("G53 G0 Z%.4f", startState.machine.z))
                
                -- Set datum or print results
                if actionSel == 1 then  -- Set Datum
                    -- Get current work offset
                    local modalOffset = mc.mcCntlGetPoundVar(inst, 4014)
                    local currentOffset = 54  -- Default G54
                    if type(modalOffset) == "number" and modalOffset >= 54 and modalOffset <= 59 then
                        currentOffset = math.floor(modalOffset + 0.5)
                    end
                    
                    -- Work offset variable mapping
                    local workOffsetVars = {
                        [54] = {x = 5221, y = 5222, z = 5223},  -- G54
                        [55] = {x = 5241, y = 5242, z = 5243},  -- G55
                        [56] = {x = 5261, y = 5262, z = 5263},  -- G56
                        [57] = {x = 5281, y = 5282, z = 5283},  -- G57
                        [58] = {x = 5301, y = 5302, z = 5303},  -- G58
                        [59] = {x = 5321, y = 5322, z = 5323}   -- G59
                    }
                    
                    local offsets = workOffsetVars[currentOffset]
                    if offsets then
                        -- Use TRUE surface from #394 if available (H-compensated)
                        local trueSurfaceZ = mc.mcCntlGetPoundVar(inst, 394)
                        local datumMachZ
                        
                        if type(trueSurfaceZ) == "number" and trueSurfaceZ > -1e300 and trueSurfaceZ ~= SENTINEL_VALUE then
                            -- M311 provided H-compensated surface
                            datumMachZ = trueSurfaceZ
                        else
                            -- Fallback: Use raw machine position (shouldn't happen with M311 v1.4.0+)
                            datumMachZ = surfaceMachZ
                        end
                        
                        -- Use library function for datum setting (only Z axis)
                        local offsetP = currentOffset - 53  -- G54=P1, G55=P2, etc.
                        ProbeLib.Core.ApplyOrPrint(inst, 1, {z = datumMachZ}, offsetP)
                        
                        -- Now activate the work offset
                        local gcode = string.format("G%d", currentOffset)
                        mc.mcCntlGcodeExecuteWait(inst, gcode)
                        
                        mc.mcCntlSetLastError(inst, string.format("Surface set as %s Z0", gcode))
                        datumWasSet = true
                    else
                        local msg = string.format(
                            "INVALID WORK OFFSET\n\n" ..
                            "Current work offset (G%d) is not valid.\n\n" ..
                            "Please select a valid work offset (G54-G59)\n" ..
                            "before running the probe routine.",
                            currentOffset or 0)
                        wx.wxMessageBox(msg, "Configuration Error", wx.wxOK + wx.wxICON_ERROR)
                        error("Invalid work offset")
                    end
                else  -- Print Coords
                    -- Get TRUE surface from #394 for accurate machine coordinate
                    local trueSurfaceZ = mc.mcCntlGetPoundVar(inst, 394)
                    local displayMachZ
                    
                    if type(trueSurfaceZ) == "number" and trueSurfaceZ > -1e300 and trueSurfaceZ ~= SENTINEL_VALUE then
                        displayMachZ = trueSurfaceZ
                    else
                        -- Fallback to raw machine position
                        displayMachZ = surfaceMachZ
                    end
                    
                    -- Show both machine and work coordinates
                    mc.mcCntlSetLastError(inst, string.format("Surface (machine): Z%.4f, (work): Z%.4f", 
                                                              displayMachZ, surfaceWorkZ))
                end
                
                success = true
                return true
            end,
            debug.traceback  -- Get full stack trace on error
        )
        
        if not ok then
            errorMsg = tostring(err)
            success = false
        end
        
        -- Always cleanup regardless of success/failure
        ProbeCleanup()
        
        return success
    end
    
    -- Execute with enhanced error handling and cleanup
    local success, result = ProbeLib.Error.SafeExecute(
        inst, 
        ExecuteZProbe,
        function(wasSuccess, errorMsg)
            -- Cleanup function - always runs
            ProbeLib.Cleanup.Standard(inst, wasSuccess, errorMsg)
        end
    )
    
    if not success then
        mc.mcCntlSetLastError(inst, "ERROR: " .. tostring(result))
        wx.wxMessageBox("Probe sequence failed:\n" .. tostring(result), 
                       "Probe Error", wx.wxOK + wx.wxICON_ERROR)
    end
    -- Success: message already set by Set Datum or Print Coords
else
    dlg:Destroy()
end