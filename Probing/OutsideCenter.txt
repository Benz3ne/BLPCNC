-- Outside Center Probe v5.0 - Library Enhanced Edition
-- Finds the center of a boss/outside feature with optional Z surface probing
-- Uses ProbeLib v2.1 enhanced library functions
-- Maintains local control of dialog layout and business logic

-- Load libraries
local ProbeLib = require("ProbeLib")
local SystemLib = require("SystemLib")
local UILib = require("UILib")

local inst = ProbeLib.Core.GetInstance()

-- ============================================
-- ROTATION CHECK
-- ============================================
if not ProbeLib.Safety.CheckRotation(inst, "warn") then
    return  -- User cancelled due to rotation
end

-- ============================================
-- TOOL CHECK
-- ============================================
if not ProbeLib.Core.ActivateProbeTool(inst) then
    return  -- User cancelled tool activation
end

-- ============================================
-- PROBE PRECHECK
-- ============================================
if not ProbeLib.Safety.EnsureProbeNotTripped(inst) then
    return  -- Probe is stuck triggered
end

-- ============================================
-- SETTINGS MANAGEMENT (using ProbeLib)
-- ============================================
local settings = SystemLib.Storage.CreateSettings(inst, "OutsideCenter", {
    ProbeZ = 0,        -- 0=No, 1=Yes
    SetZDatum = 0,     -- 0=No, 1=Yes
    ActionMode = 1,    -- 1=Set Datum, 2=Print Coords
    ProbeDepth = 0.1   -- Depth below top for XY probing
})

-- Load saved settings
local lastProbeZ = settings:getInt("ProbeZ", 0)
local lastSetZDatum = settings:getInt("SetZDatum", 0)
local lastActionMode = settings:getInt("ActionMode", 1)
local lastProbeDepth = settings:getFloat("ProbeDepth", 0.1)

-- ============================================
-- CREATE DIALOG (using UILib resizable dialog)
-- ============================================
local parent = UILib.Msg.GetParent()

-- Create resizable dialog with saved geometry
local dlg, panel, mainSizer = UILib.ResizableDialog.CreateWithPanel(
    parent, "Outside Center Probe Setup", "OutsideCenterProbe", 380, 450
)

-- Instructions
local instructText = wx.wxStaticText(panel, wx.wxID_ANY,
    "Position the probe above a boss or outside feature:\n" ..
    "• Above and roughly centered on the feature\n" ..
    "• High enough to clear when moving to edges\n" ..
    "• Probe will find edges and calculate center")
instructText:SetFont(UILib.Styles.Fonts.Default)
mainSizer:Add(instructText, 0, wx.wxALL, 10)

-- Z Probing Options
local zBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "Z Surface Options")

local probeZCheck = UILib.Controls.CreateCheckBox(panel, "Probe Z surface first", lastProbeZ == 1)
zBox:Add(probeZCheck, 0, wx.wxALL, 5)

local setZDatumCheck = UILib.Controls.CreateCheckBox(panel, "Set Z=0 at surface", lastSetZDatum == 1)
setZDatumCheck:Enable(lastProbeZ == 1)
zBox:Add(setZDatumCheck, 0, wx.wxALL, 5)

-- Probe depth input
local depthSizer, depthInput = UILib.Controls.CreateNumberInput(panel, "XY probe depth below surface:", lastProbeDepth, 80)
zBox:Add(depthSizer, 0, wx.wxALL + wx.wxEXPAND, 5)

mainSizer:Add(zBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- XY Options
local xyBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "XY Center Options")

local actionChoices = {"Set Datum (X=0, Y=0)", "Print Center Coordinates"}
local actionRadio = UILib.Controls.CreateRadioBox(panel, "Action", actionChoices, lastActionMode - 1, 1)
xyBox:Add(actionRadio, 0, wx.wxEXPAND + wx.wxALL, 5)

-- Visual indicator
local visualPanel = wx.wxPanel(panel, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxSize(120, 120))
visualPanel:SetBackgroundColour(wx.wxColour(240, 240, 240))

-- Draw visual representation
visualPanel:Connect(wx.wxEVT_PAINT, function(event)
    local dc = wx.wxPaintDC(visualPanel)
    local w = visualPanel:GetSize():GetWidth()
    local h = visualPanel:GetSize():GetHeight()
    
    -- Draw boss circle
    dc:SetBrush(wx.wxBrush(wx.wxColour(200, 200, 200), wx.wxSOLID))
    dc:DrawCircle(w/2, h/2, 40)
    
    -- Draw probe paths
    dc:SetPen(wx.wxPen(wx.wxColour(255, 0, 0), 2))
    dc:DrawLine(w/2 - 50, h/2, w/2 - 30, h/2)  -- Left approach
    dc:DrawLine(w/2 + 30, h/2, w/2 + 50, h/2)  -- Right approach
    dc:DrawLine(w/2, h/2 - 50, w/2, h/2 - 30)  -- Top approach
    dc:DrawLine(w/2, h/2 + 30, w/2, h/2 + 50)  -- Bottom approach
    
    -- Draw center point
    dc:SetBrush(wx.wxBrush(wx.wxColour(0, 0, 255), wx.wxSOLID))
    dc:DrawCircle(w/2, h/2, 3)
    
    dc:delete()
end)

xyBox:Add(visualPanel, 0, wx.wxALL + wx.wxALIGN_CENTER, 10)

mainSizer:Add(xyBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- Connect events
probeZCheck:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_CHECKBOX_CLICKED, function(event)
    setZDatumCheck:Enable(probeZCheck:GetValue())
end)

-- Spacer
mainSizer:AddStretchSpacer()

-- Buttons
local buttonSizer, okBtn, cancelBtn = UILib.Controls.CreateButtonSizer(panel, "OK", "Cancel")
mainSizer:Add(buttonSizer, 0, wx.wxALL + wx.wxALIGN_CENTER, 8)

-- Apply layout
panel:SetSizer(mainSizer)
dlg:Fit()

-- ============================================
-- SHOW DIALOG AND PROCESS
-- ============================================
if dlg:ShowModal() == wx.wxID_OK then
    -- Get values
    local probeZ = probeZCheck:GetValue() and 1 or 0
    local setZDatum = setZDatumCheck:GetValue() and 1 or 0
    local actionSel = actionRadio:GetSelection() + 1
    local probeDepth = depthInput:GetNumber(0.1)
    
    -- Save settings
    settings:setInt("ProbeZ", probeZ)
    settings:setInt("SetZDatum", setZDatum)
    settings:setInt("ActionMode", actionSel)
    settings:setFloat("ProbeDepth", probeDepth)
    
    dlg:Destroy()
    
    -- ============================================
    -- EXECUTE PROBE SEQUENCE
    -- ============================================
    local function ExecuteOutsideCenterProbe()
        -- Check if probe is already triggered
        if ProbeLib.Core.IsProbeTriggered(inst) then
            UILib.Msg.Error("Probe is already triggered!\n\nPlease clear the probe and try again.", "Probe Error")
            return false
        end
        
        -- Store starting position
        local startState = {
            machX = mc.mcAxisGetMachinePos(inst, 0),
            machY = mc.mcAxisGetMachinePos(inst, 1),
            machZ = mc.mcAxisGetMachinePos(inst, 2),
            workX = mc.mcAxisGetPos(inst, mc.X_AXIS),
            workY = mc.mcAxisGetPos(inst, mc.Y_AXIS),
            workZ = mc.mcAxisGetPos(inst, mc.Z_AXIS)
        }
        
        -- Get probe parameters
        local xProbeOffset = mc.mcCntlGetPoundVar(inst, 301) or 0
        local yProbeOffset = mc.mcCntlGetPoundVar(inst, 302) or 0
        local fastFeed = mc.mcCntlGetPoundVar(inst, 303) or 30
        local slowFeed = mc.mcCntlGetPoundVar(inst, 304) or 5
        local maxTravel = mc.mcCntlGetPoundVar(inst, 305) or 1.0
        local probeOffsetZ = mc.mcCntlGetPoundVar(inst, 320) or 0
        local probeLiftHeight = mc.mcCntlGetPoundVar(inst, 321) or 0.5
        
        local probeResults = {}
        local success = true
        local errorMsg = nil
        local probeZMachine = startState.machZ  -- Default if no Z probe
        
        -- Probe Z surface if requested
        if probeZ == 1 then
            mc.mcCntlSetLastError(inst, "Probing Z surface...")
            
            -- Execute Z probe (S5 = -Z)
            local zSuccess, zEdgeWork, zEdgeMachine = ProbeLib.Movement.ExecuteProbe(inst, 5, "Z surface")
            
            if not zSuccess then
                errorMsg = "Z surface probe failed - no contact"
                success = false
            else
                probeResults.zSurface = zEdgeWork
                probeZMachine = zEdgeMachine
                
                -- Set Z datum if requested
                if setZDatum == 1 then
                    -- Use the machine position we just probed
                    ProbeLib.Core.ApplyOrPrint(inst, actionSel, {z = zEdgeMachine}, 0)
                    mc.mcCntlSetLastError(inst, "Z datum set to surface")
                end
                
                -- Lift to probe height
                mc.mcCntlSetLastError(inst, "Lifting to XY probe height...")
                local liftCmd = string.format("G0 Z%.4f", probeResults.zSurface + probeLiftHeight)
                mc.mcCntlGcodeExecuteWait(inst, liftCmd)
                
                -- Move down to probe depth for XY
                if probeDepth > 0 then
                    local depthCmd = string.format("G0 Z%.4f", probeResults.zSurface - probeDepth)
                    mc.mcCntlGcodeExecuteWait(inst, depthCmd)
                end
            end
        end
        
        -- Continue with XY probing if Z was successful or not requested
        if success then
            -- Probe sequence: +X, -X, +Y, -Y
            local probeSequence = {
                {direction = 1, name = "+X", axis = "X", retract = -0.1},
                {direction = 2, name = "-X", axis = "X", retract = 0.1},
                {direction = 3, name = "+Y", axis = "Y", retract = -0.1},
                {direction = 4, name = "-Y", axis = "Y", retract = 0.1}
            }
            
            for _, probe in ipairs(probeSequence) do
                -- Check probe state before each probe
                if ProbeLib.Core.IsProbeTriggered(inst) then
                    errorMsg = string.format("Probe stuck before %s probe", probe.name)
                    success = false
                    break
                end
                
                -- Execute probe
                mc.mcCntlSetLastError(inst, string.format("Probing %s edge...", probe.name))
                local probeSuccess, edgeWork, edgeMachine = ProbeLib.Movement.ExecuteProbe(inst, probe.direction, probe.name)
                
                if not probeSuccess then
                    errorMsg = string.format("%s probe failed - no contact", probe.name)
                    success = false
                    break
                end
                
                -- Store result
                if probe.name == "+X" then
                    probeResults.xPlus = edgeWork
                elseif probe.name == "-X" then
                    probeResults.xMinus = edgeWork
                elseif probe.name == "+Y" then
                    probeResults.yPlus = edgeWork
                elseif probe.name == "-Y" then
                    probeResults.yMinus = edgeWork
                end
                
                -- Retract from edge
                mc.mcCntlSetLastError(inst, string.format("Retracting from %s...", probe.name))
                local retractCmd = string.format("G91 G1 %s%.4f F%.1f", probe.axis, probe.retract, fastFeed)
                mc.mcCntlGcodeExecuteWait(inst, retractCmd)
                mc.mcCntlGcodeExecuteWait(inst, "G90")
                
                -- Return to center position for next probe (except last)
                if probe.direction < 4 then
                    mc.mcCntlSetLastError(inst, "Returning to center...")
                    local centerCmd = string.format("G0 X%.4f Y%.4f", startState.workX, startState.workY)
                    mc.mcCntlGcodeExecuteWait(inst, centerCmd)
                end
            end
        end
        
        -- Process results if successful
        if success then
            -- Calculate centers
            local centerX = ProbeLib.Calculations.GetCenter(probeResults.xPlus, probeResults.xMinus)
            local centerY = ProbeLib.Calculations.GetCenter(probeResults.yPlus, probeResults.yMinus)
            
            -- Calculate widths
            local widthX = ProbeLib.Calculations.GetWidth(probeResults.xPlus, probeResults.xMinus)
            local widthY = ProbeLib.Calculations.GetWidth(probeResults.yPlus, probeResults.yMinus)
            
            -- Move to center at safe height
            if probeZ == 1 then
                mc.mcCntlSetLastError(inst, "Lifting to safe height...")
                local liftCmd = string.format("G0 Z%.4f", probeResults.zSurface + probeLiftHeight)
                mc.mcCntlGcodeExecuteWait(inst, liftCmd)
            end
            
            mc.mcCntlSetLastError(inst, "Moving to boss center...")
            local moveCmd = string.format("G0 X%.4f Y%.4f", centerX, centerY)
            mc.mcCntlGcodeExecuteWait(inst, moveCmd)
            
            -- Return to surface if Z was probed
            if probeZ == 1 then
                local surfaceCmd = string.format("G0 Z%.4f", probeResults.zSurface)
                mc.mcCntlGcodeExecuteWait(inst, surfaceCmd)
            end
            
            -- Execute action
            if actionSel == 1 then  -- Set Datum
                -- Get current machine position to set as zero
                local machX = mc.mcAxisGetMachinePos(inst, 0)
                local machY = mc.mcAxisGetMachinePos(inst, 1)
                ProbeLib.Core.ApplyOrPrint(inst, actionSel, {x = machX, y = machY}, 0)
                
                local msg = "Work zero set at boss center:\nX=0, Y=0\n\n"
                msg = msg .. string.format("Boss dimensions:\nX: %.4f\"\nY: %.4f\"", widthX, widthY)
                if probeZ == 1 and setZDatum == 1 then
                    msg = msg .. "\nZ=0 at surface"
                end
                
                UILib.Msg.Info(msg, "Datum Set")
            else  -- Print Coords
                local msg = string.format(
                    "Boss Center Coordinates:\nX: %.4f\nY: %.4f\n\n" ..
                    "Boss dimensions:\nX width: %.4f\"\nY width: %.4f\"",
                    centerX, centerY, widthX, widthY
                )
                if probeZ == 1 then
                    msg = msg .. string.format("\n\nSurface Z: %.4f", probeResults.zSurface)
                end
                
                UILib.Msg.Info(msg, "Center Position")
            end
            
            -- Check perpendicularity
            if not ProbeLib.Calculations.CheckPerpendicularity(widthX, widthY, 0.95) then
                UILib.Msg.Warning(
                    string.format("X and Y widths differ significantly:\nX: %.4f\"\nY: %.4f\"\n\n" ..
                                 "Feature may not be square/circular", widthX, widthY),
                    "Dimension Warning")
            end
            
            -- Log the probe event
            ProbeLib.Logging.LogEvent(inst, "OutsideCenter", 
                centerX, centerY, 
                probeResults.zSurface or startState.workZ,
                string.format("Width X:%.4f Y:%.4f Action:%d", widthX, widthY, actionSel))
        end
        
        -- Cleanup
        ProbeLib.Cleanup.Standard(inst, success, errorMsg)
        
        return success
    end
    
    -- Execute with error handling
    local ok, err = pcall(ExecuteOutsideCenterProbe)
    if not ok then
        UILib.Msg.Error("Outside center probe failed:\n" .. tostring(err), "Probe Error")
    end
else
    dlg:Destroy()
end