-- Probe -Z - Button Left-Down Script for Mach4 v2.0
-- Compatible with M311 v1.4.0+ with sentinel mode and H-compensation

-- Required Pound Variables:
-- #303 = Fast feedrate for probing
-- #304 = Slow feedrate for final probe
-- #305 = Maximum probe travel distance
-- #388 = Probe mode state (0=normal, 1=sentinel mode active)
-- #389 = Machine coordinate of final probe contact (sentinel on failure)
-- #391 = Edge position (adjusted for probe radius)
-- #394 = TRUE surface Z in machine coords (H-compensated for datum setting)

-- Required Macro:
-- m311.mcs must exist in your profile's Macros folder

local inst = mc.mcGetInstance()
if not inst then 
    return 
end

-- ============================================
-- CONSTANTS
-- ============================================
local SENTINEL_VALUE = -999999.0      -- Impossible machine position for failure detection
local PROBE_SIGNAL = mc.ISIG_PROBE1   -- Touch probe signal

-- ============================================
-- TOOL CHECK
-- ============================================
-- Check if T90 (probe) is active
local currentTool = mc.mcToolGetCurrent(inst)
-- Check if probe is physically deployed (output 7)
local probeDownHandle = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT7)
local probeDeployed = mc.mcSignalGetState(probeDownHandle)

-- Check both conditions - T90 is current AND probe is deployed
if currentTool ~= 90 or probeDeployed ~= 1 then
    -- Determine parent window
    local parent = wx.NULL
    local app = wx.wxGetApp()
    if app then
        local ok, top = pcall(function() return app:GetTopWindow() end)
        if ok and top then parent = top end
    end
    
    -- Show error dialog
    local dlgW, dlgH = 340, 180
    local sw = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_X) or 1024
    local sh = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_Y) or 768
    local posX = math.floor((sw - dlgW) / 2)
    local posY = math.floor((sh - dlgH) / 2)
    
    local errorDlg = wx.wxDialog(parent, wx.wxID_ANY,
        "Probe Not Active",
        wx.wxPoint(posX, posY), wx.wxSize(dlgW, dlgH),
        wx.wxDEFAULT_DIALOG_STYLE)
    
    local panel = wx.wxPanel(errorDlg, wx.wxID_ANY)
    local sizer = wx.wxBoxSizer(wx.wxVERTICAL)
    
    -- Error message
    local msg = wx.wxStaticText(panel, wx.wxID_ANY,
        "Please activate T90 (probe) before using Z probe.\n\n" ..
        "Click 'Change Tool to T90' to activate the probe,\n" ..
        "or 'Cancel' to exit.")
    msg:SetFont(wx.wxFont(10, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))
    sizer:Add(msg, 1, wx.wxALL + wx.wxALIGN_CENTER, 20)
    
    -- Button sizer
    local btnSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
    
    -- Change Tool button
    local changeBtn = wx.wxButton(panel, wx.wxID_ANY, "Change Tool to T90")
    changeBtn:SetMinSize(wx.wxSize(130, 28))
    btnSizer:Add(changeBtn, 0, wx.wxRIGHT, 10)
    
    -- Cancel button
    local cancelBtn = wx.wxButton(panel, wx.wxID_CANCEL, "Cancel")
    cancelBtn:SetMinSize(wx.wxSize(90, 28))
    btnSizer:Add(cancelBtn, 0, wx.wxLEFT, 0)
    
    sizer:Add(btnSizer, 0, wx.wxALIGN_CENTER + wx.wxBOTTOM, 15)
    
    -- Handle Change Tool button
    changeBtn:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
        errorDlg:EndModal(wx.wxID_YES)  -- Use YES as indicator to change tool
    end)
    
    panel:SetSizer(sizer)
    errorDlg:Centre()
    
    local result = errorDlg:ShowModal()
    errorDlg:Destroy()
    
    if result == wx.wxID_YES then
        -- Execute tool change and exit - user will need to click probe again
        mc.mcCntlGcodeExecuteWait(inst, "T90 M6")
        mc.mcCntlSetLastError(inst, "T90 activated - click Probe -Z again to continue")
        return
    else
        return  -- User cancelled
    end
end

-- ============================================
-- PROFILE STORAGE HELPERS
-- ============================================
local function ProfileGetInt(section, key, default)
    local strValue = mc.mcProfileGetString(inst, section, key, tostring(default))
    return tonumber(strValue) or default
end

local function ProfileSetInt(section, key, value)
    return mc.mcProfileWriteString(inst, section, key, tostring(value))
end

-- ============================================
-- LOAD SAVED SETTINGS
-- ============================================
local lastAction = ProfileGetInt("ProbeZ", "ActionMode", 1)

-- ============================================
-- CREATE DIALOG
-- ============================================
-- Determine parent window
local parent = wx.NULL
local app = wx.wxGetApp()
if app then
    local ok, top = pcall(function() return app:GetTopWindow() end)
    if ok and top then parent = top end
end

-- Dialog dimensions (compact)
local dlgW, dlgH = 300, 200
local sw = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_X) or 1024
local sh = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_Y) or 768
local posX = math.floor((sw - dlgW) / 2)
local posY = math.floor((sh - dlgH) / 2)

-- Create main dialog
local dlg = wx.wxDialog(parent, wx.wxID_ANY,
    "Probe -Z Setup",
    wx.wxPoint(posX, posY), wx.wxSize(dlgW, dlgH),
    wx.wxDEFAULT_DIALOG_STYLE)

-- Main panel
local panel = wx.wxPanel(dlg, wx.wxID_ANY)
local mainSizer = wx.wxBoxSizer(wx.wxVERTICAL)

-- Declare UI elements
local instructText, datumText
local actionRadio

-- Create controls
instructText = wx.wxStaticText(panel, wx.wxID_ANY,
    "Position the probe above the surface:\n" ..
    "• Ensure adequate clearance below probe\n" ..
    "• Probe will move down to find surface")
instructText:SetFont(wx.wxFont(9, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))

datumText = wx.wxStaticText(panel, wx.wxID_ANY, "")
datumText:SetFont(wx.wxFont(9, wx.wxFONTFAMILY_DEFAULT, wx.wxFONTSTYLE_NORMAL, wx.wxFONTWEIGHT_NORMAL))

local actionChoices = {"Set Datum", "Print Coords"}
actionRadio = wx.wxRadioBox(panel, wx.wxID_ANY,
    "Action", wx.wxDefaultPosition, wx.wxDefaultSize,
    actionChoices, 2, wx.wxRA_SPECIFY_COLS)
actionRadio:SetSelection(lastAction - 1)

-- Function to update datum description
local function UpdateDatumDescription()
    local action = actionRadio:GetSelection() + 1
    
    local description = ""
    if action == 1 then  -- Set Datum
        description = "Datum will be set to:\n• Z0 at surface\n• X Y unchanged"
    else  -- Print Coords
        description = "Will print coordinates of:\n• Surface (machine Z)\n• Surface (work Z)"
    end
    datumText:SetLabel(description)
    panel:Layout()
end

-- Build the UI layout
-- Instructions (plain text, no box)
mainSizer:Add(instructText, 0, wx.wxALL, 10)

-- Options section
local optionsBox = wx.wxStaticBoxSizer(wx.wxVERTICAL, panel, "Options")
optionsBox:Add(actionRadio, 0, wx.wxEXPAND + wx.wxALL, 5)
mainSizer:Add(optionsBox, 0, wx.wxALL + wx.wxEXPAND, 10)

-- Update datum description when control changes
actionRadio:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_RADIOBOX_SELECTED, function(event)
    UpdateDatumDescription()
end)

-- Initial update of datum description
UpdateDatumDescription()

-- Add datum text at bottom (no box, just text)
mainSizer:Add(datumText, 0, wx.wxALL + wx.wxALIGN_CENTER, 10)

-- Buttons
local buttonSizer = wx.wxStdDialogButtonSizer()
local okBtn = wx.wxButton(panel, wx.wxID_OK, "OK")
local cancelBtn = wx.wxButton(panel, wx.wxID_CANCEL, "Cancel")

okBtn:SetMinSize(wx.wxSize(90, 28))
cancelBtn:SetMinSize(wx.wxSize(90, 28))

buttonSizer:AddButton(okBtn)
buttonSizer:AddButton(cancelBtn)
buttonSizer:Realize()

mainSizer:Add(buttonSizer, 0, wx.wxALL + wx.wxALIGN_CENTER, 8)

-- Apply layout
panel:SetSizer(mainSizer)
mainSizer:Fit(panel)
dlg:Fit()
dlg:Centre()

-- ============================================
-- SHOW DIALOG AND PROCESS
-- ============================================
if dlg:ShowModal() == wx.wxID_OK then
    -- Get values
    local actionSel = actionRadio:GetSelection() + 1
    
    -- Save settings
    ProfileSetInt("ProbeZ", "ActionMode", actionSel)
    
    dlg:Destroy()
    
    -- ============================================
    -- MAIN PROBE EXECUTION WITH CLEANUP
    -- ============================================
    local function ExecuteZProbe()
        -- Save state BEFORE any operations
        local startState = {
            -- Machine positions for movements
            machX = mc.mcAxisGetMachinePos(inst, 0),
            machY = mc.mcAxisGetMachinePos(inst, 1),
            machZ = mc.mcAxisGetMachinePos(inst, 2),
            
            -- Work positions for display only
            workX = mc.mcAxisGetPos(inst, mc.X_AXIS),
            workY = mc.mcAxisGetPos(inst, mc.Y_AXIS),
            workZ = mc.mcAxisGetPos(inst, mc.Z_AXIS)
        }
        
        -- Main probe sequence variables
        local success = false
        local datumWasSet = false
        local errorMsg = nil
        
        -- Cleanup function that ALWAYS runs
        local function ProbeCleanup()
            -- Clear sentinel mode flag if it was set
            mc.mcCntlSetPoundVar(inst, 388, 0)
            
            -- Clear probe latch
            pcall(mc.mcCntlGcodeExecuteWait, inst, "G31.2")
            
            -- Clear runtime variables
            mc.mcCntlSetPoundVar(inst, 389, -1e308)
            mc.mcCntlSetPoundVar(inst, 390, -1e308)
            mc.mcCntlSetPoundVar(inst, 391, -1e308)
            mc.mcCntlSetPoundVar(inst, 394, -1e308)
            
            -- Report status
            if not success then
                if errorMsg then
                    mc.mcCntlSetLastError(inst, "Z probe failed: " .. errorMsg)
                else
                    mc.mcCntlSetLastError(inst, "Z probe failed - see previous error")
                end
            end
            -- Success messages are handled by Set Datum or Print Coords modes
        end
        
        -- Main probe logic with xpcall for better error handling
        local ok, err = xpcall(
            function()
                -- Check if probe is already triggered
                if mc.mcSignalGetState(inst, PROBE_SIGNAL) == 1 then
                    local msg = "Z PROBE STUCK\n\n" ..
                                "Probe is already triggered before starting.\n\n" ..
                                "Possible causes:\n" ..
                                "• Probe tip is touching something\n" ..
                                "• Probe cable fault or short circuit\n" ..
                                "• Probe needs to be reset\n\n" ..
                                "Clear the probe and retry."
                    wx.wxMessageBox(msg, "Probe Stuck", wx.wxOK + wx.wxICON_ERROR)
                    error("Probe is already triggered")
                end
                
                -- Initialize probe log
                local profileName = mc.mcProfileGetName(inst)
                local probeLogPath = mc.mcCntlGetMachDir(inst) .. "\\Profiles\\" .. profileName .. "\\ProbeLog.csv"
                local logFile = io.open(probeLogPath, "a")
                if logFile then
                    -- Write header if file is new/empty
                    local fileSize = logFile:seek("end")
                    if fileSize == 0 then
                        logFile:write("Timestamp,Method,X,Y,Z\n")
                    end
                    logFile:close()
                end
                
                -- Helper function to log probe events
                local function LogProbeEvent(method, x, y, z)
                    local ok, err = pcall(function()
                        local logFile = io.open(probeLogPath, "a")
                        if logFile then
                            local timestamp = os.date("%Y-%m-%d %H:%M:%S")
                            local logEntry = string.format("%s,%s,%.4f,%.4f,%.4f\n",
                                timestamp, method, x, y, z)
                            logFile:write(logEntry)
                            logFile:close()
                        end
                    end)
                    -- Silent fail on logging errors
                end
                
                -- Get probe parameters from pound variables
                local fastFeed = mc.mcCntlGetPoundVar(inst, 303)
                local slowFeed = mc.mcCntlGetPoundVar(inst, 304)
                local maxTravel = mc.mcCntlGetPoundVar(inst, 305)
                
                -- Validate and set defaults
                if type(fastFeed) ~= "number" or fastFeed <= 0 then fastFeed = 30 end
                if type(slowFeed) ~= "number" or slowFeed <= 0 then slowFeed = 5 end
                if type(maxTravel) ~= "number" or maxTravel <= 0 then maxTravel = 1.0 end
                
                -- No status message before probing
                
                -- Enable sentinel mode for M311
                mc.mcCntlSetPoundVar(inst, 388, 1)  -- Set sentinel mode flag
                
                -- Set sentinel values before probe
                mc.mcCntlSetPoundVar(inst, 389, SENTINEL_VALUE)
                mc.mcCntlSetPoundVar(inst, 390, SENTINEL_VALUE)
                mc.mcCntlSetPoundVar(inst, 391, SENTINEL_VALUE)
                mc.mcCntlSetPoundVar(inst, 392, SENTINEL_VALUE)
                mc.mcCntlSetPoundVar(inst, 394, SENTINEL_VALUE)
                
                -- Execute Z probe using S5 M311 (probe -Z direction)
                mc.mcCntlGcodeExecuteWait(inst, "G4 P0.1")  -- Small dwell to let system settle
                local rc = mc.mcCntlGcodeExecuteWait(inst, "S5 M311")
                
                -- Clear sentinel mode flag (M311 should do this but be explicit)
                mc.mcCntlSetPoundVar(inst, 388, 0)
                
                -- Check for probe failure using sentinel
                local surfaceMachZ = mc.mcCntlGetPoundVar(inst, 389)  -- Machine coordinate
                if surfaceMachZ == SENTINEL_VALUE or surfaceMachZ < -1e300 then
                    local msg = string.format(
                        "Z PROBE FAILURE\n\n" ..
                        "The probe did not make contact within %.3f inches.\n\n" ..
                        "Possible causes:\n" ..
                        "• Probe not connected or not triggered\n" ..
                        "• Surface is beyond probe travel distance\n" ..
                        "• Probe may be damaged or disconnected\n\n" ..
                        "The probe sequence has stopped.",
                        maxTravel or 1.0)
                    
                    wx.wxMessageBox(msg, "Probe Failure", wx.wxOK + wx.wxICON_ERROR)
                    error("Z probe failed - no surface detected")
                end
                
                -- Get the probed Z position (edge position from M311)
                local surfaceWorkZ = mc.mcCntlGetPoundVar(inst, 391)
                if type(surfaceWorkZ) ~= "number" or surfaceWorkZ < -1e300 then
                    local msg = "Z PROBE ERROR\n\n" ..
                                "Invalid surface position returned from probe.\n" ..
                                "The probe may not have completed successfully.\n\n" ..
                                "Please check probe configuration and retry."
                    wx.wxMessageBox(msg, "Probe Error", wx.wxOK + wx.wxICON_ERROR)
                    error("Invalid surface position from probe")
                end
                
                -- Log the Z probe
                LogProbeEvent("S5 M311", startState.workX, startState.workY, surfaceWorkZ)
                
                -- Return to safe height after Z probe (using machine coordinates)
                mc.mcCntlGcodeExecuteWait(inst, string.format("G53 G0 Z%.4f", startState.machZ))
                
                -- Set datum or print results
                if actionSel == 1 then  -- Set Datum
                    -- Get current work offset
                    local modalOffset = mc.mcCntlGetPoundVar(inst, 4014)
                    local currentOffset = 54  -- Default G54
                    if type(modalOffset) == "number" and modalOffset >= 54 and modalOffset <= 59 then
                        currentOffset = math.floor(modalOffset + 0.5)
                    end
                    
                    -- Work offset variable mapping
                    local workOffsetVars = {
                        [54] = {x = 5221, y = 5222, z = 5223},  -- G54
                        [55] = {x = 5241, y = 5242, z = 5243},  -- G55
                        [56] = {x = 5261, y = 5262, z = 5263},  -- G56
                        [57] = {x = 5281, y = 5282, z = 5283},  -- G57
                        [58] = {x = 5301, y = 5302, z = 5303},  -- G58
                        [59] = {x = 5321, y = 5322, z = 5323}   -- G59
                    }
                    
                    local offsets = workOffsetVars[currentOffset]
                    if offsets then
                        -- Use TRUE surface from #394 if available (H-compensated)
                        local trueSurfaceZ = mc.mcCntlGetPoundVar(inst, 394)
                        local datumMachZ
                        
                        if type(trueSurfaceZ) == "number" and trueSurfaceZ > -1e300 and trueSurfaceZ ~= SENTINEL_VALUE then
                            -- M311 provided H-compensated surface
                            datumMachZ = trueSurfaceZ
                        else
                            -- Fallback: Use raw machine position (shouldn't happen with M311 v1.4.0+)
                            datumMachZ = surfaceMachZ
                        end
                        
                        -- Keep X and Y offsets unchanged (get current machine offsets)
                        local currentXOffset = mc.mcCntlGetPoundVar(inst, offsets.x)
                        local currentYOffset = mc.mcCntlGetPoundVar(inst, offsets.y)
                        
                        -- Set Z offset to surface using machine coordinates
                        mc.mcCntlSetPoundVar(inst, offsets.z, datumMachZ)
                        
                        -- Force work offset update using G10 L20 (machine coordinates)
                        local offsetP = currentOffset - 53  -- G54=P1, G55=P2, etc.
                        local g10Command = string.format("G10 L20 P%d Z%.4f", offsetP, datumMachZ)
                        mc.mcCntlGcodeExecuteWait(inst, g10Command)
                        
                        -- Now activate the work offset
                        local gcode = string.format("G%d", currentOffset)
                        mc.mcCntlGcodeExecuteWait(inst, gcode)
                        
                        mc.mcCntlSetLastError(inst, string.format("Surface set as %s Z0", gcode))
                        datumWasSet = true
                    else
                        local msg = string.format(
                            "INVALID WORK OFFSET\n\n" ..
                            "Current work offset (G%d) is not valid.\n\n" ..
                            "Please select a valid work offset (G54-G59)\n" ..
                            "before running the probe routine.",
                            currentOffset or 0)
                        wx.wxMessageBox(msg, "Configuration Error", wx.wxOK + wx.wxICON_ERROR)
                        error("Invalid work offset")
                    end
                else  -- Print Coords
                    -- Get TRUE surface from #394 for accurate machine coordinate
                    local trueSurfaceZ = mc.mcCntlGetPoundVar(inst, 394)
                    local displayMachZ
                    
                    if type(trueSurfaceZ) == "number" and trueSurfaceZ > -1e300 and trueSurfaceZ ~= SENTINEL_VALUE then
                        displayMachZ = trueSurfaceZ
                    else
                        -- Fallback to raw machine position
                        displayMachZ = surfaceMachZ
                    end
                    
                    -- Show both machine and work coordinates
                    mc.mcCntlSetLastError(inst, string.format("Surface (machine): Z%.4f, (work): Z%.4f", 
                                                              displayMachZ, surfaceWorkZ))
                end
                
                success = true
                return true
            end,
            debug.traceback  -- Get full stack trace on error
        )
        
        if not ok then
            errorMsg = tostring(err)
            success = false
        end
        
        -- Always cleanup regardless of success/failure
        ProbeCleanup()
        
        return success
    end
    
    -- Execute with error handling
    local success, result = pcall(ExecuteZProbe)
    
    if not success then
        mc.mcCntlSetLastError(inst, "ERROR: " .. tostring(result))
        wx.wxMessageBox("Probe sequence failed:\n" .. tostring(result), 
                       "Probe Error", wx.wxOK + wx.wxICON_ERROR)
    end
    -- Success: message already set by Set Datum or Print Coords
else
    dlg:Destroy()
end