-- Comprehensive Button Debug Script for Mach4
-- This script tests the button script environment and capabilities
-- Use this to understand what functions, paths, and features are available

local inst = mc.mcGetInstance()
if not inst then 
    wx.wxMessageBox("Failed to get Mach4 instance", "Error", wx.wxOK + wx.wxICON_ERROR)
    return 
end

-- ============================================
-- COLLECTION FUNCTIONS
-- ============================================

-- Collect environment information
local function CollectEnvironmentInfo()
    local info = {}
    
    -- Basic Mach4 info
    info.machDir = mc.mcCntlGetMachDir(inst) or "UNKNOWN"
    info.profileName = mc.mcProfileGetName(inst) or "UNKNOWN"
    info.profileDir = info.machDir .. "\\Profiles\\" .. info.profileName
    
    -- Current position info
    info.currentX = mc.mcAxisGetPos(inst, mc.X_AXIS) or 0
    info.currentY = mc.mcAxisGetPos(inst, mc.Y_AXIS) or 0
    info.currentZ = mc.mcAxisGetPos(inst, mc.Z_AXIS) or 0
    
    -- Machine info
    info.machineX = mc.mcAxisGetMachinePos(inst, mc.X_AXIS) or 0
    info.machineY = mc.mcAxisGetMachinePos(inst, mc.Y_AXIS) or 0
    info.machineZ = mc.mcAxisGetMachinePos(inst, mc.Z_AXIS) or 0
    
    -- System info
    info.screenWidth = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_X) or "UNKNOWN"
    info.screenHeight = wx.wxSystemSettings.GetMetric(wx.wxSYS_SCREEN_Y) or "UNKNOWN"
    
    return info
end

-- Test file operations
local function TestFileOperations(baseDir)
    local results = {}
    
    -- Test file creation
    local testFile = baseDir .. "\\debug_test.tmp"
    local success, err = pcall(function()
        local file = io.open(testFile, "w")
        if file then
            file:write("Test file created by debug script\n")
            file:write("Timestamp: " .. os.date() .. "\n")
            file:close()
            return true
        end
        return false
    end)
    
    results.canCreateFiles = success
    if not success then
        results.fileError = tostring(err)
    end
    
    -- Test file reading
    if success then
        local readSuccess, readErr = pcall(function()
            local file = io.open(testFile, "r")
            if file then
                local content = file:read("*all")
                file:close()
                -- Clean up
                os.remove(testFile)
                return content ~= nil and content ~= ""
            end
            return false
        end)
        results.canReadFiles = readSuccess
        if not readSuccess then
            results.readError = tostring(readErr)
        end
    end
    
    return results
end

-- Test script loading capabilities  
local function TestScriptLoading(baseDir)
    local results = {}
    
    -- Create a simple test script
    local testScript = baseDir .. "\\debug_loadtest.lua"
    local createSuccess = pcall(function()
        local file = io.open(testScript, "w")
        if file then
            file:write("-- Test script for loading\n")
            file:write("testLoadValue = 'Script loaded successfully'\n")
            file:write("function testLoadFunction()\n")
            file:write("    return 'Function from loaded script'\n")
            file:write("end\n")
            file:close()
            return true
        end
        return false
    end)
    
    if not createSuccess then
        results.couldNotCreateTestScript = true
        return results
    end
    
    -- Test dofile()
    local dofileSuccess, dofileErr = pcall(function()
        dofile(testScript)
        return testLoadValue == 'Script loaded successfully'
    end)
    results.dofileWorks = dofileSuccess
    if not dofileSuccess then
        results.dofileError = tostring(dofileErr)
    end
    
    -- Test loadfile()
    local loadfileSuccess, loadfileErr = pcall(function()
        local chunk = loadfile(testScript)
        if chunk then
            chunk()
            return testLoadFunction and testLoadFunction() == 'Function from loaded script'
        end
        return false
    end)
    results.loadfileWorks = loadfileSuccess
    if not loadfileSuccess then
        results.loadfileError = tostring(loadfileErr)
    end
    
    -- Test require() (probably won't work)
    local requireSuccess, requireErr = pcall(function()
        -- Clear package.loaded first
        package.loaded.debug_loadtest = nil
        local mod = require("debug_loadtest")
        return mod ~= nil
    end)
    results.requireWorks = requireSuccess
    if not requireSuccess then
        results.requireError = tostring(requireErr)
    end
    
    -- Clean up test script
    pcall(function() os.remove(testScript) end)
    
    return results
end

-- Test pound variable operations
local function TestPoundVariables()
    local results = {}
    
    -- Test setting and getting a test variable
    local testVar = 9999  -- Use high number to avoid conflicts
    local testValue = 12.345
    
    local setSuccess, setErr = pcall(function()
        mc.mcCntlSetPoundVar(inst, testVar, testValue)
        return true
    end)
    results.canSetPoundVars = setSuccess
    if not setSuccess then
        results.setPoundError = tostring(setErr)
    end
    
    if setSuccess then
        local getSuccess, getErr = pcall(function()
            local retrieved = mc.mcCntlGetPoundVar(inst, testVar)
            return math.abs(retrieved - testValue) < 0.001
        end)
        results.canGetPoundVars = getSuccess
        if not getSuccess then
            results.getPoundError = tostring(getErr)
        end
    end
    
    return results
end

-- Test profile operations
local function TestProfileOperations()
    local results = {}
    
    local testSection = "DebugTest"
    local testKey = "TestValue"
    local testValue = "12345"
    
    -- Test profile write
    local writeSuccess, writeErr = pcall(function()
        return mc.mcProfileWriteString(inst, testSection, testKey, testValue)
    end)
    results.canWriteProfile = writeSuccess
    if not writeSuccess then
        results.writeProfileError = tostring(writeErr)
    end
    
    -- Test profile read
    if writeSuccess then
        local readSuccess, readErr = pcall(function()
            local retrieved = mc.mcProfileGetString(inst, testSection, testKey, "DEFAULT")
            return retrieved == testValue
        end)
        results.canReadProfile = readSuccess
        if not readSuccess then
            results.readProfileError = tostring(readErr)
        end
    end
    
    return results
end

-- Test wxWidgets capabilities
local function TestWxWidgets()
    local results = {}
    
    -- Test basic wx availability
    results.wxAvailable = wx ~= nil
    
    if wx then
        -- Test message box
        results.canShowMessageBox = pcall(function()
            -- Don't actually show it during debug
            return wx.wxMessageBox ~= nil
        end)
        
        -- Test dialog creation
        local dialogSuccess, dialogErr = pcall(function()
            local dlg = wx.wxDialog(wx.NULL, wx.wxID_ANY, "Test", 
                wx.wxDefaultPosition, wx.wxSize(100, 100))
            if dlg then
                dlg:Destroy()
                return true
            end
            return false
        end)
        results.canCreateDialogs = dialogSuccess
        if not dialogSuccess then
            results.dialogError = tostring(dialogErr)
        end
        
        -- Test resizable dialog
        local resizeSuccess, resizeErr = pcall(function()
            local dlg = wx.wxDialog(wx.NULL, wx.wxID_ANY, "Test Resize", 
                wx.wxDefaultPosition, wx.wxSize(100, 100),
                wx.wxDEFAULT_DIALOG_STYLE + wx.wxRESIZE_BORDER)
            if dlg then
                dlg:SetMinSize(wx.wxSize(80, 80))
                dlg:SetMaxSize(wx.wxSize(800, 600))
                dlg:Destroy()
                return true
            end
            return false
        end)
        results.canCreateResizableDialogs = resizeSuccess
        if not resizeSuccess then
            results.resizeDialogError = tostring(resizeErr)
        end
    end
    
    return results
end

-- Test available Lua capabilities
local function TestLuaEnvironment()
    local results = {}
    
    -- Basic Lua info
    results.luaVersion = _VERSION or "UNKNOWN"
    
    -- Test package system
    results.packageAvailable = package ~= nil
    if package then
        results.packagePath = package.path or "NONE"
        results.packageCPath = package.cpath or "NONE"
    end
    
    -- Test os functions
    results.osAvailable = os ~= nil
    if os then
        results.canGetDate = pcall(function() return os.date() ~= nil end)
        results.canGetTime = pcall(function() return os.time() ~= nil end)
    end
    
    -- Test io functions  
    results.ioAvailable = io ~= nil
    
    -- Test math functions
    results.mathAvailable = math ~= nil
    
    -- Test string functions
    results.stringAvailable = string ~= nil
    
    -- Test table functions
    results.tableAvailable = table ~= nil
    
    return results
end

-- ============================================
-- MAIN DEBUG EXECUTION
-- ============================================

-- Collect all debug information
local envInfo = CollectEnvironmentInfo()
local fileOps = TestFileOperations(envInfo.profileDir)
local scriptLoading = TestScriptLoading(envInfo.profileDir)
local poundVars = TestPoundVariables()
local profileOps = TestProfileOperations()
local wxTests = TestWxWidgets()
local luaEnv = TestLuaEnvironment()

-- ============================================
-- RESULTS FORMATTING
-- ============================================

local function FormatResults()
    local report = {}
    
    table.insert(report, "=== MACH4 BUTTON SCRIPT ENVIRONMENT DEBUG REPORT ===")
    table.insert(report, "Generated: " .. (os.date() or "UNKNOWN"))
    table.insert(report, "")
    
    -- Environment Info
    table.insert(report, "--- ENVIRONMENT INFORMATION ---")
    table.insert(report, "Mach Directory: " .. envInfo.machDir)
    table.insert(report, "Profile Name: " .. envInfo.profileName)
    table.insert(report, "Profile Directory: " .. envInfo.profileDir)
    table.insert(report, string.format("Current Position: X=%.4f Y=%.4f Z=%.4f", 
        envInfo.currentX, envInfo.currentY, envInfo.currentZ))
    table.insert(report, string.format("Machine Position: X=%.4f Y=%.4f Z=%.4f", 
        envInfo.machineX, envInfo.machineY, envInfo.machineZ))
    table.insert(report, "Screen Resolution: " .. envInfo.screenWidth .. "x" .. envInfo.screenHeight)
    table.insert(report, "")
    
    -- Lua Environment
    table.insert(report, "--- LUA ENVIRONMENT ---")
    table.insert(report, "Lua Version: " .. luaEnv.luaVersion)
    table.insert(report, "Package System Available: " .. tostring(luaEnv.packageAvailable))
    if luaEnv.packageAvailable then
        table.insert(report, "Package Path: " .. (luaEnv.packagePath or "NONE"))
    end
    table.insert(report, "OS Functions: " .. tostring(luaEnv.osAvailable))
    table.insert(report, "IO Functions: " .. tostring(luaEnv.ioAvailable))
    table.insert(report, "Math Functions: " .. tostring(luaEnv.mathAvailable))
    table.insert(report, "String Functions: " .. tostring(luaEnv.stringAvailable))
    table.insert(report, "Table Functions: " .. tostring(luaEnv.tableAvailable))
    table.insert(report, "")
    
    -- File Operations
    table.insert(report, "--- FILE OPERATIONS ---")
    table.insert(report, "Can Create Files: " .. tostring(fileOps.canCreateFiles))
    if fileOps.fileError then
        table.insert(report, "File Creation Error: " .. fileOps.fileError)
    end
    table.insert(report, "Can Read Files: " .. tostring(fileOps.canReadFiles or false))
    if fileOps.readError then
        table.insert(report, "File Read Error: " .. fileOps.readError)
    end
    table.insert(report, "")
    
    -- Script Loading
    table.insert(report, "--- SCRIPT LOADING CAPABILITIES ---")
    table.insert(report, "dofile() Works: " .. tostring(scriptLoading.dofileWorks))
    if scriptLoading.dofileError then
        table.insert(report, "dofile() Error: " .. scriptLoading.dofileError)
    end
    table.insert(report, "loadfile() Works: " .. tostring(scriptLoading.loadfileWorks))
    if scriptLoading.loadfileError then
        table.insert(report, "loadfile() Error: " .. scriptLoading.loadfileError)
    end
    table.insert(report, "require() Works: " .. tostring(scriptLoading.requireWorks))
    if scriptLoading.requireError then
        table.insert(report, "require() Error: " .. scriptLoading.requireError)
    end
    table.insert(report, "")
    
    -- Pound Variables
    table.insert(report, "--- POUND VARIABLES ---")
    table.insert(report, "Can Set Pound Variables: " .. tostring(poundVars.canSetPoundVars))
    if poundVars.setPoundError then
        table.insert(report, "Set Error: " .. poundVars.setPoundError)
    end
    table.insert(report, "Can Get Pound Variables: " .. tostring(poundVars.canGetPoundVars or false))
    if poundVars.getPoundError then
        table.insert(report, "Get Error: " .. poundVars.getPoundError)
    end
    table.insert(report, "")
    
    -- Profile Operations
    table.insert(report, "--- PROFILE OPERATIONS ---")
    table.insert(report, "Can Write Profile: " .. tostring(profileOps.canWriteProfile))
    if profileOps.writeProfileError then
        table.insert(report, "Write Error: " .. profileOps.writeProfileError)
    end
    table.insert(report, "Can Read Profile: " .. tostring(profileOps.canReadProfile or false))
    if profileOps.readProfileError then
        table.insert(report, "Read Error: " .. profileOps.readProfileError)
    end
    table.insert(report, "")
    
    -- wxWidgets Tests
    table.insert(report, "--- WXWIDGETS CAPABILITIES ---")
    table.insert(report, "wx Available: " .. tostring(wxTests.wxAvailable))
    if wxTests.wxAvailable then
        table.insert(report, "Can Show Message Boxes: " .. tostring(wxTests.canShowMessageBox))
        table.insert(report, "Can Create Dialogs: " .. tostring(wxTests.canCreateDialogs))
        if wxTests.dialogError then
            table.insert(report, "Dialog Error: " .. wxTests.dialogError)
        end
        table.insert(report, "Can Create Resizable Dialogs: " .. tostring(wxTests.canCreateResizableDialogs))
        if wxTests.resizeDialogError then
            table.insert(report, "Resizable Dialog Error: " .. wxTests.resizeDialogError)
        end
    end
    table.insert(report, "")
    
    -- Summary
    table.insert(report, "--- SUMMARY FOR RESIZABLE DIALOG IMPLEMENTATION ---")
    local canImplement = fileOps.canCreateFiles and 
                         (scriptLoading.dofileWorks or scriptLoading.loadfileWorks) and
                         profileOps.canWriteProfile and profileOps.canReadProfile and
                         wxTests.canCreateResizableDialogs
    
    table.insert(report, "Can Implement External Module Approach: " .. tostring(canImplement))
    table.insert(report, "Recommended Approach: " .. 
        (canImplement and "External lua file with dofile()" or "Inline functions in each script"))
    table.insert(report, "")
    table.insert(report, "=== END REPORT ===")
    
    return table.concat(report, "\n")
end

-- ============================================
-- DISPLAY RESULTS
-- ============================================

-- Generate the full report
local fullReport = FormatResults()

-- Show in message box (with scrolling if too long)
local maxMessageLength = 8000  -- Reasonable limit for message box
if #fullReport > maxMessageLength then
    -- Truncate for message box
    local truncated = string.sub(fullReport, 1, maxMessageLength) .. "\n\n[REPORT TRUNCATED - See file for full report]"
    wx.wxMessageBox(truncated, "Debug Report (Truncated)", wx.wxOK + wx.wxICON_INFORMATION)
else
    wx.wxMessageBox(fullReport, "Debug Report", wx.wxOK + wx.wxICON_INFORMATION)
end

-- Also save to file
local reportFile = envInfo.profileDir .. "\\ButtonDebugReport.txt"
local success, err = pcall(function()
    local file = io.open(reportFile, "w")
    if file then
        file:write(fullReport)
        file:close()
        mc.mcCntlSetLastError(inst, "Debug report saved to: " .. reportFile)
        return true
    end
    return false
end)

if not success then
    mc.mcCntlSetLastError(inst, "Could not save debug report: " .. tostring(err))
end